<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\out\Cortex-M3-vx.xx.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\out\Cortex-M3-vx.xx.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 4.1 [Build 481]: Last Updated: Sun Sep 22 12:02:26 2013
<BR><P>
<H3>Maximum Stack Usage =       1704 bytes + Unknown(Functions without stacksize, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
TASKB &rArr; menu &rArr; isAdminSet &rArr; JudgeHLight &rArr; DispMenu_SubReader &rArr; DispTextLine &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[13c]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[7]">MenuFunctionPW</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[8]">MenuInitPWIN</a> from menuinit.o(.text) referenced 8 times from dispmenu.o(.data)
 <LI><a href="#[9]">MenuFunctionDemo1</a> from menu.o(.text) referenced 28 times from dispmenu.o(.data)
 <LI><a href="#[a]">MenuInit0</a> from menuinit.o(.text) referenced 130 times from dispmenu.o(.data)
 <LI><a href="#[b]">MenuFunctionCHIN</a> from menu.o(.text) referenced 6 times from dispmenu.o(.data)
 <LI><a href="#[c]">MenuInitCHIN</a> from menuinit.o(.text) referenced 8 times from dispmenu.o(.data)
 <LI><a href="#[d]">MenuInitCHNO</a> from menuinit.o(.text) referenced 6 times from dispmenu.o(.data)
 <LI><a href="#[e]">MenuFunctionCHPR</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[f]">MenuInitCHPR</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[10]">MenuFunctionCHLF</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[11]">MenuInitCHLF</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[12]">MenuFunctionCHST</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[13]">MenuInitCHST</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[14]">MenuFunctionCHGOODS</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[15]">MenuInitCHGOODS</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[16]">MenuFunctionADDLAYIN</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[17]">MenuInitLAYIN</a> from menuinit.o(.text) referenced 4 times from dispmenu.o(.data)
 <LI><a href="#[18]">MenuFunctionAddGoods</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[19]">MenuInitAddGoods</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[1a]">MenuFunctionDemo6</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[1b]">MenuFunctionDemo7</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[1c]">MenuInitNOST</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[1d]">MenuFunctionDemo8</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[1e]">MenuInitCOST</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[1f]">Hopper1Test</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[20]">MenuInitHOST1</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[21]">Hopper2Test</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[22]">MenuInitHOST2</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[23]">Hopper3Test</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[24]">MenuInitHOST3</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[25]">MenuFunctionDemo12</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[26]">MenuFunctionDemo13</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[27]">MenuFunctionKeyTest</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[28]">MenuFunctionAllChannelStat</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[29]">MenuFunctionChannelTest</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[2a]">MenuFunctionTESTCHIN</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[2b]">MenuFunctionAllCHResult</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[2c]">MenuFunctionIRTest</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[2d]">MenuFunctionLCDTest</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[2e]">MenuFunctionDOLCDTest</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[2f]">MenuFunctionTemperatureTest</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[30]">MenuFunctionDoTempeTest</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[31]">MenuFunctionXuanhuoTest</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[32]">MenuFunctionDoXuanhuoTest</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[33]">MenuFunctionTempTest</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[34]">MenuFunctionDoTempsTest</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[35]">MenuFunctionLEDTest</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[36]">MenuFunctionDoLEDTest</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[37]">MenuFunctionDemo38</a> from menu.o(.text) referenced 8 times from dispmenu.o(.data)
 <LI><a href="#[38]">MenuInitFLASH</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[39]">MenuFunctionDemo14</a> from menu.o(.text) referenced 8 times from dispmenu.o(.data)
 <LI><a href="#[3a]">MenuFunctionOCOIN</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[3b]">MenuInitOCOIN</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[3c]">MenuFunctionONOTE</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[3d]">MenuInitONOTE</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[3e]">MenuFunctionOCHANGE</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[3f]">MenuInitOCHANGE</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[40]">MenuFunctionONREADER</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[41]">MenuInitONREADER</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[42]">MenuFunctionREADERSetOFF</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[43]">MenuFunctionREADERSetMDB</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[44]">MenuFunctionONREADERCOST</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[45]">MenuInitOREADERCOST</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[46]">MenuFunctionCGSV</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[47]">MenuInitCGSV</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[48]">MenuFunctionNBUY</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[49]">MenuInitNBUY</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[4a]">MenuFunctionRCOIN</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[4b]">MenuInitRCOIN</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[4c]">MenuFunctionBMIN</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[4d]">MenuInitBMIN</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[4e]">MenuFunctionMMAX</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[4f]">MenuInitMMAX</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[50]">MenuFunctionDemo15</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[51]">MenuInitIOU</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[52]">MenuFunctionDBMN</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[53]">MenuInitDBMN</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[54]">MenuFunctionPONO</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[55]">MenuInitPONO</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[56]">MenuFunctionSACON</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[57]">MenuInitSACON</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[58]">MenuFunctionPOSEN</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[59]">MenuInitPOSEN</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[5a]">MenuFunctionPCEN</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[5b]">MenuInitPCEN</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[5c]">MenuFunctionLCDSEL</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[5d]">MenuInitLCDSEL</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[5e]">MenuFunctionKeySel</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[5f]">MenuInitKeySel</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[60]">MenuFunctionLogoSel</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[61]">MenuInitLogoSel</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[62]">MenuFunctionAutoColumn</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[63]">MenuInitAutoColumn</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[64]">MenuFunctionTenColumn</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[65]">MenuInitTenColumn</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[66]">MenuFunctionHOLDNOTE</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[67]">MenuInitHOLDNOTE</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[68]">MenuFunctionHOLDNOTE5</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[69]">MenuInitHOLDNOTE5</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[6a]">MenuFunctionHOLDNOTE10</a> from menu.o(.text) referenced 4 times from dispmenu.o(.data)
 <LI><a href="#[6b]">MenuInitHOLDNOTE10</a> from menuinit.o(.text) referenced 4 times from dispmenu.o(.data)
 <LI><a href="#[6c]">MenuFunctionDemo23</a> from menu.o(.text) referenced 6 times from dispmenu.o(.data)
 <LI><a href="#[6d]">MenuFunctionDemo24</a> from menu.o(.text) referenced 4 times from dispmenu.o(.data)
 <LI><a href="#[6e]">MenuFunctionDemo25</a> from menu.o(.text) referenced 4 times from dispmenu.o(.data)
 <LI><a href="#[6f]">MenuInitINCOME</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[70]">MenuFunctionDemo26</a> from menu.o(.text) referenced 4 times from dispmenu.o(.data)
 <LI><a href="#[71]">MenuInitNOIN</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[72]">MenuFunctionDemo27</a> from menu.o(.text) referenced 4 times from dispmenu.o(.data)
 <LI><a href="#[73]">MenuInitCOIN</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[74]">MenuFunctionDemo28</a> from menu.o(.text) referenced 4 times from dispmenu.o(.data)
 <LI><a href="#[75]">MenuInitTOTR</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[76]">MenuFunctionDemo29</a> from menu.o(.text) referenced 4 times from dispmenu.o(.data)
 <LI><a href="#[77]">MenuInitTOCH</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[78]">MenuFunctionDemo30</a> from menu.o(.text) referenced 12 times from dispmenu.o(.data)
 <LI><a href="#[79]">MenuInitCOVA1</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[7a]">MenuInitCOVA2</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[7b]">MenuInitCOVA3</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[7c]">MenuFunctionDemo31</a> from menu.o(.text) referenced 4 times from dispmenu.o(.data)
 <LI><a href="#[7d]">MenuFunctionDemo32</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[7e]">MenuInitSUNUM</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[7f]">MenuFunctionDemo33</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[80]">MenuInitDBNUM</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[81]">MenuFunctionDemo34</a> from menu.o(.text) referenced 4 times from dispmenu.o(.data)
 <LI><a href="#[82]">MenuFunctionDemo36</a> from menu.o(.text) referenced 4 times from dispmenu.o(.data)
 <LI><a href="#[83]">MenuFunctionDemo37</a> from menu.o(.text) referenced 8 times from dispmenu.o(.data)
 <LI><a href="#[84]">MenuInitCHSU</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[85]">MenuInitCHMONEY</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[86]">MenuInitCHDO</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[87]">MenuFunctionCONF</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[88]">MenuInitINCOMEJIDU</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[89]">MenuInitNOINJIDU</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[8a]">MenuInitCOINJIDU</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[8b]">MenuInitTOTRJIDU</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[8c]">MenuInitTOCHJIDU</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[8d]">MenuInitCOVA1JIDU</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[8e]">MenuInitCOVA2JIDU</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[8f]">MenuInitCOVA3JIDU</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[90]">MenuInitCHSUJIDU</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[91]">MenuInitCHMONEYJIDU</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[92]">MenuFunctionCONFJIDU</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[93]">MenuFunctionENG</a> from menu.o(.text) referenced 4 times from dispmenu.o(.data)
 <LI><a href="#[94]">MenuFunctionCHN</a> from menu.o(.text) referenced 4 times from dispmenu.o(.data)
 <LI><a href="#[95]">MenuFunctionRussian</a> from menu.o(.text) referenced 4 times from dispmenu.o(.data)
 <LI><a href="#[96]">MenuFunctionYear</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[97]">MenuInitYear</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[98]">MenuFunctionMonth</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[99]">MenuInitMonth</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[9a]">MenuFunctionDate</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[9b]">MenuInitDate</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[9c]">MenuFunctionHour</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[9d]">MenuInitHour</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[9e]">MenuFunctionMinute</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[9f]">MenuInitMinute</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[a0]">MenuFunctionNEWPW</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[a1]">MenuFunctionNEWPW2</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[a2]">MenuFunctionGPRS</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[a3]">MenuInitGPRS</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[a4]">MenuFunctionSENO</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[a5]">MenuInitSENO</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[a6]">MenuFunctionGSMNO</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[a7]">MenuInitGSMNO</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[a8]">MenuFunctionTemprature</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[a9]">MenuInitTemerature</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[aa]">MenuFunctionTurkey</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[ab]">MenuFunctionCompressOn</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[ac]">MenuInitCompressOn</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[ad]">MenuFunctionCompressHourOn</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[ae]">MenuInitCompressHourOn</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[af]">MenuFunctionCompressMinuteOn</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[b0]">MenuInitCompressMinuteOn</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[b1]">MenuFunctionCompressHourOff</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[b2]">MenuInitCompressHourOff</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[b3]">MenuFunctionCompressMinuteOff</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[b4]">MenuInitCompressMinuteOff</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[b5]">MenuFunctionLEDOn</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[b6]">MenuInitLEDOn</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[b7]">MenuFunctionLEDHourOn</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[b8]">MenuInitLEDHourOn</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[b9]">MenuFunctionLEDMinuteOn</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[ba]">MenuInitLEDMinuteOn</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[bb]">MenuFunctionLEDHourOff</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[bc]">MenuInitLEDHourOff</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[bd]">MenuFunctionLEDMinuteOff</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[be]">MenuInitLEDMinuteOff</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[bf]">MenuFunctionLAYIN</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[c0]">MenuInitLAYNO</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[c1]">MenuFunctionLAYENABLE</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[c2]">MenuInitLAYENABLE</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[c3]">MenuFunctionMAXGOODS</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[c4]">MenuInitMAXGOODS</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[c5]">MenuFunctionCH1</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[c6]">MenuInitCH1</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[c7]">MenuFunctionCH1Num</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[c8]">MenuInitCH1Num</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[c9]">MenuFunctionCH2</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[ca]">MenuInitCH2</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[cb]">MenuFunctionCH2Num</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[cc]">MenuInitCH2Num</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[cd]">MenuFunctionCH3</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[ce]">MenuInitCH3</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[cf]">MenuFunctionCH3Num</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[d0]">MenuInitCH3Num</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[d1]">MenuFunctionCH4</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[d2]">MenuInitCH4</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[d3]">MenuFunctionCH4Num</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[d4]">MenuInitCH4Num</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[d5]">MenuFunctionCH5</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[d6]">MenuInitCH5</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[d7]">MenuFunctionCH5Num</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[d8]">MenuInitCH5Num</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[d9]">MenuFunctionCH6</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[da]">MenuInitCH6</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[db]">MenuFunctionCH6Num</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[dc]">MenuInitCH6Num</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[dd]">MenuFunctionCH7</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[de]">MenuInitCH7</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[df]">MenuFunctionCH7Num</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[e0]">MenuInitCH7Num</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[e1]">MenuFunctionCH8</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[e2]">MenuInitCH8</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[e3]">MenuFunctionCH8Num</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[e4]">MenuInitCH8Num</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[e5]">MenuFunctionCH9</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[e6]">MenuInitCH9</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[e7]">MenuFunctionCH9Num</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[e8]">MenuInitCH9Num</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[e9]">MenuFunctionCH0</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[ea]">MenuInitCH0</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[eb]">MenuFunctionCH0Num</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[ec]">MenuInitCH0Num</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[ed]">MenuFunctionNOCH1</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[ee]">MenuInitNOCH1</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[ef]">MenuFunctionNOCH2</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[f0]">MenuInitNOCH2</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[f1]">MenuFunctionNOCH3</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[f2]">MenuInitNOCH3</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[f3]">MenuFunctionNOCH4</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[f4]">MenuInitNOCH4</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[f5]">MenuFunctionNOCH5</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[125]">__s_OSCtxSw</a> from os_cpu_c.o(.emb_text) referenced from os_cpu_c.o(.emb_text)
 <LI><a href="#[f6]">MenuInitNOCH5</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[f7]">MenuFunctionNOCH6</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[f8]">MenuInitNOCH6</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[f9]">MenuFunctionNOCH7</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[fa]">MenuInitNOCH7</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[fb]">MenuFunctionNOCH8</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[fc]">MenuInitNOCH8</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[fd]">MenuFunctionCOCH1</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[fe]">MenuInitCOCH1</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[ff]">MenuFunctionCOCH2</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[100]">MenuInitCOCH2</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[101]">MenuFunctionCOCH3</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[102]">MenuInitCOCH3</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[103]">MenuFunctionCOCH4</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[104]">MenuInitCOCH4</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[105]">MenuFunctionCOCH5</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[106]">MenuInitCOCH5</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[107]">MenuFunctionCOCH6</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[108]">MenuInitCOCH6</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[109]">MenuFunctionCOCH7</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[10a]">MenuInitCOCH7</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[10b]">MenuFunctionCOCH8</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[10c]">MenuInitCOCH8</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[10d]">MenuFunctionCGVA1</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[10e]">MenuInitCGVA1</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[10f]">MenuFunctionCGVA2</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[110]">MenuInitCGVA2</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[111]">MenuFunctionCGVA3</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[112]">MenuInitCGVA3</a> from menuinit.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[113]">MenuFunctionCONFSET</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[114]">MenuFunctionNOTETEST</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[115]">MenuFunctionCOINSTEST</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[116]">MenuFunctionSetMEI</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[117]">MenuFunctionSetGBA</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[118]">MenuFunctionSetITL</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[119]">MenuFunctionSetClose</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[11a]">MenuFunctionPW2</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[11b]">MenuFunctionPW3</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[11c]">MenuFunctionPWAdmin</a> from menu.o(.text) referenced 2 times from dispmenu.o(.data)
 <LI><a href="#[11d]">UartDev_Init</a> from uartdev_lpc17xx.o(.text) referenced 2 times from uartdev_lpc17xx.o(.data)
 <LI><a href="#[11e]">UartDev_UnInit</a> from uartdev_lpc17xx.o(.text) referenced 2 times from uartdev_lpc17xx.o(.data)
 <LI><a href="#[11f]">UartDev_BufTx</a> from uartdev_lpc17xx.o(.text) referenced 2 times from uartdev_lpc17xx.o(.data)
 <LI><a href="#[120]">UartDev_BufRx</a> from uartdev_lpc17xx.o(.text) referenced 2 times from uartdev_lpc17xx.o(.data)
 <LI><a href="#[121]">UartDev_BufFlush</a> from uartdev_lpc17xx.o(.text) referenced 2 times from uartdev_lpc17xx.o(.data)
 <LI><a href="#[13b]">__main</a> from __main.o(!!!main) referenced from vector_table.o(.constdata)
 <LI><a href="#[123]">defaultVectorHandle</a> from target.o(.text) referenced 37 times from vector_table.o(.constdata)
 <LI><a href="#[124]">svcallHandle</a> from os_cpu_c.o(.emb_text) referenced from vector_table.o(.constdata)
 <LI><a href="#[125]">__s_OSCtxSw</a> from os_cpu_c.o(.emb_text) referenced from vector_table.o(.constdata)
 <LI><a href="#[126]">__sysTickIsr</a> from os_cpu_c.o(.text) referenced from vector_table.o(.constdata)
 <LI><a href="#[127]">TIMER0_IRQHandler</a> from timer.o(.text) referenced from vector_table.o(.constdata)
 <LI><a href="#[128]">TIMER1_IRQHandler</a> from timer.o(.text) referenced from vector_table.o(.constdata)
 <LI><a href="#[129]">UART0_StdIntHandler</a> from lpc17xx_uart.o(.text) referenced from vector_table.o(.constdata)
 <LI><a href="#[12a]">Uart1_IRQHandler</a> from uart1.o(.text) referenced from vector_table.o(.constdata)
 <LI><a href="#[12b]">Uart2_IRQHandler</a> from uart.o(.text) referenced from vector_table.o(.constdata)
 <LI><a href="#[12c]">Uart3_IRQHandler</a> from uart.o(.text) referenced from vector_table.o(.constdata)
 <LI><a href="#[12d]">I2C0_IRQHandler</a> from i2c.o(.text) referenced from vector_table.o(.constdata)
 <LI><a href="#[12e]">EINT2_IRQHandler</a> from keypad.o(.text) referenced from vector_table.o(.constdata)
 <LI><a href="#[12f]">__s_OSStartHighRdy</a> from os_cpu_c.o(.emb_text) referenced from os_cpu_c.o(.emb_text)
 <LI><a href="#[130]">__s_OS_ENTER_CRITICAL</a> from os_cpu_c.o(.emb_text) referenced from os_cpu_c.o(.emb_text)
 <LI><a href="#[131]">__s_OS_EXIT_CRITICAL</a> from os_cpu_c.o(.emb_text) referenced from os_cpu_c.o(.emb_text)
 <LI><a href="#[132]">__s_changeToSYSMode</a> from os_cpu_c.o(.emb_text) referenced from os_cpu_c.o(.emb_text)
 <LI><a href="#[133]">TASKB</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[134]">TASKC</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[135]">Task_CoinPlus</a> from main.o(.text) referenced 2 times from main.o(.text)
 <LI><a href="#[136]">Task_DEXServer</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[124]">svcallHandle</a> from os_cpu_c.o(.emb_text) referenced from target.o(.text)
 <LI><a href="#[125]">__s_OSCtxSw</a> from os_cpu_c.o(.emb_text) referenced from os_cpu_c.o(.text)
 <LI><a href="#[124]">svcallHandle</a> from os_cpu_c.o(.emb_text) referenced from os_cpu_c.o(.text)
 <LI><a href="#[137]">taskEntry</a> from os_cpu_c.o(.emb_text) referenced from os_cpu_c.o(.text)
 <LI><a href="#[138]">_sputc</a> from _sputc.o(.text) referenced from c89vsprintf.o(.text)
 <LI><a href="#[138]">_sputc</a> from _sputc.o(.text) referenced from __2sprintf.o(.text)
 <LI><a href="#[139]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[13a]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[1f0]">TASK0</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[12e]">EINT2_IRQHandler</a> from keypad.o(.text) referenced from keypad.o(.text)
 <LI><a href="#[127]">TIMER0_IRQHandler</a> from timer.o(.text) referenced from timer.o(.text)
 <LI><a href="#[128]">TIMER1_IRQHandler</a> from timer.o(.text) referenced from timer.o(.text)
 <LI><a href="#[12b]">Uart2_IRQHandler</a> from uart.o(.text) referenced from uart.o(.text)
 <LI><a href="#[12c]">Uart3_IRQHandler</a> from uart.o(.text) referenced from uart.o(.text)
 <LI><a href="#[12d]">I2C0_IRQHandler</a> from i2c.o(.text) referenced from i2c.o(.text)
 <LI><a href="#[12a]">Uart1_IRQHandler</a> from uart1.o(.text) referenced from uart1.o(.text)
 <LI><a href="#[393]">Reader_SetupConfigData</a> from reader.o(.text) referenced from reader.o(.text)
 <LI><a href="#[395]">Reader_Poll</a> from reader.o(.text) referenced 2 times from reader.o(.text)
 <LI><a href="#[39a]">Reader_SessionComplete</a> from reader.o(.text) referenced 2 times from reader.o(.text)
 <LI><a href="#[3e2]">OS_TaskStat</a> from os_core.o(.text) referenced from os_core.o(.text)
 <LI><a href="#[3e5]">OS_TaskIdle</a> from os_core.o(.text) referenced from os_core.o(.text)
 <LI><a href="#[126]">__sysTickIsr</a> from os_cpu_c.o(.text) referenced from os_cpu_c.o(.text)
 <LI><a href="#[41f]">UartRxCallBack</a> from uartdev_lpc17xx.o(.text) referenced from uartdev_lpc17xx.o(.text)
 <LI><a href="#[41d]">UartTxCallBack</a> from uartdev_lpc17xx.o(.text) referenced from uartdev_lpc17xx.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[13b]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[13d]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[13f]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[488]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[489]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[48a]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[48b]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[48c]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[140]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[464]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[142]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[144]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[146]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[147]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[48d]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))

<P><STRONG><a name="[48e]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[148]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[14a]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[14b]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[14c]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[14e]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[150]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[152]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[153]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[154]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>

<P><STRONG><a name="[156]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>

<P><STRONG><a name="[48f]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[158]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[15a]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[15c]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[15e]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>

<P><STRONG><a name="[490]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[160]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init &rArr; _fp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[162]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[491]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[164]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000B))
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[492]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[493]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[494]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))

<P><STRONG><a name="[166]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[495]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[496]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[167]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[497]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[498]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000028))

<P><STRONG><a name="[499]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[49a]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[49b]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[49c]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[49d]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[49e]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[49f]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[4a0]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[4a1]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002F))

<P><STRONG><a name="[4a2]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[4a3]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[170]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[4a4]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[4a5]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[4a6]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[4a7]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[4a8]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[4a9]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[13e]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[4aa]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[169]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[16b]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_li &rArr; __rt_lib_init &rArr; _fp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[4ab]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[16c]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; OSInit &rArr; OS_InitTaskIdle &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[4ac]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[47e]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[16f]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[4ad]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[171]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[124]"></a>svcallHandle</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, os_cpu_c.o(.emb_text))
<BR>[Address Reference Count : 3]<UL><LI> vector_table.o(.constdata)
<LI> target.o(.text)
<LI> os_cpu_c.o(.text)
</UL>
<P><STRONG><a name="[3fd]"></a>__OSStartHighRdy</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, os_cpu_c.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStartHighRdy
</UL>

<P><STRONG><a name="[12f]"></a>__s_OSStartHighRdy</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, os_cpu_c.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSwHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_cpu_c.o(.emb_text)
</UL>
<P><STRONG><a name="[125]"></a>__s_OSCtxSw</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, os_cpu_c.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSwHook
</UL>
<BR>[Address Reference Count : 3]<UL><LI> vector_table.o(.constdata)
<LI> os_cpu_c.o(.emb_text)
<LI> os_cpu_c.o(.text)
</UL>
<P><STRONG><a name="[130]"></a>__s_OS_ENTER_CRITICAL</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, os_cpu_c.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> os_cpu_c.o(.emb_text)
</UL>
<P><STRONG><a name="[131]"></a>__s_OS_EXIT_CRITICAL</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, os_cpu_c.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> os_cpu_c.o(.emb_text)
</UL>
<P><STRONG><a name="[132]"></a>__s_changeToSYSMode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, os_cpu_c.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> os_cpu_c.o(.emb_text)
</UL>
<P><STRONG><a name="[3ac]"></a>changeToUSRMode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, os_cpu_c.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyIsrSet
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyIsrEnable
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__s_zyIsrDisable
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__s_zyIsrClr
</UL>

<P><STRONG><a name="[137]"></a>taskEntry</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, os_cpu_c.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = taskEntry &rArr; OSTaskDel &rArr; OS_FlagUnlink
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_cpu_c.o(.text)
</UL>
<P><STRONG><a name="[175]"></a>CreateMbox</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CreateMbox &rArr; OSQCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK0
</UL>

<P><STRONG><a name="[4ae]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[179]"></a>systeminit</STRONG> (Thumb, 292 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = systeminit &rArr; RstSystemPara &rArr; ClearScreen &rArr; Pitu_LCDClrScreen &rArr; Pitu_LCDSetCursor &rArr; Pitu_LCDPutCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XTransaction
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSystemPara2
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSystemPara1
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSystemPara
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XKeySystemVisible
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XColSystemPara
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XChannels
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RstSystemPara
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteGPREG
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK0
</UL>

<P><STRONG><a name="[184]"></a>SendChar</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendString
</UL>

<P><STRONG><a name="[183]"></a>SendString</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>

<P><STRONG><a name="[4af]"></a>GetKey</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[4b0]"></a>IsInTime</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[185]"></a>AutoAddColumn</STRONG> (Thumb, 260 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AutoAddColumn
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isDontReduceNum
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionAutoColumn
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKB
</UL>

<P><STRONG><a name="[1c1]"></a>TurkeySystemSet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKB
</UL>

<P><STRONG><a name="[135]"></a>Task_CoinPlus</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Task_CoinPlus &rArr; OSMboxPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[18a]"></a>StartCoinplusTask</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[136]"></a>Task_DEXServer</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Task_DEXServer &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[134]"></a>TASKC</STRONG> (Thumb, 1768 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1568 + Unknown Stack Size
<LI>Call Chain = TASKC &rArr; BillAcceptor_PollProc &rArr; BillAcceptor_PackAnalysis &rArr; BillAcceptor_EscrowProc &rArr; BillAcceptor_Stack &rArr; VPMission_Payin_RPT &rArr; VPBusFrameUnPack &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMission_Poll
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMission_Init
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMission_Debt_RPT
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMission_Cost_RPT
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMission_Button_RPT
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMission_Admin_RPT
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3_Init
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_Init
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_Init
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Init
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trace
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectKey_InitProc
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_MainProc
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_IsComErr
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_InitPara
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCn_Init
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPend
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMoneyDevStat
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HopperPayoutCmd
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSelectKey
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNoteEnBit
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEscrowMinCh
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCoinEnBit
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableMoneyType
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnNoteDevCmd
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnCoinDevCmd
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvOutCommand
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvCheckCommand
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisNoteDevCmd
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisCoinDevCmd
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_PollProc
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_Init
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_Available
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckVMCStat
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPricePara
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckNotePara
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckDriverStat
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckCoinPara
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Changer_Payout
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Changer_Init
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_Stack
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_Return
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_PollProc
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_Init
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_Available
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACDCModuleQuery
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[133]"></a>TASKB</STRONG> (Thumb, 4452 bytes, Stack size 72 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1704 + Unknown Stack Size
<LI>Call Chain = TASKB &rArr; menu &rArr; isAdminSet &rArr; JudgeHLight &rArr; DispMenu_SubReader &rArr; DispTextLine &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isBillSingleWork
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_timer
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_timer
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XTransaction
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XChannels
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vmc_PostToReader
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vmc_PendFromReader
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vmc_HandleReaderMsg
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VP_CMD_Opt
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateSelectionLed
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trace
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTouBiStat
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaleTimeoutProc
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_SetItemValue
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_GetFundsMultiplyUnit
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCn_GetFullTime
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteGPREG
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ReadGPREG
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQFlush
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQAccept
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPend
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxAccept
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WhiteBlock
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyProcess
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitKey
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoPayOutMsg
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoNoteStackMsg
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoNoteReturnMsg
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoDingshiMsg
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoChuhuoMsg
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispWuhuoText
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispVersionText
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispSaleText
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPayoutText
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispOverText
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispLessText
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispInputText
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispInputErrText
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispInitText
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispIOUText
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispErrText
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispEndText
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispChuhuoText
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispChaxunText
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispChaoshiText
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispChangeText
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispBeginText
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAddMoneyText
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_ChnChk
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_Off
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurkeySystemSet
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoAddColumn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[1f0]"></a>TASK0</STRONG> (Thumb, 284 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = TASK0 &rArr; systeminit &rArr; RstSystemPara &rArr; ClearScreen &rArr; Pitu_LCDClrScreen &rArr; Pitu_LCDSetCursor &rArr; Pitu_LCDPutCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Start
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Init
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Feed
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCn_Init
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT45DB_WaitOK
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT45DB_Init
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT45DB_GetFlashPara
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systeminit
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateMbox
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[16d]"></a>main</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = main &rArr; OSInit &rArr; OS_InitTaskIdle &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;targetInit
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinInit
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[1ff]"></a>lcd_delay</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_send_up
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_send
</UL>

<P><STRONG><a name="[1fe]"></a>delay_nms</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, lcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_send_up
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_send
</UL>

<P><STRONG><a name="[4b1]"></a>delay_ns</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lcd.o(.text), UNUSED)

<P><STRONG><a name="[1fd]"></a>lcd_send</STRONG> (Thumb, 502 bytes, Stack size 24 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_nms
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_On
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCursorPost
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line_Reverse
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFull_LCD
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_LCD
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WhiteBlock
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_Off
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrZiFu
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nLCD_WhiteBlock
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nDraw_RECT
</UL>

<P><STRONG><a name="[200]"></a>lcd_send_up</STRONG> (Thumb, 488 bytes, Stack size 20 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lcd_send_up
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_nms
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_On
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCursorPost
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line_Reverse
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFull_LCD
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_LCD
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WhiteBlock
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_Off
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrZiFu
</UL>

<P><STRONG><a name="[202]"></a>Pitu_LCDPutByte</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, lcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pitu_LCDPutData
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pitu_LCDPutCmd
</UL>

<P><STRONG><a name="[201]"></a>Pitu_LCDPutCmd</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Pitu_LCDPutCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pitu_LCDPutByte
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pitu_DisplayPoint
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pitu_LCDSetCursor
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pitu_LCDInit
</UL>

<P><STRONG><a name="[203]"></a>Pitu_LCDInit</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Pitu_LCDInit &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pitu_LCDPutCmd
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[1c2]"></a>LCD_Init</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LCD_Init &rArr; Pitu_LCDInit &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pitu_LCDInit
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_send_up
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_send
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKB
</UL>

<P><STRONG><a name="[204]"></a>Pitu_LCDPutData</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Pitu_LCDPutData
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pitu_LCDPutByte
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pitu_DisplayPoint
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pitu_LCDPutLOGOBmp
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pitu_LCDDisplaySquare
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pitu_LCDPutBmp
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pitu_LCDClearLine
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pitu_one_word
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pitu_LCDClrScreen
</UL>

<P><STRONG><a name="[205]"></a>Pitu_LCDSetCursor</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Pitu_LCDSetCursor &rArr; Pitu_LCDPutCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pitu_LCDPutCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pitu_LCDPutLOGOBmp
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pitu_LCDDisplaySquare
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pitu_LCDPutBmp
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pitu_LCDClearLine
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pitu_one_word
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pitu_LCDClrScreen
</UL>

<P><STRONG><a name="[206]"></a>Pitu_LCDClrScreen</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Pitu_LCDClrScreen &rArr; Pitu_LCDSetCursor &rArr; Pitu_LCDPutCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pitu_LCDSetCursor
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pitu_LCDPutData
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pitu_LCDDisplaySquare
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
</UL>

<P><STRONG><a name="[1bf]"></a>ClearScreen</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ClearScreen &rArr; Pitu_LCDClrScreen &rArr; Pitu_LCDSetCursor &rArr; Pitu_LCDPutCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pitu_LCDClrScreen
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_send_up
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_send
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionDoLEDTest
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionLEDTest
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionDoTempsTest
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionTempTest
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionDoXuanhuoTest
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionXuanhuoTest
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionDoTempeTest
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionTemperatureTest
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionDOLCDTest
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionLCDTest
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionAllCHResult
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionDemo8
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionDemo7
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionAddGoods
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChannelTest
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionTurkey
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionRussian
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllChannelResult
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllChannelStat
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RstTurkeySystemPara
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RstSystemPara
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispSaleText
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispErrText
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispEndText
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispBeginText
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKB
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitAddGoods
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_HoldNote
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_SubReader
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_SubNOTE
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_SubCHResult
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_SetAdmin
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_SetConfirmation
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_CoinValue
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_ChangeValue
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_NoteValue
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_SetChannel
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_LEDSet
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_TempSet
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_TimeSet
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_System
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_ConfirmationJidu
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_Confirmation
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_NoteTestConfirm
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_CoinsTestConfirm
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_TransInputChannelNoJidu
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_TransInputChannelNo
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_ChannelTransJidu
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_ChannelTrans
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_GoodsJidu
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_Goods
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_PaymentsJidu
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_Payments
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_Transactions
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_Business
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_DriverInputNum
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_KeyTest
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_Driver
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_AddInputChannelNo
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_AddGoods
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_InputNum
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_Channel
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_InputLayerNum
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_Root
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_SysLanguage
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_Language
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_Password
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPSynGoodsCol
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPChangeColPrice
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPAddSingleColGoods
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPAddLayerColGoods
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPAddChanges
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPAddAllColGoods
</UL>

<P><STRONG><a name="[207]"></a>Pitu_one_word</STRONG> (Thumb, 156 bytes, Stack size 64 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Pitu_one_word &rArr; Pitu_LCDSetCursor &rArr; Pitu_LCDPutCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pitu_LCDSetCursor
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pitu_LCDPutData
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pitu_LCDPrintf
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pitu_LCDClearLine
</UL>

<P><STRONG><a name="[208]"></a>Pitu_LCDClearLine</STRONG> (Thumb, 336 bytes, Stack size 176 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = Pitu_LCDClearLine &rArr; Pitu_one_word &rArr; Pitu_LCDSetCursor &rArr; Pitu_LCDPutCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pitu_one_word
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pitu_LCDSetCursor
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pitu_LCDPutData
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pitu_LCDPrintf
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispSaleText
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPayoutText
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispInputText
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispInputErrText
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispInitText
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispErrText
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispChaxunText
</UL>

<P><STRONG><a name="[20a]"></a>Pitu_LCDPrintf</STRONG> (Thumb, 938 bytes, Stack size 776 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1036<LI>Call Chain = Pitu_LCDPrintf &rArr; Pitu_LCDClearLine &rArr; Pitu_one_word &rArr; Pitu_LCDSetCursor &rArr; Pitu_LCDPutCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPituLibStr
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pitu_LCDClearLine
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pitu_one_word
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFull_LCD
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_LCD
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoChuhuoMsg
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispWuhuoText
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispSaleText
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPayoutText
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispOverText
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispLessText
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispInputText
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispInputErrText
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispIOUText
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispErrText
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispEndText
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispChuhuoText
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispChaxunText
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispChangeText
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispBeginText
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_VP_CMD_ChuhuoMsg
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispTextLine
</UL>

<P><STRONG><a name="[20d]"></a>Write_LCD</STRONG> (Thumb, 500 bytes, Stack size 88 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1448<LI>Call Chain = Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetScriptUnicode
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pitu_LCDPrintf
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_send_up
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_send
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionDoLEDTest
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionLEDTest
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionDoTempsTest
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionTempTest
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionDoXuanhuoTest
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionXuanhuoTest
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionDoTempeTest
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionTemperatureTest
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionLCDTest
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionIRTest
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionAllCHResult
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HopperTest
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionDemo8
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionDemo7
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChannelTest
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionPW
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionPWAdmin
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionPW3
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionPW2
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputDisplay
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllChannelResult
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllChannelStat
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyget
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keydisplay
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_SubCHResult
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispTextLine
</UL>

<P><STRONG><a name="[211]"></a>WriteFull_LCD</STRONG> (Thumb, 566 bytes, Stack size 88 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1448<LI>Call Chain = WriteFull_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetScriptUnicode
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pitu_LCDPrintf
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_send_up
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_send
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionDoXuanhuoTest
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionCHLF
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoChuhuoMsg
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispWuhuoText
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispVersionText
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispSaleText
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPayoutText
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispOverText
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispLessText
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispInputText
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispInputErrText
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispInitText
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispIOUText
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispErrText
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispEndText
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispChuhuoText
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispChaxunText
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispChaoshiText
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispChangeText
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispBeginText
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAddMoneyText
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_GoodsJidu
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_VP_CMD_ChuhuoMsg
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_VP_CMD_Payout_IOUText
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_VP_CMD_PayoutText
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispRetransText
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPSynGoodsCol
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPChangeColPrice
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPAddSingleColGoods
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPAddLayerColGoods
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPAddChanges
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPAddAllColGoods
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_CmdOutOfSequence
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_MalfunctionError
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_EndSession
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_VendDenied
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_VendApproved
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_BeginSession
</UL>

<P><STRONG><a name="[212]"></a>Line_Reverse</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Line_Reverse &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_send_up
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_send
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputDisplay
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_HoldNote
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_SubReader
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_SubNOTE
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_SetAdmin
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_SetConfirmation
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_CoinValue
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_ChangeValue
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_NoteValue
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_SetChannel
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_LEDSet
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_TempSet
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_TimeSet
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_System
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_ConfirmationJidu
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_Confirmation
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_NoteTestConfirm
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_CoinsTestConfirm
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_ChannelTransJidu
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_ChannelTrans
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_GoodsJidu
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_Goods
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_PaymentsJidu
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_Payments
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_Transactions
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_Business
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_Driver
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_AddGoods
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_Channel
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_Root
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_SysLanguage
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_Language
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_Password
</UL>

<P><STRONG><a name="[1be]"></a>LCD_WhiteBlock</STRONG> (Thumb, 330 bytes, Stack size 24 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LCD_WhiteBlock &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_send_up
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_send
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionDOLCDTest
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKB
</UL>

<P><STRONG><a name="[213]"></a>SetCursorPost</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SetCursorPost &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_send_up
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_send
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputDisplay
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyget
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispInputText
</UL>

<P><STRONG><a name="[214]"></a>Cursor_On</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Cursor_On &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_send_up
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionDemo8
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionDemo7
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputDisplay
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispInputText
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitPWIN
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitLAYIN
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitCHIN
</UL>

<P><STRONG><a name="[1cd]"></a>Cursor_Off</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Cursor_Off &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_send_up
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_send
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionONREADERCOST
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionOCOIN
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionRCOIN
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionNBUY
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionHOLDNOTE10
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionHOLDNOTE5
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionHOLDNOTE
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionTenColumn
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionAutoColumn
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionLogoSel
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionKeySel
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionLCDSEL
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionPCEN
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionPOSEN
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionSACON
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionPONO
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionCGSV
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunctionNOCH
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunctionCOCH
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunctionCGVA
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionDemo8
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionDemo7
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionADDLAYIN
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionCHGOODS
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionCHLF
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionCHST
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionCHPR
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionTESTCHIN
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChannelTest
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionCHIN
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionPW
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionPWAdmin
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionPW3
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionPW2
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaleTimeoutProc
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyProcess
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispInputText
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKB
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionCHNum
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionCH
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionMAXGOODS
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionLAYENABLE
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionLAYIN
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionNEWPW2
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionNEWPW
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionLEDMinuteOff
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionLEDHourOff
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionLEDMinuteOn
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionLEDHourOn
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionLEDOn
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionCompressMinuteOff
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionCompressHourOff
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionCompressMinuteOn
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionCompressHourOn
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionCompressOn
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionMinute
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionHour
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionDate
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionMonth
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionYear
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionTemprature
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionMMAX
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionBMIN
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionOCHANGE
</UL>

<P><STRONG><a name="[215]"></a>Pitu_LCDPutBmp</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pitu_LCDSetCursor
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pitu_LCDPutData
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pitu_LCDPutPicBmp
</UL>

<P><STRONG><a name="[216]"></a>Pitu_LCDDisplaySquare</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pitu_LCDClrScreen
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pitu_LCDSetCursor
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pitu_LCDPutData
</UL>

<P><STRONG><a name="[217]"></a>Pitu_LCDPutLOGOBmp</STRONG> (Thumb, 274 bytes, Stack size 832 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 852<LI>Call Chain = Pitu_LCDPutLOGOBmp &rArr; Pitu_LCDSetCursor &rArr; Pitu_LCDPutCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLOGO
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pitu_LCDSetCursor
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pitu_LCDPutData
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispInitText
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispEndText
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispBeginText
</UL>

<P><STRONG><a name="[219]"></a>Pitu_LCDPutPicBmp</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pitu_LCDPutBmp
</UL>

<P><STRONG><a name="[21a]"></a>Pitu_DisplayPoint</STRONG> (Thumb, 98 bytes, Stack size 20 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pitu_LCDPutData
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pitu_LCDPutCmd
</UL>

<P><STRONG><a name="[21d]"></a>JudgeKey</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, keypad.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyValue
</UL>

<P><STRONG><a name="[21b]"></a>GetKeyValue</STRONG> (Thumb, 322 bytes, Stack size 32 bytes, keypad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GetKeyValue &rArr; GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadValue
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeKey
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadKey
</UL>

<P><STRONG><a name="[21e]"></a>ReadKey</STRONG> (Thumb, 320 bytes, Stack size 16 bytes, keypad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ReadKey &rArr; GetKeyValue &rArr; GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyValue
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_IRQHandler
</UL>

<P><STRONG><a name="[12e]"></a>EINT2_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, keypad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EINT2_IRQHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
</UL>
<BR>[Address Reference Count : 2]<UL><LI> keypad.o(.text)
<LI> vector_table.o(.constdata)
</UL>
<P><STRONG><a name="[221]"></a>EINT2_Init</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, keypad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = EINT2_Init &rArr; zyIsrSet
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyIsrSet
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyIrqEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitKey
</UL>

<P><STRONG><a name="[1c5]"></a>InitKey</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, keypad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = InitKey &rArr; EINT2_Init &rArr; zyIsrSet
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EINT2_Init
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKB
</UL>

<P><STRONG><a name="[17d]"></a>XChannels</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = XChannels &rArr; AT45DB_WritePage &rArr; AT45DB_WriteByte &rArr; AT45DB_WriteBuffer &rArr; AT45DB_WaitOK &rArr; AT45DB_ReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT45DB_WritePage
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT45DB_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKB
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systeminit
</UL>

<P><STRONG><a name="[17a]"></a>XSystemPara</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = XSystemPara &rArr; AT45DB_WritePage &rArr; AT45DB_WriteByte &rArr; AT45DB_WriteBuffer &rArr; AT45DB_WaitOK &rArr; AT45DB_ReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT45DB_WritePage
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT45DB_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systeminit
</UL>

<P><STRONG><a name="[180]"></a>XSystemPara2</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = XSystemPara2 &rArr; AT45DB_WritePage &rArr; AT45DB_WriteByte &rArr; AT45DB_WriteBuffer &rArr; AT45DB_WaitOK &rArr; AT45DB_ReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT45DB_WritePage
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT45DB_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systeminit
</UL>

<P><STRONG><a name="[181]"></a>XColSystemPara</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = XColSystemPara &rArr; AT45DB_WritePage &rArr; AT45DB_WriteByte &rArr; AT45DB_WriteBuffer &rArr; AT45DB_WaitOK &rArr; AT45DB_ReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT45DB_WritePage
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT45DB_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systeminit
</UL>

<P><STRONG><a name="[17b]"></a>XSystemPara1</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = XSystemPara1 &rArr; AT45DB_WritePage &rArr; AT45DB_WriteByte &rArr; AT45DB_WriteBuffer &rArr; AT45DB_WaitOK &rArr; AT45DB_ReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT45DB_WritePage
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT45DB_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systeminit
</UL>

<P><STRONG><a name="[182]"></a>XKeySystemVisible</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = XKeySystemVisible &rArr; AT45DB_WritePage &rArr; AT45DB_WriteByte &rArr; AT45DB_WriteBuffer &rArr; AT45DB_WaitOK &rArr; AT45DB_ReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT45DB_WritePage
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT45DB_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systeminit
</UL>

<P><STRONG><a name="[17e]"></a>XTransaction</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = XTransaction &rArr; AT45DB_WritePage &rArr; AT45DB_WriteByte &rArr; AT45DB_WriteBuffer &rArr; AT45DB_WaitOK &rArr; AT45DB_ReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT45DB_WritePage
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT45DB_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKB
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systeminit
</UL>

<P><STRONG><a name="[17c]"></a>RstSystemPara</STRONG> (Thumb, 572 bytes, Stack size 192 bytes, function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = RstSystemPara &rArr; ClearScreen &rArr; Pitu_LCDClrScreen &rArr; Pitu_LCDSetCursor &rArr; Pitu_LCDPutCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isRecordPassword
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isDontReduceNum
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systeminit
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionCONFSET
</UL>

<P><STRONG><a name="[25d]"></a>RstVisiblePara</STRONG> (Thumb, 280 bytes, Stack size 0 bytes, function.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionCONFSET
</UL>

<P><STRONG><a name="[229]"></a>ColumnFunction</STRONG> (Thumb, 270 bytes, Stack size 20 bytes, function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ColumnFunction
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RstTurkeySystemPara
</UL>

<P><STRONG><a name="[22a]"></a>LayerFunction</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LayerFunction
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RstTurkeySystemPara
</UL>

<P><STRONG><a name="[228]"></a>RstTurkeySystemPara</STRONG> (Thumb, 232 bytes, Stack size 8 bytes, function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RstTurkeySystemPara &rArr; ClearScreen &rArr; Pitu_LCDClrScreen &rArr; Pitu_LCDSetCursor &rArr; Pitu_LCDPutCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LayerFunction
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnFunction
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isAdminSet
</UL>

<P><STRONG><a name="[23f]"></a>RstTurkeyVisiblePara</STRONG> (Thumb, 426 bytes, Stack size 0 bytes, function.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isAdminSet
</UL>

<P><STRONG><a name="[242]"></a>RstTurkeyVisibleParaInit</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, function.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu
</UL>

<P><STRONG><a name="[1cc]"></a>SetTouBiStat</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192 + Unknown Stack Size
<LI>Call Chain = SetTouBiStat &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trace
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPend
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxAccept
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionDemo8
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionDemo7
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vmc_HandleReaderMsg
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VP_CMD_Opt
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKB
</UL>

<P><STRONG><a name="[127]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 692 bytes, Stack size 8 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TIMER0_IRQHandler &rArr; ReadKey &rArr; GetKeyValue &rArr; GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coin_Accept
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadKey
</UL>
<BR>[Address Reference Count : 2]<UL><LI> timer.o(.text)
<LI> vector_table.o(.constdata)
</UL>
<P><STRONG><a name="[128]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIMER1_IRQHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
</UL>
<BR>[Address Reference Count : 2]<UL><LI> timer.o(.text)
<LI> vector_table.o(.constdata)
</UL>
<P><STRONG><a name="[1c4]"></a>enable_timer</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKB
</UL>

<P><STRONG><a name="[4b2]"></a>disable_timer</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, timer.o(.text), UNUSED)

<P><STRONG><a name="[4b3]"></a>reset_timer</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, timer.o(.text), UNUSED)

<P><STRONG><a name="[1c3]"></a>init_timer</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = init_timer &rArr; zyIsrSet
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyIsrSet
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyIrqEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKB
</UL>

<P><STRONG><a name="[22c]"></a>Mdb_TransmitByte</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, mdb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Mdb_TransmitByte
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_TransmitWait
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_SetParity
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_SendByte
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trace_R
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mdb_Session
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_IRQHandler
</UL>

<P><STRONG><a name="[231]"></a>Mdb_Session</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, mdb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Mdb_Session &rArr; Uart2_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_SetMdbMode
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_ReadMdbStat
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_Read
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_ClrBuf
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trace_R
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mdb_TransmitByte
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoin_Poll
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoin_Expansion
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoin_Dispense
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoin_Disable
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoin_Enable
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoin_GetTubeStatus
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoin_Setup
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoin_Reset
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbNote_Expansion
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbNote_Poll
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbNote_GetStackerStat
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbNote_Return
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbNote_Stack
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbNote_Enable
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbNote_Setup
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbNote_Reset
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_ReaderCancel
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_ReaderEnable
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_ReaderDisable
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_SessionComplete
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_VendFailure
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_VendSuccess
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_VendCancel
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_VendRequest
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_Poll
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_SetupMaxMinPrice
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_SetupConfigData
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_Reset
</UL>

<P><STRONG><a name="[2a1]"></a>Mdb_ReadBuf</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, mdb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_Diagnostic
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_ReadBuf
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_ReadBuf
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoin_PayoutProc
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoin_Payout2
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoin_Payout3
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoin_InitProc
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoin_CheckTubeStat
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbNote_UpDateStackerStat
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbNote_InitProc
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_Proc
</UL>

<P><STRONG><a name="[29d]"></a>Mdb_ErrJudge</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mdb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_ErrJudge
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoin_PayoutProc
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoin_Payout2
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoin_Payout3
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoin_InitProc
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoin_CheckTubeStat
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoin_RstProc
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbNote_UpDateStackerStat
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbNote_InitProc
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbNote_RstProc
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_ErrJudge
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_Proc
</UL>

<P><STRONG><a name="[236]"></a>keydisplay</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464 + Unknown Stack Size
<LI>Call Chain = keydisplay &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_LCD
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu
</UL>

<P><STRONG><a name="[238]"></a>keyget</STRONG> (Thumb, 652 bytes, Stack size 16 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464 + Unknown Stack Size
<LI>Call Chain = keyget &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCursorPost
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_LCD
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu
</UL>

<P><STRONG><a name="[239]"></a>AllChannelStat</STRONG> (Thumb, 1554 bytes, Stack size 136 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1584 + Unknown Stack Size
<LI>Call Chain = AllChannelStat &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_LCD
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_SubCHStat
</UL>

<P><STRONG><a name="[23b]"></a>AllChannelResult</STRONG> (Thumb, 690 bytes, Stack size 136 bytes, menu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_LCD
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionCHTestResult
</UL>

<P><STRONG><a name="[23d]"></a>cleardisplay</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, menu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputDisplay
</UL>

<P><STRONG><a name="[23c]"></a>InputDisplay</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1456<LI>Call Chain = InputDisplay &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cleardisplay
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_On
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCursorPost
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line_Reverse
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_LCD
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionONREADERCOST
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionOCOIN
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionRCOIN
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionNBUY
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionHOLDNOTE10
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionHOLDNOTE5
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionHOLDNOTE
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionTenColumn
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionAutoColumn
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionLogoSel
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionKeySel
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionLCDSEL
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionPCEN
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionPOSEN
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionSACON
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionPONO
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionCGSV
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunctionNOCH
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunctionCOCH
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunctionCGVA
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionCHGOODS
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionCHLF
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionCHST
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionCHPR
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionCHNum
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionCH
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionMAXGOODS
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionLAYENABLE
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionNEWPW2
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionNEWPW
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionLEDMinuteOff
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionLEDHourOff
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionLEDMinuteOn
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionLEDHourOn
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionLEDOn
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionCompressMinuteOff
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionCompressHourOff
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionCompressMinuteOn
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionCompressHourOn
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionCompressOn
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionMinute
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionHour
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionDate
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionMonth
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionYear
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionTemprature
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionMMAX
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionBMIN
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionOCHANGE
</UL>

<P><STRONG><a name="[23e]"></a>isAdminSet</STRONG> (Thumb, 444 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1608 + Unknown Stack Size
<LI>Call Chain = isAdminSet &rArr; JudgeHLight &rArr; DispMenu_SubReader &rArr; DispTextLine &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RstTurkeyVisiblePara
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RstTurkeySystemPara
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeHLight
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu
</UL>

<P><STRONG><a name="[1ce]"></a>menu</STRONG> (Thumb, 2174 bytes, Stack size 24 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1632 + Unknown Stack Size
<LI>Call Chain = menu &rArr; isAdminSet &rArr; JudgeHLight &rArr; DispMenu_SubReader &rArr; DispTextLine &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isAdminSet
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllChannelStat
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyget
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keydisplay
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RstTurkeyVisibleParaInit
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_LCD
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pitu_LCDClearLine
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XTransaction
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSystemPara2
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSystemPara
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XKeySystemVisible
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XColSystemPara
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XChannels
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_Off
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeySystemInit
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeHLight
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HoldNoteInit
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKB
</UL>

<P><STRONG><a name="[244]"></a>DecimalPoint</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = DecimalPoint &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionDemo8
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionDemo7
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitTOTRJIDU
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitTOTR
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitTOCHJIDU
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitTOCH
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitNOINJIDU
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitNOIN
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitNOCH8
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitNOCH7
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitNOCH6
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitNOCH5
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitNOCH4
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitNOCH3
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitNOCH2
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitNOCH1
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitMMAX
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitIOU
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitINCOMEJIDU
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitINCOME
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitDBMN
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitCOINJIDU
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitCOIN
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitCOCH8
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitCOCH7
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitCOCH6
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitCOCH5
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitCOCH4
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitCOCH3
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitCOCH2
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitCOCH1
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitCHPR
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitCHMONEYJIDU
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitCHMONEY
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitCGVA3
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitCGVA2
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitCGVA1
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitBMIN
</UL>

<P><STRONG><a name="[11a]"></a>MenuFunctionPW2</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1608 + Unknown Stack Size
<LI>Call Chain = MenuFunctionPW2 &rArr; JudgeHLight &rArr; DispMenu_SubReader &rArr; DispTextLine &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_LCD
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_Off
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeHLight
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[11b]"></a>MenuFunctionPW3</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1608 + Unknown Stack Size
<LI>Call Chain = MenuFunctionPW3 &rArr; JudgeHLight &rArr; DispMenu_SubReader &rArr; DispTextLine &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_LCD
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_Off
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeHLight
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[11c]"></a>MenuFunctionPWAdmin</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1608 + Unknown Stack Size
<LI>Call Chain = MenuFunctionPWAdmin &rArr; JudgeHLight &rArr; DispMenu_SubReader &rArr; DispTextLine &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_LCD
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_Off
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeHLight
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>MenuFunctionPW</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1608 + Unknown Stack Size
<LI>Call Chain = MenuFunctionPW &rArr; JudgeHLight &rArr; DispMenu_SubReader &rArr; DispTextLine &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_LCD
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_Off
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeHLight
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[93]"></a>MenuFunctionENG</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, menu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[94]"></a>MenuFunctionCHN</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, menu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[95]"></a>MenuFunctionRussian</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MenuFunctionRussian &rArr; ClearScreen &rArr; Pitu_LCDClrScreen &rArr; Pitu_LCDSetCursor &rArr; Pitu_LCDPutCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[aa]"></a>MenuFunctionTurkey</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MenuFunctionTurkey &rArr; ClearScreen &rArr; Pitu_LCDClrScreen &rArr; Pitu_LCDSetCursor &rArr; Pitu_LCDPutCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>MenuFunctionDemo1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, menu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>MenuFunctionCHIN</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MenuFunctionCHIN &rArr; Cursor_Off &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_ChnChk
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_Off
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[245]"></a>ChannelTest</STRONG> (Thumb, 474 bytes, Stack size 32 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1480 + Unknown Stack Size
<LI>Call Chain = ChannelTest &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_LCD
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPend
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxAccept
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_ChnChk
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_Off
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionTESTCHIN
</UL>

<P><STRONG><a name="[2a]"></a>MenuFunctionTESTCHIN</STRONG> (Thumb, 334 bytes, Stack size 32 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1512 + Unknown Stack Size
<LI>Call Chain = MenuFunctionTESTCHIN &rArr; ChannelTest &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChannelTest
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQAccept
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_ChnChk
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_Off
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMission_ColumnSta_RPT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[247]"></a>MenuFunctionCHTestResult</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, menu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllChannelResult
</UL>

<P><STRONG><a name="[4b4]"></a>DecimalPointInput</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, menu.o(.text), UNUSED)

<P><STRONG><a name="[248]"></a>UpdateChannelPrice</STRONG> (Thumb, 508 bytes, Stack size 32 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208 + Unknown Stack Size
<LI>Call Chain = UpdateChannelPrice &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trace
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_ChnChk
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionCHGOODS
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionCHPR
</UL>

<P><STRONG><a name="[e]"></a>MenuFunctionCHPR</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1544 + Unknown Stack Size
<LI>Call Chain = MenuFunctionCHPR &rArr; VPChangeColPrice &rArr; VPMission_Admin_RPT &rArr; VPBusFrameUnPack &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateChannelPrice
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputDisplay
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_Off
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPChangeColPrice
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>MenuFunctionCHST</STRONG> (Thumb, 732 bytes, Stack size 16 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1552 + Unknown Stack Size
<LI>Call Chain = MenuFunctionCHST &rArr; VPAddSingleColGoods &rArr; VPMission_Admin_RPT &rArr; VPBusFrameUnPack &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputDisplay
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isDontReduceNum
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_Off
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMission_ColumnSta_RPT
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPAddSingleColGoods
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>MenuFunctionCHLF</STRONG> (Thumb, 1440 bytes, Stack size 16 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1552 + Unknown Stack Size
<LI>Call Chain = MenuFunctionCHLF &rArr; VPAddSingleColGoods &rArr; VPMission_Admin_RPT &rArr; VPBusFrameUnPack &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputDisplay
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFull_LCD
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_Off
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMission_ColumnSta_RPT
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPAddSingleColGoods
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>MenuFunctionCHGOODS</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464 + Unknown Stack Size
<LI>Call Chain = MenuFunctionCHGOODS &rArr; InputDisplay &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateChannelPrice
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputDisplay
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_Off
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>MenuFunctionADDLAYIN</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MenuFunctionADDLAYIN &rArr; Cursor_Off &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_Off
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>MenuFunctionAddGoods</STRONG> (Thumb, 882 bytes, Stack size 16 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1536 + Unknown Stack Size
<LI>Call Chain = MenuFunctionAddGoods &rArr; VPAddAllColGoods &rArr; VPMission_Admin_RPT &rArr; VPBusFrameUnPack &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isDontReduceNum
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMission_ColumnSta_RPT
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPAddLayerColGoods
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPAddAllColGoods
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispTextLine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[24e]"></a>MenuFunctionSynGoodsCol</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, menu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPSynGoodsCol
</UL>

<P><STRONG><a name="[250]"></a>MenuFunctionAddCoinChanges</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, menu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPAddChanges
</UL>

<P><STRONG><a name="[252]"></a>MenuFunctionAddBillChanges</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, menu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPAddChanges
</UL>

<P><STRONG><a name="[1a]"></a>MenuFunctionDemo6</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, menu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>MenuFunctionDemo7</STRONG> (Thumb, 320 bytes, Stack size 48 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1496 + Unknown Stack Size
<LI>Call Chain = MenuFunctionDemo7 &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecimalPoint
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_On
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_LCD
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTouBiStat
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPend
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxAccept
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_Off
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>MenuFunctionDemo8</STRONG> (Thumb, 484 bytes, Stack size 48 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1496 + Unknown Stack Size
<LI>Call Chain = MenuFunctionDemo8 &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecimalPoint
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_On
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_LCD
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTouBiStat
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPend
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxAccept
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_Off
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[114]"></a>MenuFunctionNOTETEST</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, menu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[115]"></a>MenuFunctionCOINSTEST</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, menu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[253]"></a>HopperTest_Old</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, menu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPend
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxAccept
</UL>

<P><STRONG><a name="[254]"></a>HopperTest</STRONG> (Thumb, 448 bytes, Stack size 24 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1472<LI>Call Chain = HopperTest &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_LCD
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPend
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxAccept
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hopper3Test
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hopper2Test
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hopper1Test
</UL>

<P><STRONG><a name="[1f]"></a>Hopper1Test</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1480<LI>Call Chain = Hopper1Test &rArr; HopperTest &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HopperTest
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[21]"></a>Hopper2Test</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1480<LI>Call Chain = Hopper2Test &rArr; HopperTest &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HopperTest
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[23]"></a>Hopper3Test</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1480<LI>Call Chain = Hopper3Test &rArr; HopperTest &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HopperTest
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[4b5]"></a>Hopper2Test_ReaderCost</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, menu.o(.text), UNUSED)

<P><STRONG><a name="[4b6]"></a>Hopper3Test_ReaderEnable</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, menu.o(.text), UNUSED)

<P><STRONG><a name="[4b7]"></a>MenuFunctionDemo9</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, menu.o(.text), UNUSED)

<P><STRONG><a name="[27]"></a>MenuFunctionKeyTest</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, menu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[28]"></a>MenuFunctionAllChannelStat</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, menu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[2b]"></a>MenuFunctionAllCHResult</STRONG> (Thumb, 104 bytes, Stack size 56 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1504 + Unknown Stack Size
<LI>Call Chain = MenuFunctionAllCHResult &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_LCD
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[29]"></a>MenuFunctionChannelTest</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, menu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[2c]"></a>MenuFunctionIRTest</STRONG> (Thumb, 322 bytes, Stack size 16 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = MenuFunctionIRTest &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_LCD
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPend
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[2d]"></a>MenuFunctionLCDTest</STRONG> (Thumb, 144 bytes, Stack size 56 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1504 + Unknown Stack Size
<LI>Call Chain = MenuFunctionLCDTest &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_LCD
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[2e]"></a>MenuFunctionDOLCDTest</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MenuFunctionDOLCDTest &rArr; LCD_WhiteBlock &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WhiteBlock
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[2f]"></a>MenuFunctionTemperatureTest</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1456<LI>Call Chain = MenuFunctionTemperatureTest &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_LCD
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[30]"></a>MenuFunctionDoTempeTest</STRONG> (Thumb, 320 bytes, Stack size 40 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1488 + Unknown Stack Size
<LI>Call Chain = MenuFunctionDoTempeTest &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_LCD
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[31]"></a>MenuFunctionXuanhuoTest</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1456<LI>Call Chain = MenuFunctionXuanhuoTest &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_LCD
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[32]"></a>MenuFunctionDoXuanhuoTest</STRONG> (Thumb, 222 bytes, Stack size 40 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1488 + Unknown Stack Size
<LI>Call Chain = MenuFunctionDoXuanhuoTest &rArr; WriteFull_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFull_LCD
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_LCD
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateSelectionLedTest
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[33]"></a>MenuFunctionTempTest</STRONG> (Thumb, 542 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1456<LI>Call Chain = MenuFunctionTempTest &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_LCD
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[34]"></a>MenuFunctionDoTempsTest</STRONG> (Thumb, 280 bytes, Stack size 24 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1472<LI>Call Chain = MenuFunctionDoTempsTest &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_LCD
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxAccept
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[35]"></a>MenuFunctionLEDTest</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1456<LI>Call Chain = MenuFunctionLEDTest &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_LCD
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[36]"></a>MenuFunctionDoLEDTest</STRONG> (Thumb, 270 bytes, Stack size 24 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1472<LI>Call Chain = MenuFunctionDoLEDTest &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_LCD
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxAccept
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[25]"></a>MenuFunctionDemo12</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, menu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[26]"></a>MenuFunctionDemo13</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, menu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[39]"></a>MenuFunctionDemo14</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, menu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[50]"></a>MenuFunctionDemo15</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, menu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[256]"></a>FunctionCGVA</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = FunctionCGVA &rArr; InputDisplay &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputDisplay
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_Off
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionCGVA3
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionCGVA2
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionCGVA1
</UL>

<P><STRONG><a name="[10d]"></a>MenuFunctionCGVA1</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1472<LI>Call Chain = MenuFunctionCGVA1 &rArr; FunctionCGVA &rArr; InputDisplay &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunctionCGVA
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[10f]"></a>MenuFunctionCGVA2</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1472<LI>Call Chain = MenuFunctionCGVA2 &rArr; FunctionCGVA &rArr; InputDisplay &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunctionCGVA
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[111]"></a>MenuFunctionCGVA3</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1472<LI>Call Chain = MenuFunctionCGVA3 &rArr; FunctionCGVA &rArr; InputDisplay &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunctionCGVA
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[257]"></a>FunctionCOCH</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = FunctionCOCH &rArr; InputDisplay &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputDisplay
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_Off
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionCOCH8
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionCOCH7
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionCOCH6
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionCOCH5
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionCOCH4
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionCOCH3
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionCOCH2
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionCOCH1
</UL>

<P><STRONG><a name="[fd]"></a>MenuFunctionCOCH1</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1472<LI>Call Chain = MenuFunctionCOCH1 &rArr; FunctionCOCH &rArr; InputDisplay &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunctionCOCH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[ff]"></a>MenuFunctionCOCH2</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1472<LI>Call Chain = MenuFunctionCOCH2 &rArr; FunctionCOCH &rArr; InputDisplay &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunctionCOCH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[101]"></a>MenuFunctionCOCH3</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1472<LI>Call Chain = MenuFunctionCOCH3 &rArr; FunctionCOCH &rArr; InputDisplay &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunctionCOCH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[103]"></a>MenuFunctionCOCH4</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1472<LI>Call Chain = MenuFunctionCOCH4 &rArr; FunctionCOCH &rArr; InputDisplay &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunctionCOCH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[105]"></a>MenuFunctionCOCH5</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1472<LI>Call Chain = MenuFunctionCOCH5 &rArr; FunctionCOCH &rArr; InputDisplay &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunctionCOCH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[107]"></a>MenuFunctionCOCH6</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1472<LI>Call Chain = MenuFunctionCOCH6 &rArr; FunctionCOCH &rArr; InputDisplay &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunctionCOCH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[109]"></a>MenuFunctionCOCH7</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1472<LI>Call Chain = MenuFunctionCOCH7 &rArr; FunctionCOCH &rArr; InputDisplay &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunctionCOCH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[10b]"></a>MenuFunctionCOCH8</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1472<LI>Call Chain = MenuFunctionCOCH8 &rArr; FunctionCOCH &rArr; InputDisplay &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunctionCOCH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[258]"></a>FunctionNOCH</STRONG> (Thumb, 188 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = FunctionNOCH &rArr; InputDisplay &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputDisplay
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_Off
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionNOCH8
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionNOCH7
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionNOCH6
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionNOCH5
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionNOCH4
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionNOCH3
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionNOCH2
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionNOCH1
</UL>

<P><STRONG><a name="[ed]"></a>MenuFunctionNOCH1</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1472<LI>Call Chain = MenuFunctionNOCH1 &rArr; FunctionNOCH &rArr; InputDisplay &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunctionNOCH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[ef]"></a>MenuFunctionNOCH2</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1472<LI>Call Chain = MenuFunctionNOCH2 &rArr; FunctionNOCH &rArr; InputDisplay &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunctionNOCH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[f1]"></a>MenuFunctionNOCH3</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1472<LI>Call Chain = MenuFunctionNOCH3 &rArr; FunctionNOCH &rArr; InputDisplay &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunctionNOCH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[f3]"></a>MenuFunctionNOCH4</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1472<LI>Call Chain = MenuFunctionNOCH4 &rArr; FunctionNOCH &rArr; InputDisplay &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunctionNOCH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[f5]"></a>MenuFunctionNOCH5</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1472<LI>Call Chain = MenuFunctionNOCH5 &rArr; FunctionNOCH &rArr; InputDisplay &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunctionNOCH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[f7]"></a>MenuFunctionNOCH6</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1472<LI>Call Chain = MenuFunctionNOCH6 &rArr; FunctionNOCH &rArr; InputDisplay &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunctionNOCH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[f9]"></a>MenuFunctionNOCH7</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1472<LI>Call Chain = MenuFunctionNOCH7 &rArr; FunctionNOCH &rArr; InputDisplay &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunctionNOCH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[fb]"></a>MenuFunctionNOCH8</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1472<LI>Call Chain = MenuFunctionNOCH8 &rArr; FunctionNOCH &rArr; InputDisplay &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunctionNOCH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[46]"></a>MenuFunctionCGSV</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = MenuFunctionCGSV &rArr; InputDisplay &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputDisplay
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_Off
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[54]"></a>MenuFunctionPONO</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = MenuFunctionPONO &rArr; InputDisplay &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputDisplay
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_Off
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[56]"></a>MenuFunctionSACON</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = MenuFunctionSACON &rArr; InputDisplay &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputDisplay
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_Off
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isGOCErrorSevice
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[58]"></a>MenuFunctionPOSEN</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = MenuFunctionPOSEN &rArr; InputDisplay &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputDisplay
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_Off
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[5a]"></a>MenuFunctionPCEN</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = MenuFunctionPCEN &rArr; InputDisplay &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputDisplay
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_Off
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[5c]"></a>MenuFunctionLCDSEL</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = MenuFunctionLCDSEL &rArr; InputDisplay &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputDisplay
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_Off
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[5e]"></a>MenuFunctionKeySel</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = MenuFunctionKeySel &rArr; InputDisplay &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputDisplay
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_Off
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[60]"></a>MenuFunctionLogoSel</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = MenuFunctionLogoSel &rArr; InputDisplay &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputDisplay
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_Off
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[62]"></a>MenuFunctionAutoColumn</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = MenuFunctionAutoColumn &rArr; InputDisplay &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputDisplay
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_Off
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoAddColumn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[64]"></a>MenuFunctionTenColumn</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = MenuFunctionTenColumn &rArr; InputDisplay &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputDisplay
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_Off
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[66]"></a>MenuFunctionHOLDNOTE</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = MenuFunctionHOLDNOTE &rArr; InputDisplay &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputDisplay
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_Off
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[68]"></a>MenuFunctionHOLDNOTE5</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = MenuFunctionHOLDNOTE5 &rArr; InputDisplay &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputDisplay
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_Off
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[6a]"></a>MenuFunctionHOLDNOTE10</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = MenuFunctionHOLDNOTE10 &rArr; InputDisplay &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputDisplay
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_Off
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[48]"></a>MenuFunctionNBUY</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = MenuFunctionNBUY &rArr; InputDisplay &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputDisplay
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_Off
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[4a]"></a>MenuFunctionRCOIN</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = MenuFunctionRCOIN &rArr; InputDisplay &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputDisplay
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_Off
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[3a]"></a>MenuFunctionOCOIN</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = MenuFunctionOCOIN &rArr; InputDisplay &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputDisplay
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_Off
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[3c]"></a>MenuFunctionONOTE</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, menu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[40]"></a>MenuFunctionONREADER</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, menu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[42]"></a>MenuFunctionREADERSetOFF</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, menu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[43]"></a>MenuFunctionREADERSetMDB</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, menu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[44]"></a>MenuFunctionONREADERCOST</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = MenuFunctionONREADERCOST &rArr; InputDisplay &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputDisplay
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_Off
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[116]"></a>MenuFunctionSetMEI</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, menu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[117]"></a>MenuFunctionSetGBA</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, menu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[118]"></a>MenuFunctionSetITL</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, menu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[119]"></a>MenuFunctionSetClose</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, menu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[3e]"></a>MenuFunctionOCHANGE</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = MenuFunctionOCHANGE &rArr; InputDisplay &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputDisplay
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_Off
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[4c]"></a>MenuFunctionBMIN</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = MenuFunctionBMIN &rArr; InputDisplay &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputDisplay
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_Off
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[4e]"></a>MenuFunctionMMAX</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = MenuFunctionMMAX &rArr; InputDisplay &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputDisplay
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_Off
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[a2]"></a>MenuFunctionGPRS</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, menu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[a4]"></a>MenuFunctionSENO</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, menu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[a6]"></a>MenuFunctionGSMNO</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, menu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[a8]"></a>MenuFunctionTemprature</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = MenuFunctionTemprature &rArr; InputDisplay &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputDisplay
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_Off
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[52]"></a>MenuFunctionDBMN</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, menu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[6c]"></a>MenuFunctionDemo23</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, menu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[6d]"></a>MenuFunctionDemo24</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, menu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[6e]"></a>MenuFunctionDemo25</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, menu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[70]"></a>MenuFunctionDemo26</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, menu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[72]"></a>MenuFunctionDemo27</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, menu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[74]"></a>MenuFunctionDemo28</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, menu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[76]"></a>MenuFunctionDemo29</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, menu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[78]"></a>MenuFunctionDemo30</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, menu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[7c]"></a>MenuFunctionDemo31</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, menu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[7d]"></a>MenuFunctionDemo32</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, menu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[7f]"></a>MenuFunctionDemo33</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, menu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[81]"></a>MenuFunctionDemo34</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, menu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[4b8]"></a>MenuFunctionDemo35</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, menu.o(.text), UNUSED)

<P><STRONG><a name="[82]"></a>MenuFunctionDemo36</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, menu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[83]"></a>MenuFunctionDemo37</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, menu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[37]"></a>MenuFunctionDemo38</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, menu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[87]"></a>MenuFunctionCONF</STRONG> (Thumb, 212 bytes, Stack size 40 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MenuFunctionCONF
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[92]"></a>MenuFunctionCONFJIDU</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MenuFunctionCONFJIDU
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[96]"></a>MenuFunctionYear</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = MenuFunctionYear &rArr; InputDisplay &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputDisplay
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_Off
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCn_SetTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[98]"></a>MenuFunctionMonth</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = MenuFunctionMonth &rArr; InputDisplay &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputDisplay
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_Off
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCn_SetTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[9a]"></a>MenuFunctionDate</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = MenuFunctionDate &rArr; InputDisplay &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputDisplay
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_Off
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCn_SetTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[9c]"></a>MenuFunctionHour</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = MenuFunctionHour &rArr; InputDisplay &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputDisplay
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_Off
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCn_SetTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[9e]"></a>MenuFunctionMinute</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = MenuFunctionMinute &rArr; InputDisplay &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputDisplay
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_Off
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCn_SetTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[ab]"></a>MenuFunctionCompressOn</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = MenuFunctionCompressOn &rArr; InputDisplay &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputDisplay
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_Off
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[ad]"></a>MenuFunctionCompressHourOn</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = MenuFunctionCompressHourOn &rArr; InputDisplay &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputDisplay
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_Off
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[af]"></a>MenuFunctionCompressMinuteOn</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = MenuFunctionCompressMinuteOn &rArr; InputDisplay &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputDisplay
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_Off
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[b1]"></a>MenuFunctionCompressHourOff</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = MenuFunctionCompressHourOff &rArr; InputDisplay &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputDisplay
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_Off
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[b3]"></a>MenuFunctionCompressMinuteOff</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = MenuFunctionCompressMinuteOff &rArr; InputDisplay &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputDisplay
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_Off
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[b5]"></a>MenuFunctionLEDOn</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = MenuFunctionLEDOn &rArr; InputDisplay &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputDisplay
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_Off
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[b7]"></a>MenuFunctionLEDHourOn</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = MenuFunctionLEDHourOn &rArr; InputDisplay &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputDisplay
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_Off
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[b9]"></a>MenuFunctionLEDMinuteOn</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = MenuFunctionLEDMinuteOn &rArr; InputDisplay &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputDisplay
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_Off
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[bb]"></a>MenuFunctionLEDHourOff</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = MenuFunctionLEDHourOff &rArr; InputDisplay &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputDisplay
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_Off
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[bd]"></a>MenuFunctionLEDMinuteOff</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = MenuFunctionLEDMinuteOff &rArr; InputDisplay &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputDisplay
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_Off
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[a0]"></a>MenuFunctionNEWPW</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = MenuFunctionNEWPW &rArr; InputDisplay &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputDisplay
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_Off
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[a1]"></a>MenuFunctionNEWPW2</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = MenuFunctionNEWPW2 &rArr; InputDisplay &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputDisplay
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_Off
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[bf]"></a>MenuFunctionLAYIN</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MenuFunctionLAYIN &rArr; Cursor_Off &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_Off
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[c1]"></a>MenuFunctionLAYENABLE</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1472<LI>Call Chain = MenuFunctionLAYENABLE &rArr; InputDisplay &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputDisplay
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_Off
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[c3]"></a>MenuFunctionMAXGOODS</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = MenuFunctionMAXGOODS &rArr; InputDisplay &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputDisplay
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_Off
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[25b]"></a>MenuFunctionCH</STRONG> (Thumb, 408 bytes, Stack size 16 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1472<LI>Call Chain = MenuFunctionCH &rArr; InputDisplay &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputDisplay
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_Off
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionCH0
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionCH9
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionCH8
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionCH7
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionCH6
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionCH5
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionCH4
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionCH3
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionCH2
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionCH1
</UL>

<P><STRONG><a name="[c5]"></a>MenuFunctionCH1</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1480<LI>Call Chain = MenuFunctionCH1 &rArr; MenuFunctionCH &rArr; InputDisplay &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionCH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[c9]"></a>MenuFunctionCH2</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1480<LI>Call Chain = MenuFunctionCH2 &rArr; MenuFunctionCH &rArr; InputDisplay &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionCH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[cd]"></a>MenuFunctionCH3</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1480<LI>Call Chain = MenuFunctionCH3 &rArr; MenuFunctionCH &rArr; InputDisplay &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionCH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[d1]"></a>MenuFunctionCH4</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1480<LI>Call Chain = MenuFunctionCH4 &rArr; MenuFunctionCH &rArr; InputDisplay &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionCH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[d5]"></a>MenuFunctionCH5</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1480<LI>Call Chain = MenuFunctionCH5 &rArr; MenuFunctionCH &rArr; InputDisplay &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionCH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[d9]"></a>MenuFunctionCH6</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1480<LI>Call Chain = MenuFunctionCH6 &rArr; MenuFunctionCH &rArr; InputDisplay &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionCH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[dd]"></a>MenuFunctionCH7</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1480<LI>Call Chain = MenuFunctionCH7 &rArr; MenuFunctionCH &rArr; InputDisplay &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionCH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[e1]"></a>MenuFunctionCH8</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1480<LI>Call Chain = MenuFunctionCH8 &rArr; MenuFunctionCH &rArr; InputDisplay &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionCH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[e5]"></a>MenuFunctionCH9</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1480<LI>Call Chain = MenuFunctionCH9 &rArr; MenuFunctionCH &rArr; InputDisplay &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionCH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[e9]"></a>MenuFunctionCH0</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1480<LI>Call Chain = MenuFunctionCH0 &rArr; MenuFunctionCH &rArr; InputDisplay &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionCH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[25c]"></a>MenuFunctionCHNum</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1472<LI>Call Chain = MenuFunctionCHNum &rArr; InputDisplay &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputDisplay
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_Off
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionCH0Num
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionCH9Num
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionCH8Num
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionCH7Num
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionCH6Num
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionCH5Num
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionCH4Num
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionCH3Num
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionCH2Num
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionCH1Num
</UL>

<P><STRONG><a name="[c7]"></a>MenuFunctionCH1Num</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1480<LI>Call Chain = MenuFunctionCH1Num &rArr; MenuFunctionCHNum &rArr; InputDisplay &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionCHNum
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[cb]"></a>MenuFunctionCH2Num</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1480<LI>Call Chain = MenuFunctionCH2Num &rArr; MenuFunctionCHNum &rArr; InputDisplay &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionCHNum
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[cf]"></a>MenuFunctionCH3Num</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1480<LI>Call Chain = MenuFunctionCH3Num &rArr; MenuFunctionCHNum &rArr; InputDisplay &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionCHNum
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[d3]"></a>MenuFunctionCH4Num</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1480<LI>Call Chain = MenuFunctionCH4Num &rArr; MenuFunctionCHNum &rArr; InputDisplay &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionCHNum
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[d7]"></a>MenuFunctionCH5Num</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1480<LI>Call Chain = MenuFunctionCH5Num &rArr; MenuFunctionCHNum &rArr; InputDisplay &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionCHNum
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[db]"></a>MenuFunctionCH6Num</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1480<LI>Call Chain = MenuFunctionCH6Num &rArr; MenuFunctionCHNum &rArr; InputDisplay &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionCHNum
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[df]"></a>MenuFunctionCH7Num</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1480<LI>Call Chain = MenuFunctionCH7Num &rArr; MenuFunctionCHNum &rArr; InputDisplay &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionCHNum
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[e3]"></a>MenuFunctionCH8Num</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1480<LI>Call Chain = MenuFunctionCH8Num &rArr; MenuFunctionCHNum &rArr; InputDisplay &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionCHNum
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[e7]"></a>MenuFunctionCH9Num</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1480<LI>Call Chain = MenuFunctionCH9Num &rArr; MenuFunctionCHNum &rArr; InputDisplay &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionCHNum
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[eb]"></a>MenuFunctionCH0Num</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1480<LI>Call Chain = MenuFunctionCH0Num &rArr; MenuFunctionCHNum &rArr; InputDisplay &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionCHNum
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[113]"></a>MenuFunctionCONFSET</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = MenuFunctionCONFSET &rArr; RstSystemPara &rArr; ClearScreen &rArr; Pitu_LCDClrScreen &rArr; Pitu_LCDSetCursor &rArr; Pitu_LCDPutCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RstVisiblePara
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RstSystemPara
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[4b9]"></a>MenuFunctionADMINSET</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, menu.o(.text), UNUSED)

<P><STRONG><a name="[1d3]"></a>isBillSingleWork</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, devtaskfun.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnNoteDevCmd
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoDingshiMsg
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKB
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_EscrowProc
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_RstProc
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoin_InitProc
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMoneyDevStat
</UL>

<P><STRONG><a name="[259]"></a>isGOCErrorSevice</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, devtaskfun.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionSACON
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvCheckCommand
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckDriverStat
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitSACON
</UL>

<P><STRONG><a name="[227]"></a>isRecordPassword</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, devtaskfun.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RstSystemPara
</UL>

<P><STRONG><a name="[186]"></a>isDontReduceNum</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, devtaskfun.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionAddGoods
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionCHST
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RstSystemPara
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvOutCommand
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoAddColumn
</UL>

<P><STRONG><a name="[193]"></a>InitMoneyDevStat</STRONG> (Thumb, 178 bytes, Stack size 0 bytes, devtaskfun.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKC
</UL>

<P><STRONG><a name="[194]"></a>CheckPricePara</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, devtaskfun.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKC
</UL>

<P><STRONG><a name="[25f]"></a>CheckFlashStat</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, devtaskfun.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckVMCStat
</UL>

<P><STRONG><a name="[260]"></a>CheckRTCStat</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, devtaskfun.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckVMCStat
</UL>

<P><STRONG><a name="[25e]"></a>CheckMoneyDevStat</STRONG> (Thumb, 584 bytes, Stack size 4 bytes, devtaskfun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CheckMoneyDevStat
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isBillSingleWork
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckVMCStat
</UL>

<P><STRONG><a name="[19c]"></a>CheckVMCStat</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, devtaskfun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CheckVMCStat &rArr; CheckMoneyDevStat
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMoneyDevStat
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckRTCStat
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFlashStat
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKC
</UL>

<P><STRONG><a name="[198]"></a>GetEscrowMinCh</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, devtaskfun.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKC
</UL>

<P><STRONG><a name="[196]"></a>GetNoteEnBit</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, devtaskfun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184 + Unknown Stack Size
<LI>Call Chain = GetNoteEnBit &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trace
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKC
</UL>

<P><STRONG><a name="[197]"></a>GetCoinEnBit</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, devtaskfun.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKC
</UL>

<P><STRONG><a name="[199]"></a>CheckNotePara</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, devtaskfun.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKC
</UL>

<P><STRONG><a name="[19a]"></a>CheckCoinPara</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, devtaskfun.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKC
</UL>

<P><STRONG><a name="[19f]"></a>EnableMoneyType</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, devtaskfun.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKC
</UL>

<P><STRONG><a name="[1b6]"></a>DisCoinDevCmd</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, devtaskfun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216 + Unknown Stack Size
<LI>Call Chain = DisCoinDevCmd &rArr; CoinAcceptor_Enable &rArr; MdbCoin_Enable &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKC
</UL>

<P><STRONG><a name="[1b7]"></a>DisNoteDevCmd</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, devtaskfun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216 + Unknown Stack Size
<LI>Call Chain = DisNoteDevCmd &rArr; BillAcceptor_Enable &rArr; MdbNote_Enable &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKC
</UL>

<P><STRONG><a name="[1b8]"></a>EnCoinDevCmd</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, devtaskfun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216 + Unknown Stack Size
<LI>Call Chain = EnCoinDevCmd &rArr; CoinAcceptor_Enable &rArr; MdbCoin_Enable &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKC
</UL>

<P><STRONG><a name="[1b9]"></a>EnNoteDevCmd</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, devtaskfun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216 + Unknown Stack Size
<LI>Call Chain = EnNoteDevCmd &rArr; BillAcceptor_Enable &rArr; MdbNote_Enable &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isBillSingleWork
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_Available
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_ErrJudge
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKC
</UL>

<P><STRONG><a name="[1d7]"></a>KeyProcess</STRONG> (Thumb, 1322 bytes, Stack size 40 bytes, saletaskfun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216 + Unknown Stack Size
<LI>Call Chain = KeyProcess &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trace
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_GetFundsMultiplyUnit
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_ChnChk
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_Off
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKB
</UL>

<P><STRONG><a name="[1d1]"></a>SaleTimeoutProc</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, saletaskfun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SaleTimeoutProc &rArr; Cursor_Off &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_Off
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKB
</UL>

<P><STRONG><a name="[264]"></a>SprintDec</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, saletaskfun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = SprintDec &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispSaleText
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPayoutText
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispLessText
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispIOUText
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispChaxunText
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAddMoneyText
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_VP_CMD_Payout_IOUText
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_VP_CMD_PayoutText
</UL>

<P><STRONG><a name="[1d5]"></a>DispErrText</STRONG> (Thumb, 1098 bytes, Stack size 144 bytes, saletaskfun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1592 + Unknown Stack Size
<LI>Call Chain = DispErrText &rArr; WriteFull_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFull_LCD
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pitu_LCDPrintf
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pitu_LCDClearLine
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCn_GetFullTime
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKB
</UL>

<P><STRONG><a name="[1c7]"></a>DispInitText</STRONG> (Thumb, 216 bytes, Stack size 8 bytes, saletaskfun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1456<LI>Call Chain = DispInitText &rArr; WriteFull_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pitu_LCDPutLOGOBmp
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFull_LCD
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pitu_LCDClearLine
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VP_CMD_Opt
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKB
</UL>

<P><STRONG><a name="[1c6]"></a>DispVersionText</STRONG> (Thumb, 118 bytes, Stack size 72 bytes, saletaskfun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1520 + Unknown Stack Size
<LI>Call Chain = DispVersionText &rArr; WriteFull_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFull_LCD
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKB
</UL>

<P><STRONG><a name="[1cf]"></a>DispBeginText</STRONG> (Thumb, 1020 bytes, Stack size 96 bytes, saletaskfun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1544 + Unknown Stack Size
<LI>Call Chain = DispBeginText &rArr; WriteFull_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pitu_LCDPutLOGOBmp
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFull_LCD
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pitu_LCDPrintf
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCn_GetFullTime
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKB
</UL>

<P><STRONG><a name="[1d9]"></a>DispChaxunText</STRONG> (Thumb, 468 bytes, Stack size 152 bytes, saletaskfun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1600 + Unknown Stack Size
<LI>Call Chain = DispChaxunText &rArr; WriteFull_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFull_LCD
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pitu_LCDPrintf
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pitu_LCDClearLine
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SprintDec
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKB
</UL>

<P><STRONG><a name="[1db]"></a>DispChaoshiText</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, saletaskfun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1456<LI>Call Chain = DispChaoshiText &rArr; WriteFull_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFull_LCD
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKB
</UL>

<P><STRONG><a name="[1dc]"></a>DispInputText</STRONG> (Thumb, 766 bytes, Stack size 88 bytes, saletaskfun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1536 + Unknown Stack Size
<LI>Call Chain = DispInputText &rArr; WriteFull_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_On
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCursorPost
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFull_LCD
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pitu_LCDPrintf
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pitu_LCDClearLine
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_Off
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKB
</UL>

<P><STRONG><a name="[1dd]"></a>DispInputErrText</STRONG> (Thumb, 274 bytes, Stack size 16 bytes, saletaskfun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = DispInputErrText &rArr; WriteFull_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFull_LCD
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pitu_LCDPrintf
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pitu_LCDClearLine
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKB
</UL>

<P><STRONG><a name="[1de]"></a>DispSaleText</STRONG> (Thumb, 842 bytes, Stack size 72 bytes, saletaskfun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1520 + Unknown Stack Size
<LI>Call Chain = DispSaleText &rArr; WriteFull_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFull_LCD
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pitu_LCDPrintf
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pitu_LCDClearLine
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SprintDec
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKB
</UL>

<P><STRONG><a name="[1e0]"></a>DispOverText</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, saletaskfun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = DispOverText &rArr; WriteFull_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFull_LCD
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pitu_LCDPrintf
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKB
</UL>

<P><STRONG><a name="[1e3]"></a>DispWuhuoText</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, saletaskfun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1472<LI>Call Chain = DispWuhuoText &rArr; WriteFull_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFull_LCD
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pitu_LCDPrintf
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKB
</UL>

<P><STRONG><a name="[1e4]"></a>DispChuhuoText</STRONG> (Thumb, 230 bytes, Stack size 16 bytes, saletaskfun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = DispChuhuoText &rArr; WriteFull_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFull_LCD
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pitu_LCDPrintf
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VP_CMD_Opt
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKB
</UL>

<P><STRONG><a name="[1e6]"></a>DoChuhuoMsg</STRONG> (Thumb, 918 bytes, Stack size 48 bytes, saletaskfun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1496 + Unknown Stack Size
<LI>Call Chain = DoChuhuoMsg &rArr; WriteFull_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFull_LCD
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pitu_LCDPrintf
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vmc_PostToReader
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trace
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_GetFundsMultiplyUnit
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPend
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxAccept
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKB
</UL>

<P><STRONG><a name="[265]"></a>DispRetransText</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, saletaskfun.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFull_LCD
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[1e7]"></a>DispLessText</STRONG> (Thumb, 236 bytes, Stack size 72 bytes, saletaskfun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1520 + Unknown Stack Size
<LI>Call Chain = DispLessText &rArr; WriteFull_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFull_LCD
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pitu_LCDPrintf
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SprintDec
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKB
</UL>

<P><STRONG><a name="[1e8]"></a>DispAddMoneyText</STRONG> (Thumb, 158 bytes, Stack size 72 bytes, saletaskfun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1520 + Unknown Stack Size
<LI>Call Chain = DispAddMoneyText &rArr; WriteFull_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFull_LCD
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SprintDec
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKB
</UL>

<P><STRONG><a name="[1e9]"></a>DispPayoutText</STRONG> (Thumb, 436 bytes, Stack size 72 bytes, saletaskfun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1520 + Unknown Stack Size
<LI>Call Chain = DispPayoutText &rArr; WriteFull_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFull_LCD
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pitu_LCDPrintf
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pitu_LCDClearLine
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SprintDec
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKB
</UL>

<P><STRONG><a name="[266]"></a>DoCoinOutMsg</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, saletaskfun.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPend
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxAccept
</UL>

<P><STRONG><a name="[1e5]"></a>DoNoteStackMsg</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, saletaskfun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = DoNoteStackMsg &rArr; OSMboxPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPend
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxAccept
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VP_CMD_Opt
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKB
</UL>

<P><STRONG><a name="[1ea]"></a>DoNoteReturnMsg</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, saletaskfun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = DoNoteReturnMsg &rArr; OSMboxPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPend
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxAccept
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKB
</UL>

<P><STRONG><a name="[1eb]"></a>DoPayOutMsg</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, saletaskfun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = DoPayOutMsg &rArr; OSMboxPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPend
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxAccept
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VP_CMD_Opt
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKB
</UL>

<P><STRONG><a name="[267]"></a>DoHopperOutMsg</STRONG> (Thumb, 298 bytes, Stack size 40 bytes, saletaskfun.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPend
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxAccept
</UL>

<P><STRONG><a name="[1ec]"></a>DispIOUText</STRONG> (Thumb, 420 bytes, Stack size 72 bytes, saletaskfun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1520 + Unknown Stack Size
<LI>Call Chain = DispIOUText &rArr; WriteFull_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFull_LCD
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pitu_LCDPrintf
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SprintDec
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKB
</UL>

<P><STRONG><a name="[1ed]"></a>DispChangeText</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, saletaskfun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = DispChangeText &rArr; WriteFull_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFull_LCD
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pitu_LCDPrintf
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VP_CMD_Opt
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKB
</UL>

<P><STRONG><a name="[1ef]"></a>DispEndText</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, saletaskfun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = DispEndText &rArr; WriteFull_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pitu_LCDPutLOGOBmp
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFull_LCD
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pitu_LCDPrintf
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKB
</UL>

<P><STRONG><a name="[1d2]"></a>DoDingshiMsg</STRONG> (Thumb, 166 bytes, Stack size 8 bytes, saletaskfun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = DoDingshiMsg &rArr; OSMboxPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isBillSingleWork
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPend
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxAccept
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKB
</UL>

<P><STRONG><a name="[268]"></a>Disp_VP_CMD_PayoutText</STRONG> (Thumb, 96 bytes, Stack size 64 bytes, saletaskfun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1512 + Unknown Stack Size
<LI>Call Chain = Disp_VP_CMD_PayoutText &rArr; WriteFull_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFull_LCD
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SprintDec
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VP_CMD_Opt
</UL>

<P><STRONG><a name="[269]"></a>Do_VP_CMD_PayoutMsg</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, saletaskfun.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPend
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxAccept
</UL>

<P><STRONG><a name="[26a]"></a>Disp_VP_CMD_Payout_IOUText</STRONG> (Thumb, 178 bytes, Stack size 64 bytes, saletaskfun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1512 + Unknown Stack Size
<LI>Call Chain = Disp_VP_CMD_Payout_IOUText &rArr; WriteFull_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFull_LCD
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SprintDec
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VP_CMD_Opt
</UL>

<P><STRONG><a name="[26b]"></a>Do_VP_CMD_ChuhuoMsg</STRONG> (Thumb, 736 bytes, Stack size 40 bytes, saletaskfun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1488 + Unknown Stack Size
<LI>Call Chain = Do_VP_CMD_ChuhuoMsg &rArr; WriteFull_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFull_LCD
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pitu_LCDPrintf
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trace
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPend
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxAccept
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMsgPackSend
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VP_CMD_Opt
</UL>

<P><STRONG><a name="[1d4]"></a>VP_CMD_Opt</STRONG> (Thumb, 716 bytes, Stack size 24 bytes, saletaskfun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1536 + Unknown Stack Size
<LI>Call Chain = VP_CMD_Opt &rArr; Disp_VP_CMD_Payout_IOUText &rArr; WriteFull_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trace
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTouBiStat
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPend
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxAccept
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoPayOutMsg
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoNoteStackMsg
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispInitText
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispChuhuoText
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispChangeText
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_VP_CMD_ChuhuoMsg
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_VP_CMD_Payout_IOUText
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_VP_CMD_PayoutText
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKB
</UL>

<P><STRONG><a name="[12b]"></a>Uart2_IRQHandler</STRONG> (Thumb, 284 bytes, Stack size 24 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Uart2_IRQHandler &rArr; Mdb_TransmitByte
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mdb_TransmitByte
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
</UL>
<BR>[Address Reference Count : 2]<UL><LI> uart.o(.text)
<LI> vector_table.o(.constdata)
</UL>
<P><STRONG><a name="[18f]"></a>Uart2_Init</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Uart2_Init &rArr; zyIsrSet
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyIsrSet
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyIrqEnable
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_SetPCLKDiv
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_ConfigPPWR
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKC
</UL>

<P><STRONG><a name="[235]"></a>Uart2_ReadMdbStat</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mdb_Session
</UL>

<P><STRONG><a name="[233]"></a>Uart2_SetMdbMode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mdb_Session
</UL>

<P><STRONG><a name="[278]"></a>Uart2_SetEvbMode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITLBusTxMsg
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hopper_Command
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Command
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectKey_Command_1
</UL>

<P><STRONG><a name="[22e]"></a>Uart2_SetParity</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mdb_TransmitByte
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITLBusTxMsg
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hopper_Command
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Command
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectKey_Command_1
</UL>

<P><STRONG><a name="[230]"></a>Uart2_TransmitWait</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mdb_TransmitByte
</UL>

<P><STRONG><a name="[22f]"></a>Uart2_SendByte</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mdb_TransmitByte
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITLBusTxMsg
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_Write
</UL>

<P><STRONG><a name="[26f]"></a>Uart2_Write</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Uart2_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hopper_Command
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Command
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectKey_Command_1
</UL>

<P><STRONG><a name="[234]"></a>Uart2_Read</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Uart2_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mdb_Session
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITLBusUnpack
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hopper_Command
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Dispense
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Command
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectKey_Command_1
</UL>

<P><STRONG><a name="[232]"></a>Uart2_ClrBuf</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mdb_Session
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITLBusTxMsg
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hopper_Command
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Command
</UL>

<P><STRONG><a name="[270]"></a>Uart3_ClrBuf</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Uart3_ClrBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3_Init
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gbahr1_Command
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3_Read
</UL>

<P><STRONG><a name="[12c]"></a>Uart3_IRQHandler</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Uart3_IRQHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
</UL>
<BR>[Address Reference Count : 2]<UL><LI> uart.o(.text)
<LI> vector_table.o(.constdata)
</UL>
<P><STRONG><a name="[190]"></a>Uart3_Init</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Uart3_Init &rArr; zyIsrSet
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyIsrSet
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyIrqEnable
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_SetPCLKDiv
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_ConfigPPWR
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3_ClrBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKC
</UL>

<P><STRONG><a name="[274]"></a>Uart3GetCh</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3_Read
</UL>

<P><STRONG><a name="[272]"></a>Uart3IsRxBufNull</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Uart3IsRxBufNull &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3_Read
</UL>

<P><STRONG><a name="[273]"></a>Uart3_Read</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Uart3_Read &rArr; Uart3IsRxBufNull &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3IsRxBufNull
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3GetCh
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3_ClrBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gbahr1_Command
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPBusFrameUnPack
</UL>

<P><STRONG><a name="[276]"></a>Uart3_SendByte</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3_Write
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPBusTxMsg
</UL>

<P><STRONG><a name="[275]"></a>Uart3_Write</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Uart3_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gbahr1_Command
</UL>

<P><STRONG><a name="[27a]"></a>Drv_ErrJudge</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvOutCommand
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvCheckCommand
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckDriverStat
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Dispense
</UL>

<P><STRONG><a name="[279]"></a>DRV_Dispense</STRONG> (Thumb, 242 bytes, Stack size 64 bytes, drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1240 + Unknown Stack Size
<LI>Call Chain = DRV_Dispense &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_Read
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trace
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_ErrJudge
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvOutCommand
</UL>

<P><STRONG><a name="[27b]"></a>DRV_Inquire</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DRV_Inquire &rArr; DRV_Command &rArr; Uart2_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvCheckCommand
</UL>

<P><STRONG><a name="[27c]"></a>DRV_ClearSN</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DRV_ClearSN &rArr; DRV_Command &rArr; Uart2_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckDriverStat
</UL>

<P><STRONG><a name="[27d]"></a>DRV_Test</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Command
</UL>

<P><STRONG><a name="[280]"></a>GetDrvStatus</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, drv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvOutCommand
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvCheckCommand
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckDriverStat
</UL>

<P><STRONG><a name="[1d8]"></a>DRV_ChnChk</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DRV_ChnChk
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateChannelPrice
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionTESTCHIN
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChannelTest
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionCHIN
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateSelectionLed
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyProcess
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvOutCommand
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvCheckCommand
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKB
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VP_Update_ColumnGoodsPar
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VP_CMD_ColumnPar
</UL>

<P><STRONG><a name="[27f]"></a>ChannelCheck</STRONG> (Thumb, 204 bytes, Stack size 12 bytes, drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ChannelCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckChannelStat
</UL>

<P><STRONG><a name="[27e]"></a>CheckChannelStat</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CheckChannelStat &rArr; ChannelCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChannelCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvOutCommand
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckDriverStat
</UL>

<P><STRONG><a name="[195]"></a>CheckDriverStat</STRONG> (Thumb, 278 bytes, Stack size 8 bytes, drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CheckDriverStat &rArr; DRV_ClearSN &rArr; DRV_Command &rArr; Uart2_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckChannelStat
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDrvStatus
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_ClearSN
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_ErrJudge
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isGOCErrorSevice
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKC
</UL>

<P><STRONG><a name="[1af]"></a>DrvCheckCommand</STRONG> (Thumb, 260 bytes, Stack size 24 bytes, drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = DrvCheckCommand &rArr; DRV_Inquire &rArr; DRV_Command &rArr; Uart2_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_ChnChk
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDrvStatus
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Inquire
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_ErrJudge
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isGOCErrorSevice
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKC
</UL>

<P><STRONG><a name="[1b0]"></a>DrvOutCommand</STRONG> (Thumb, 3568 bytes, Stack size 56 bytes, drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1552 + Unknown Stack Size
<LI>Call Chain = DrvOutCommand &rArr; VPMission_Vendout_RPT &rArr; VPBusFrameUnPack &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isDontReduceNum
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trace
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_ChnChk
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMission_Vendout_RPT
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMission_Vendout_REQ
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckChannelStat
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDrvStatus
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Dispense
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_ErrJudge
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKC
</UL>

<P><STRONG><a name="[284]"></a>HopperPayout</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, hopper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1240 + Unknown Stack Size
<LI>Call Chain = HopperPayout &rArr; Hopper_Command &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hopper_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HopperPayoutCmd
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hoppern_Payout
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hopper_InitProc
</UL>

<P><STRONG><a name="[285]"></a>HopperInquire</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, hopper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1240 + Unknown Stack Size
<LI>Call Chain = HopperInquire &rArr; Hopper_Command &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hopper_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HopperPayoutCmd
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hoppern_Payout
</UL>

<P><STRONG><a name="[287]"></a>Hopper_ErrJudge</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hopper.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HopperPayoutCmd
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hoppern_Payout
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hopper_InitProc
</UL>

<P><STRONG><a name="[289]"></a>Hopper_GetStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hopper.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HopperPayoutCmd
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hoppern_Payout
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hopper_InitProc
</UL>

<P><STRONG><a name="[286]"></a>Hopper_InitProc</STRONG> (Thumb, 308 bytes, Stack size 32 bytes, hopper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272 + Unknown Stack Size
<LI>Call Chain = Hopper_InitProc &rArr; HopperPayout &rArr; Hopper_Command &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Changer_UpDateStat
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Changer_SetDisStat
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Changer_SetCommErr
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hopper_GetStatus
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hopper_ErrJudge
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HopperPayout
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Changer_Init
</UL>

<P><STRONG><a name="[1b1]"></a>HopperPayoutCmd</STRONG> (Thumb, 596 bytes, Stack size 32 bytes, hopper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272 + Unknown Stack Size
<LI>Call Chain = HopperPayoutCmd &rArr; HopperInquire &rArr; Hopper_Command &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trace
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hopper_GetStatus
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hopper_ErrJudge
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HopperInquire
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HopperPayout
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKC
</UL>

<P><STRONG><a name="[28c]"></a>Hoppern_Payout</STRONG> (Thumb, 284 bytes, Stack size 24 bytes, hopper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1264 + Unknown Stack Size
<LI>Call Chain = Hoppern_Payout &rArr; HopperInquire &rArr; Hopper_Command &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trace
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Changer_UpDatepBuf
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Changer_UpDateStat
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Changer_SetCommErr
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hopper_GetStatus
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hopper_ErrJudge
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HopperInquire
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HopperPayout
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hopper_PayoutProc
</UL>

<P><STRONG><a name="[28e]"></a>Hopper_PayoutProc</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, hopper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1304 + Unknown Stack Size
<LI>Call Chain = Hopper_PayoutProc &rArr; Hoppern_Payout &rArr; HopperInquire &rArr; Hopper_Command &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trace
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hoppern_Payout
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Changer_Payout
</UL>

<P><STRONG><a name="[28f]"></a>MdbNote_PackAnalysis</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, mdbnote.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MdbNote_PackAnalysis
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_UpdateAcpt
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_UpDateStat
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_SetRstStat
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_PackAnalysis
</UL>

<P><STRONG><a name="[293]"></a>MdbNote_Reset</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mdbnote.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MdbNote_Reset &rArr; Mdb_Session &rArr; Uart2_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mdb_Session
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbNote_RstProc
</UL>

<P><STRONG><a name="[294]"></a>MdbNote_Setup</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mdbnote.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MdbNote_Setup &rArr; Mdb_Session &rArr; Uart2_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mdb_Session
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbNote_InitProc
</UL>

<P><STRONG><a name="[295]"></a>MdbNote_Enable</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, mdbnote.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192 + Unknown Stack Size
<LI>Call Chain = MdbNote_Enable &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mdb_Session
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trace
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_Enable
</UL>

<P><STRONG><a name="[296]"></a>MdbNote_Stack</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, mdbnote.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MdbNote_Stack &rArr; Mdb_Session &rArr; Uart2_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mdb_Session
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_Stack
</UL>

<P><STRONG><a name="[297]"></a>MdbNote_Return</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, mdbnote.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MdbNote_Return &rArr; Mdb_Session &rArr; Uart2_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mdb_Session
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_Return
</UL>

<P><STRONG><a name="[298]"></a>MdbNote_GetStackerStat</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mdbnote.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MdbNote_GetStackerStat &rArr; Mdb_Session &rArr; Uart2_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mdb_Session
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbNote_UpDateStackerStat
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbNote_InitProc
</UL>

<P><STRONG><a name="[299]"></a>MdbNote_Poll</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mdbnote.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MdbNote_Poll &rArr; Mdb_Session &rArr; Uart2_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mdb_Session
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_Poll
</UL>

<P><STRONG><a name="[29a]"></a>MdbNote_Expansion</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, mdbnote.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mdb_Session
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbNote_IDRead
</UL>

<P><STRONG><a name="[29b]"></a>MdbNote_IDRead</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mdbnote.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbNote_Expansion
</UL>

<P><STRONG><a name="[29c]"></a>MdbNote_RstProc</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mdbnote.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MdbNote_RstProc &rArr; MdbNote_Reset &rArr; Mdb_Session &rArr; Uart2_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mdb_ErrJudge
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_SetCommErr
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbNote_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbNote_InitProc
</UL>

<P><STRONG><a name="[29f]"></a>MdbNote_InitProc</STRONG> (Thumb, 392 bytes, Stack size 88 bytes, mdbnote.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1264 + Unknown Stack Size
<LI>Call Chain = MdbNote_InitProc &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mdb_ErrJudge
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mdb_ReadBuf
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trace
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_SetStackerFull
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_SetBillPara
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_CommErr
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbNote_RstProc
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbNote_GetStackerStat
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbNote_Setup
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_Init
</UL>

<P><STRONG><a name="[2a4]"></a>MdbNote_UpDateStackerStat</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, mdbnote.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MdbNote_UpDateStackerStat &rArr; MdbNote_GetStackerStat &rArr; Mdb_Session &rArr; Uart2_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mdb_ErrJudge
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mdb_ReadBuf
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_SetStackerFull
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbNote_GetStackerStat
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_UpDateStackerStat
</UL>

<P><STRONG><a name="[2a5]"></a>Gbahr1_PackAnalysis</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, gbahr1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Gbahr1_PackAnalysis
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_SetInValid
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_ClrInValid
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_UpdateAcpt
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_UpDateStat
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_PackAnalysis
</UL>

<P><STRONG><a name="[2a9]"></a>Gbahr1_Enable</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, gbahr1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Gbahr1_Enable &rArr; Gbahr1_Command &rArr; Uart3_Read &rArr; Uart3IsRxBufNull &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gbahr1_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gbahr1_InitProc
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_Enable
</UL>

<P><STRONG><a name="[2aa]"></a>Gbahr1_Poll</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, gbahr1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Gbahr1_Poll &rArr; Gbahr1_Command &rArr; Uart3_Read &rArr; Uart3IsRxBufNull &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gbahr1_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_Poll
</UL>

<P><STRONG><a name="[2ab]"></a>Gbahr1_Stack</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, gbahr1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Gbahr1_Stack &rArr; Gbahr1_Command &rArr; Uart3_Read &rArr; Uart3IsRxBufNull &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gbahr1_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_Stack
</UL>

<P><STRONG><a name="[2ac]"></a>Gbahr1_Return</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, gbahr1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Gbahr1_Return &rArr; Gbahr1_Command &rArr; Uart3_Read &rArr; Uart3IsRxBufNull &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gbahr1_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_Return
</UL>

<P><STRONG><a name="[2e8]"></a>Gbahr1_ReadBuf</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gbahr1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_ReadBuf
</UL>

<P><STRONG><a name="[2ae]"></a>Gbahr1_ErrJudge</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gbahr1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gbahr1_InitProc
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_ErrJudge
</UL>

<P><STRONG><a name="[2ad]"></a>Gbahr1_InitProc</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gbahr1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Gbahr1_InitProc &rArr; Gbahr1_Enable &rArr; Gbahr1_Command &rArr; Uart3_Read &rArr; Uart3IsRxBufNull &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gbahr1_ErrJudge
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gbahr1_Enable
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_SetCommErr
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_Init
</UL>

<P><STRONG><a name="[2d2]"></a>Gbahr1_UpDateStackerStat</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gbahr1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_UpDateStackerStat
</UL>

<P><STRONG><a name="[2af]"></a>MdbCoin_PackAnalysis</STRONG> (Thumb, 284 bytes, Stack size 16 bytes, mdbcoin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MdbCoin_PackAnalysis
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_UpDateStat
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_UpDateDeposit
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_SetRstStat
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_GetCoinLevel
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_PackAnalysis
</UL>

<P><STRONG><a name="[2b4]"></a>MdbCoin_Reset</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mdbcoin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MdbCoin_Reset &rArr; Mdb_Session &rArr; Uart2_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mdb_Session
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoin_RstProc
</UL>

<P><STRONG><a name="[2b5]"></a>MdbCoin_Setup</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mdbcoin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MdbCoin_Setup &rArr; Mdb_Session &rArr; Uart2_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mdb_Session
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoin_InitProc
</UL>

<P><STRONG><a name="[2b6]"></a>MdbCoin_GetTubeStatus</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mdbcoin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MdbCoin_GetTubeStatus &rArr; Mdb_Session &rArr; Uart2_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mdb_Session
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoin_PayoutProc
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoin_CheckTubeStat
</UL>

<P><STRONG><a name="[2b7]"></a>MdbCoin_Enable</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, mdbcoin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192 + Unknown Stack Size
<LI>Call Chain = MdbCoin_Enable &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mdb_Session
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trace
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Changer_UpDateLeftAmount
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_ReturnProc
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_Enable
</UL>

<P><STRONG><a name="[2b8]"></a>MdbCoin_Disable</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, mdbcoin.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mdb_Session
</UL>

<P><STRONG><a name="[2b9]"></a>MdbCoin_Dispense</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, mdbcoin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MdbCoin_Dispense &rArr; Mdb_Session &rArr; Uart2_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mdb_Session
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoin_Payout2
</UL>

<P><STRONG><a name="[2ba]"></a>MdbCoin_Expansion</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, mdbcoin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MdbCoin_Expansion &rArr; Mdb_Session &rArr; Uart2_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mdb_Session
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoin_Diagnostic
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoin_PayoutPoll
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoin_GetPaySt
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoin_PayOut
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoin_FeatureEN
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoin_GetID
</UL>

<P><STRONG><a name="[2bb]"></a>MdbCoin_GetID</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mdbcoin.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoin_Expansion
</UL>

<P><STRONG><a name="[2bc]"></a>MdbCoin_FeatureEN</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, mdbcoin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MdbCoin_FeatureEN &rArr; MdbCoin_Expansion &rArr; Mdb_Session &rArr; Uart2_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoin_Expansion
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoin_InitProc
</UL>

<P><STRONG><a name="[2bd]"></a>MdbCoin_PayOut</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, mdbcoin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MdbCoin_PayOut &rArr; MdbCoin_Expansion &rArr; Mdb_Session &rArr; Uart2_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoin_Expansion
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoin_Payout3
</UL>

<P><STRONG><a name="[2be]"></a>MdbCoin_GetPaySt</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mdbcoin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MdbCoin_GetPaySt &rArr; MdbCoin_Expansion &rArr; Mdb_Session &rArr; Uart2_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoin_Expansion
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoin_Payout3
</UL>

<P><STRONG><a name="[2bf]"></a>MdbCoin_PayoutPoll</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mdbcoin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MdbCoin_PayoutPoll &rArr; MdbCoin_Expansion &rArr; Mdb_Session &rArr; Uart2_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoin_Expansion
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoin_Payout3
</UL>

<P><STRONG><a name="[2c0]"></a>MdbCoin_Diagnostic</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mdbcoin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MdbCoin_Diagnostic &rArr; MdbCoin_Expansion &rArr; Mdb_Session &rArr; Uart2_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoin_Expansion
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_Diagnostic
</UL>

<P><STRONG><a name="[2c1]"></a>MdbCoin_Poll</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mdbcoin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MdbCoin_Poll &rArr; Mdb_Session &rArr; Uart2_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mdb_Session
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_Poll
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoin_Payout2
</UL>

<P><STRONG><a name="[2c2]"></a>MdbCoin_RstProc</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mdbcoin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MdbCoin_RstProc &rArr; MdbCoin_Reset &rArr; Mdb_Session &rArr; Uart2_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mdb_ErrJudge
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_SetCommErr
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoin_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoin_InitProc
</UL>

<P><STRONG><a name="[2c4]"></a>MdbCoin_CheckTubeStat</STRONG> (Thumb, 130 bytes, Stack size 48 bytes, mdbcoin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MdbCoin_CheckTubeStat &rArr; MdbCoin_GetTubeStatus &rArr; Mdb_Session &rArr; Uart2_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mdb_ErrJudge
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mdb_ReadBuf
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoin_GetTubeStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Changer_UpDateLeftAmount
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_CheckTubeStat
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoin_InitProc
</UL>

<P><STRONG><a name="[2c5]"></a>MdbCoin_InitProc</STRONG> (Thumb, 520 bytes, Stack size 80 bytes, mdbcoin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1256 + Unknown Stack Size
<LI>Call Chain = MdbCoin_InitProc &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mdb_ErrJudge
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mdb_ReadBuf
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isBillSingleWork
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trace
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_SetCoinPara
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_GetCoinLevel
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_CommErr
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Changer_LowStat
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoin_CheckTubeStat
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoin_RstProc
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoin_FeatureEN
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoin_Setup
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_Init
</UL>

<P><STRONG><a name="[2c9]"></a>MdbCoin_Payout3</STRONG> (Thumb, 854 bytes, Stack size 80 bytes, mdbcoin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1256 + Unknown Stack Size
<LI>Call Chain = MdbCoin_Payout3 &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mdb_ErrJudge
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mdb_ReadBuf
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trace
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_SetCommErr
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_GetCoinScale
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoin_PayoutPoll
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoin_GetPaySt
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoin_PayOut
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Changer_UpDatepBuf
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Changer_SetCommErr
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoin_PayoutProc
</UL>

<P><STRONG><a name="[2cb]"></a>MdbCoin_Payout2</STRONG> (Thumb, 348 bytes, Stack size 72 bytes, mdbcoin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = MdbCoin_Payout2 &rArr; MdbCoin_Dispense &rArr; Mdb_Session &rArr; Uart2_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mdb_ErrJudge
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mdb_ReadBuf
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_SetCommErr
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Changer_CommErr
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoin_Poll
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoin_Dispense
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Changer_UpDatepBuf
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Changer_SetCommErr
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoin_PayoutProc
</UL>

<P><STRONG><a name="[2cd]"></a>MdbCoin_PayoutProc</STRONG> (Thumb, 536 bytes, Stack size 56 bytes, mdbcoin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1312 + Unknown Stack Size
<LI>Call Chain = MdbCoin_PayoutProc &rArr; MdbCoin_Payout3 &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mdb_ErrJudge
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mdb_ReadBuf
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trace
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_GetCoinLevel
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_CommErr
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoin_Payout2
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoin_Payout3
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoin_GetTubeStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Changer_Payout
</UL>

<P><STRONG><a name="[22b]"></a>Coin_Accept</STRONG> (Thumb, 338 bytes, Stack size 16 bytes, pulsecoin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Coin_Accept &rArr; OSQPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_IRQHandler
</UL>

<P><STRONG><a name="[301]"></a>Pulse_InitProc</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, pulsecoin.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_Init
</UL>

<P><STRONG><a name="[2e9]"></a>BillAcceptor_StatInit</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, billacceptor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_Init
</UL>

<P><STRONG><a name="[2ed]"></a>BillAcceptor_ClearStat</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, billacceptor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_PollProc
</UL>

<P><STRONG><a name="[2a0]"></a>BillAcceptor_CommErr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, billacceptor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_UpDateSysStat
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbNote_InitProc
</UL>

<P><STRONG><a name="[2e3]"></a>BillAcceptor_RstStat</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, billacceptor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_PackAnalysis
</UL>

<P><STRONG><a name="[2cf]"></a>BillAcceptor_ValueSetErr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, billacceptor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_UpDateSysStat
</UL>

<P><STRONG><a name="[2d0]"></a>BillAcceptor_StackerFull</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, billacceptor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_PackAnalysis
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_UpDateSysStat
</UL>

<P><STRONG><a name="[2df]"></a>IsBillInValid</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, billacceptor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_EscrowProc
</UL>

<P><STRONG><a name="[2d9]"></a>BillAcceptor_EscrowFun</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, billacceptor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_EscrowProc
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_ReturnProc
</UL>

<P><STRONG><a name="[29e]"></a>BillAcceptor_SetCommErr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, billacceptor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_PollProc
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_RstProc
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gbahr1_InitProc
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbNote_RstProc
</UL>

<P><STRONG><a name="[4ba]"></a>BillAcceptor_SetValueErr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, billacceptor.o(.text), UNUSED)

<P><STRONG><a name="[2a3]"></a>BillAcceptor_SetStackerFull</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, billacceptor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbNote_UpDateStackerStat
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbNote_InitProc
</UL>

<P><STRONG><a name="[2a2]"></a>BillAcceptor_SetBillPara</STRONG> (Thumb, 14 bytes, Stack size 24 bytes, billacceptor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BillAcceptor_SetBillPara
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbNote_InitProc
</UL>

<P><STRONG><a name="[292]"></a>BillAcceptor_SetRstStat</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, billacceptor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbNote_PackAnalysis
</UL>

<P><STRONG><a name="[2d7]"></a>BillAcceptor_ClrRstStat</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, billacceptor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_RstProc
</UL>

<P><STRONG><a name="[2a6]"></a>BillAcceptor_SetInValid</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, billacceptor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gbahr1_PackAnalysis
</UL>

<P><STRONG><a name="[2a7]"></a>BillAcceptor_ClrInValid</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, billacceptor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITLNote_PackAnalysis
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gbahr1_PackAnalysis
</UL>

<P><STRONG><a name="[1ac]"></a>BillAcceptor_Available</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, billacceptor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnNoteDevCmd
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKC
</UL>

<P><STRONG><a name="[2e4]"></a>IsBillEscrowed</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, billacceptor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_PackAnalysis
</UL>

<P><STRONG><a name="[2e5]"></a>IsBillStacked</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, billacceptor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_PackAnalysis
</UL>

<P><STRONG><a name="[2e6]"></a>IsBillReturned</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, billacceptor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_PackAnalysis
</UL>

<P><STRONG><a name="[291]"></a>BillAcceptor_UpDateStat</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, billacceptor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gbahr1_PackAnalysis
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbNote_PackAnalysis
</UL>

<P><STRONG><a name="[2ce]"></a>BillAcceptor_UpDateSysStat</STRONG> (Thumb, 206 bytes, Stack size 4 bytes, billacceptor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = BillAcceptor_UpDateSysStat
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_StackerFull
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_ValueSetErr
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_CommErr
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_PollProc
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_Init
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_PackAnalysis
</UL>

<P><STRONG><a name="[2e2]"></a>BillAcceptor_CheckStat</STRONG> (Thumb, 336 bytes, Stack size 0 bytes, billacceptor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_PollProc
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_Init
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_PackAnalysis
</UL>

<P><STRONG><a name="[290]"></a>BillAcceptor_UpdateAcpt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, billacceptor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITLNote_PackAnalysis
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gbahr1_PackAnalysis
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbNote_PackAnalysis
</UL>

<P><STRONG><a name="[2d1]"></a>BillAcceptor_UpDateStackerStat</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, billacceptor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = BillAcceptor_UpDateStackerStat &rArr; MdbNote_UpDateStackerStat &rArr; MdbNote_GetStackerStat &rArr; Mdb_Session &rArr; Uart2_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITL_UpDateStackerStat
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gbahr1_UpDateStackerStat
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbNote_UpDateStackerStat
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_PackAnalysis
</UL>

<P><STRONG><a name="[263]"></a>BillAcceptor_ErrJudge</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, billacceptor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BillAcceptor_ErrJudge
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mdb_ErrJudge
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITL_ErrJudge
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gbahr1_ErrJudge
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnNoteDevCmd
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_PollProc
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_RstProc
</UL>

<P><STRONG><a name="[262]"></a>BillAcceptor_Enable</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, billacceptor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208 + Unknown Stack Size
<LI>Call Chain = BillAcceptor_Enable &rArr; MdbNote_Enable &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITLMission_Enable
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gbahr1_Enable
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbNote_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnNoteDevCmd
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisNoteDevCmd
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_PackAnalysis
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_RstProc
</UL>

<P><STRONG><a name="[2d6]"></a>BillAcceptor_RstProc</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, billacceptor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216 + Unknown Stack Size
<LI>Call Chain = BillAcceptor_RstProc &rArr; BillAcceptor_Enable &rArr; MdbNote_Enable &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isBillSingleWork
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_ClrRstStat
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_SetCommErr
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_ErrJudge
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_PackAnalysis
</UL>

<P><STRONG><a name="[2d8]"></a>BillAcceptor_ReturnProc</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, billacceptor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = BillAcceptor_ReturnProc &rArr; OSMboxPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_EscrowFun
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_PackAnalysis
</UL>

<P><STRONG><a name="[2da]"></a>BillAcceptor_StackProc</STRONG> (Thumb, 280 bytes, Stack size 16 bytes, billacceptor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = BillAcceptor_StackProc &rArr; OSMboxPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_PackAnalysis
</UL>

<P><STRONG><a name="[1b4]"></a>BillAcceptor_Stack</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, billacceptor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1504 + Unknown Stack Size
<LI>Call Chain = BillAcceptor_Stack &rArr; VPMission_Payin_RPT &rArr; VPBusFrameUnPack &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMission_Payin_RPT
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITLMission_HB_Stack
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gbahr1_Stack
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbNote_Stack
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKC
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_EscrowProc
</UL>

<P><STRONG><a name="[1b5]"></a>BillAcceptor_Return</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, billacceptor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1504 + Unknown Stack Size
<LI>Call Chain = BillAcceptor_Return &rArr; VPMission_Payin_RPT &rArr; VPBusFrameUnPack &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMission_Payin_RPT
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITLMission_Reject
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gbahr1_Return
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbNote_Return
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKC
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_EscrowProc
</UL>

<P><STRONG><a name="[2de]"></a>BillAcceptor_EscrowProc</STRONG> (Thumb, 296 bytes, Stack size 16 bytes, billacceptor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1520 + Unknown Stack Size
<LI>Call Chain = BillAcceptor_EscrowProc &rArr; BillAcceptor_Stack &rArr; VPMission_Payin_RPT &rArr; VPBusFrameUnPack &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isBillSingleWork
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_Stack
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_Return
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMission_Payin_RPT
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_EscrowFun
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsBillInValid
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_PackAnalysis
</UL>

<P><STRONG><a name="[2e0]"></a>BillAcceptor_PackAnalysis</STRONG> (Thumb, 274 bytes, Stack size 16 bytes, billacceptor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1536 + Unknown Stack Size
<LI>Call Chain = BillAcceptor_PackAnalysis &rArr; BillAcceptor_EscrowProc &rArr; BillAcceptor_Stack &rArr; VPMission_Payin_RPT &rArr; VPBusFrameUnPack &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITLNote_PackAnalysis
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_EscrowProc
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_StackProc
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_ReturnProc
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_RstProc
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_UpDateStackerStat
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_CheckStat
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_UpDateSysStat
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsBillReturned
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsBillStacked
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsBillEscrowed
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_StackerFull
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_RstStat
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gbahr1_PackAnalysis
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbNote_PackAnalysis
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_PollProc
</UL>

<P><STRONG><a name="[2e7]"></a>BillAcceptor_ReadBuf</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, billacceptor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BillAcceptor_ReadBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mdb_ReadBuf
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gbahr1_ReadBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_PollProc
</UL>

<P><STRONG><a name="[1a0]"></a>BillAcceptor_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, billacceptor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272 + Unknown Stack Size
<LI>Call Chain = BillAcceptor_Init &rArr; MdbNote_InitProc &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITLMission_Init
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_CheckStat
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_UpDateSysStat
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_StatInit
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gbahr1_InitProc
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbNote_InitProc
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKC
</UL>

<P><STRONG><a name="[2eb]"></a>BillAcceptor_Poll</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, billacceptor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = BillAcceptor_Poll &rArr; ITLMission_Poll &rArr; ITLBusUnpack &rArr; Uart2_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITLMission_Poll
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gbahr1_Poll
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbNote_Poll
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_PollProc
</UL>

<P><STRONG><a name="[1ad]"></a>BillAcceptor_PollProc</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, billacceptor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1560 + Unknown Stack Size
<LI>Call Chain = BillAcceptor_PollProc &rArr; BillAcceptor_PackAnalysis &rArr; BillAcceptor_EscrowProc &rArr; BillAcceptor_Stack &rArr; VPMission_Payin_RPT &rArr; VPBusFrameUnPack &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_Poll
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_ReadBuf
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_PackAnalysis
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_CheckStat
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_UpDateSysStat
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_ClearStat
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_SetCommErr
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_ErrJudge
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKC
</UL>

<P><STRONG><a name="[300]"></a>CoinAcceptor_StatInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, coinacceptor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_Init
</UL>

<P><STRONG><a name="[2b0]"></a>CoinAcceptor_UpDateDeposit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, coinacceptor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoin_PackAnalysis
</UL>

<P><STRONG><a name="[303]"></a>CoinAcceptor_ClrDeposit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, coinacceptor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_PollProc
</UL>

<P><STRONG><a name="[2fe]"></a>IsCoinStacked</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, coinacceptor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_PackAnalysis
</UL>

<P><STRONG><a name="[2ff]"></a>IsCoinReturn</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, coinacceptor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_PackAnalysis
</UL>

<P><STRONG><a name="[2c6]"></a>CoinAcceptor_CommErr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, coinacceptor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_RstProc
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_UpDateSysStat
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoin_PayoutProc
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoin_InitProc
</UL>

<P><STRONG><a name="[2fd]"></a>CoinAcceptor_RstStat</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, coinacceptor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_PackAnalysis
</UL>

<P><STRONG><a name="[2f1]"></a>CoinAcceptor_ValueSetErr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, coinacceptor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_UpDateSysStat
</UL>

<P><STRONG><a name="[2f2]"></a>CoinAcceptor_TubeFull</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, coinacceptor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_UpDateSysStat
</UL>

<P><STRONG><a name="[1aa]"></a>CoinAcceptor_Available</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, coinacceptor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKC
</UL>

<P><STRONG><a name="[2f6]"></a>CoinAcceptor_SetTubeFull</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, coinacceptor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_UpDateTubeStat
</UL>

<P><STRONG><a name="[2c3]"></a>CoinAcceptor_SetCommErr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, coinacceptor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_PollProc
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoin_Payout2
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoin_Payout3
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoin_RstProc
</UL>

<P><STRONG><a name="[4bb]"></a>CoinAcceptor_SetValueErr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, coinacceptor.o(.text), UNUSED)

<P><STRONG><a name="[2c7]"></a>CoinAcceptor_SetCoinPara</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, coinacceptor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CoinAcceptor_SetCoinPara
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoin_InitProc
</UL>

<P><STRONG><a name="[2b1]"></a>CoinAcceptor_GetCoinLevel</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, coinacceptor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_Diagnostic
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_ReturnProc
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoin_PayoutProc
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoin_InitProc
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoin_PackAnalysis
</UL>

<P><STRONG><a name="[2ca]"></a>CoinAcceptor_GetCoinScale</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, coinacceptor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Changer_LowStat
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoin_Payout3
</UL>

<P><STRONG><a name="[4bc]"></a>CoinAcceptor_GetCoinDecimal</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, coinacceptor.o(.text), UNUSED)

<P><STRONG><a name="[2b3]"></a>CoinAcceptor_SetRstStat</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, coinacceptor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoin_PackAnalysis
</UL>

<P><STRONG><a name="[2fb]"></a>CoinAcceptor_ClrRstStat</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, coinacceptor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_RstProc
</UL>

<P><STRONG><a name="[2b2]"></a>CoinAcceptor_UpDateStat</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, coinacceptor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_Diagnostic
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_ReturnProc
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoin_PackAnalysis
</UL>

<P><STRONG><a name="[2ee]"></a>CoinAcceptor_ReadBuf</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, coinacceptor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CoinAcceptor_ReadBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mdb_ReadBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_PollProc
</UL>

<P><STRONG><a name="[2ef]"></a>CoinAcceptor_ErrJudge</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, coinacceptor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CoinAcceptor_ErrJudge
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mdb_ErrJudge
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_PollProc
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_RstProc
</UL>

<P><STRONG><a name="[2f0]"></a>CoinAcceptor_UpDateSysStat</STRONG> (Thumb, 88 bytes, Stack size 4 bytes, coinacceptor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CoinAcceptor_UpDateSysStat
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_TubeFull
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_ValueSetErr
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_CommErr
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_PollProc
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_Init
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_PackAnalysis
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_ReturnProc
</UL>

<P><STRONG><a name="[2f3]"></a>CoinAcceptor_CheckStat</STRONG> (Thumb, 198 bytes, Stack size 8 bytes, coinacceptor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CoinAcceptor_CheckStat &rArr; Changer_LowStat
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Changer_LowStat
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_PollProc
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_Init
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_PackAnalysis
</UL>

<P><STRONG><a name="[261]"></a>CoinAcceptor_Enable</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, coinacceptor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208 + Unknown Stack Size
<LI>Call Chain = CoinAcceptor_Enable &rArr; MdbCoin_Enable &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trace
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoin_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnCoinDevCmd
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisCoinDevCmd
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_RstProc
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_UpDateTubeStat
</UL>

<P><STRONG><a name="[2f4]"></a>CoinAcceptor_CheckTubeStat</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, coinacceptor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = CoinAcceptor_CheckTubeStat &rArr; MdbCoin_CheckTubeStat &rArr; MdbCoin_GetTubeStatus &rArr; Mdb_Session &rArr; Uart2_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoin_CheckTubeStat
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_UpDateTubeStat
</UL>

<P><STRONG><a name="[2f5]"></a>CoinAcceptor_UpDateTubeStat</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, coinacceptor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216 + Unknown Stack Size
<LI>Call Chain = CoinAcceptor_UpDateTubeStat &rArr; CoinAcceptor_Enable &rArr; MdbCoin_Enable &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_CheckTubeStat
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_SetTubeFull
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_PackAnalysis
</UL>

<P><STRONG><a name="[2f7]"></a>CoinAcceptor_StackProc</STRONG> (Thumb, 352 bytes, Stack size 16 bytes, coinacceptor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1504 + Unknown Stack Size
<LI>Call Chain = CoinAcceptor_StackProc &rArr; VPMission_Payin_RPT &rArr; VPBusFrameUnPack &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMission_Payin_RPT
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_PackAnalysis
</UL>

<P><STRONG><a name="[2f8]"></a>CoinAcceptor_ReturnProc</STRONG> (Thumb, 202 bytes, Stack size 8 bytes, coinacceptor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200 + Unknown Stack Size
<LI>Call Chain = CoinAcceptor_ReturnProc &rArr; MdbCoin_Enable &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trace
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_UpDateSysStat
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_UpDateStat
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_GetCoinLevel
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Changer_LowStat
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoin_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_PackAnalysis
</UL>

<P><STRONG><a name="[2f9]"></a>CoinAcceptor_Diagnostic</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, coinacceptor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = CoinAcceptor_Diagnostic &rArr; MdbCoin_Diagnostic &rArr; MdbCoin_Expansion &rArr; Mdb_Session &rArr; Uart2_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mdb_ReadBuf
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_UpDateStat
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_GetCoinLevel
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoin_Diagnostic
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_PollProc
</UL>

<P><STRONG><a name="[2fa]"></a>CoinAcceptor_RstProc</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, coinacceptor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216 + Unknown Stack Size
<LI>Call Chain = CoinAcceptor_RstProc &rArr; CoinAcceptor_Enable &rArr; MdbCoin_Enable &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_ErrJudge
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_ClrRstStat
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_CommErr
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_PackAnalysis
</UL>

<P><STRONG><a name="[2fc]"></a>CoinAcceptor_PackAnalysis</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, coinacceptor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1520 + Unknown Stack Size
<LI>Call Chain = CoinAcceptor_PackAnalysis &rArr; CoinAcceptor_StackProc &rArr; VPMission_Payin_RPT &rArr; VPBusFrameUnPack &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_RstProc
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_ReturnProc
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_StackProc
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_UpDateTubeStat
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_CheckStat
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_UpDateSysStat
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_RstStat
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCoinReturn
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCoinStacked
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoin_PackAnalysis
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_PollProc
</UL>

<P><STRONG><a name="[19e]"></a>CoinAcceptor_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, coinacceptor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1264 + Unknown Stack Size
<LI>Call Chain = CoinAcceptor_Init &rArr; MdbCoin_InitProc &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_CheckStat
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_UpDateSysStat
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_StatInit
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pulse_InitProc
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoin_InitProc
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKC
</UL>

<P><STRONG><a name="[302]"></a>CoinAcceptor_Poll</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, coinacceptor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CoinAcceptor_Poll &rArr; MdbCoin_Poll &rArr; Mdb_Session &rArr; Uart2_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoin_Poll
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_PollProc
</UL>

<P><STRONG><a name="[1ab]"></a>CoinAcceptor_PollProc</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, coinacceptor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1544 + Unknown Stack Size
<LI>Call Chain = CoinAcceptor_PollProc &rArr; CoinAcceptor_PackAnalysis &rArr; CoinAcceptor_StackProc &rArr; VPMission_Payin_RPT &rArr; VPBusFrameUnPack &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_Poll
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_PackAnalysis
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_Diagnostic
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_CheckStat
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_UpDateSysStat
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_ErrJudge
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_ReadBuf
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_ClrDeposit
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_SetCommErr
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKC
</UL>

<P><STRONG><a name="[4bd]"></a>Changer_StatInit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, changer.o(.text), UNUSED)

<P><STRONG><a name="[2cc]"></a>Changer_CommErr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, changer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Changer_UpDateSysStat
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoin_Payout2
</UL>

<P><STRONG><a name="[308]"></a>Changer_Dis</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, changer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Changer_UpDateSysStat
</UL>

<P><STRONG><a name="[288]"></a>Changer_SetCommErr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, changer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoin_Payout2
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoin_Payout3
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hoppern_Payout
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hopper_InitProc
</UL>

<P><STRONG><a name="[28b]"></a>Changer_SetDisStat</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, changer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Changer_Init
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hopper_InitProc
</UL>

<P><STRONG><a name="[28a]"></a>Changer_UpDateStat</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, changer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hoppern_Payout
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hopper_InitProc
</UL>

<P><STRONG><a name="[28d]"></a>Changer_UpDatepBuf</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, changer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoin_Payout2
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoin_Payout3
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hoppern_Payout
</UL>

<P><STRONG><a name="[306]"></a>Changer_ClrpBuf</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, changer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Changer_UpDateSysPara
</UL>

<P><STRONG><a name="[304]"></a>Changer_UpDateLeftAmount</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, changer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200 + Unknown Stack Size
<LI>Call Chain = Changer_UpDateLeftAmount &rArr; MdbCoin_Enable &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trace
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoin_CheckTubeStat
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoin_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Changer_CheckStat
</UL>

<P><STRONG><a name="[305]"></a>Changer_UpDateSysPara</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, changer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192 + Unknown Stack Size
<LI>Call Chain = Changer_UpDateSysPara &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trace
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Changer_ClrpBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Changer_Payout
</UL>

<P><STRONG><a name="[307]"></a>Changer_UpDateSysStat</STRONG> (Thumb, 124 bytes, Stack size 4 bytes, changer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Changer_UpDateSysStat
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Changer_Dis
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Changer_CommErr
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Changer_Payout
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Changer_Init
</UL>

<P><STRONG><a name="[2c8]"></a>Changer_LowStat</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, changer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Changer_LowStat
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_GetCoinScale
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Changer_CheckStat
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_ReturnProc
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_CheckStat
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoin_InitProc
</UL>

<P><STRONG><a name="[30a]"></a>Changer_ErrStat</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, changer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Changer_CheckStat
</UL>

<P><STRONG><a name="[309]"></a>Changer_CheckStat</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, changer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208 + Unknown Stack Size
<LI>Call Chain = Changer_CheckStat &rArr; Changer_UpDateLeftAmount &rArr; MdbCoin_Enable &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Changer_ErrStat
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Changer_UpDateLeftAmount
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Changer_LowStat
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Changer_Payout
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Changer_Init
</UL>

<P><STRONG><a name="[19d]"></a>Changer_Init</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, changer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280 + Unknown Stack Size
<LI>Call Chain = Changer_Init &rArr; Hopper_InitProc &rArr; HopperPayout &rArr; Hopper_Command &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Changer_CheckStat
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Changer_UpDateSysStat
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Changer_SetDisStat
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hopper_InitProc
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKC
</UL>

<P><STRONG><a name="[1b3]"></a>Changer_Payout</STRONG> (Thumb, 408 bytes, Stack size 16 bytes, changer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1512 + Unknown Stack Size
<LI>Call Chain = Changer_Payout &rArr; VPMission_Payout_RPT &rArr; VPBusFrameUnPack &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trace
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMission_Payout_RPT
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Changer_CheckStat
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Changer_UpDateSysStat
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Changer_UpDateSysPara
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoin_PayoutProc
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hopper_PayoutProc
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKC
</UL>

<P><STRONG><a name="[24c]"></a>DispTextLine</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, dispmenu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1480<LI>Call Chain = DispTextLine &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetScriptUnicode
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_LCD
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pitu_LCDPrintf
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionAddGoods
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_HoldNote
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_SubReader
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_SubNOTE
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_SetAdmin
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_SetConfirmation
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_CoinValue
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_ChangeValue
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_NoteValue
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_SetChannel
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_LEDSet
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_TempSet
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_TimeSet
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_System
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_ConfirmationJidu
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_Confirmation
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_NoteTestConfirm
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_CoinsTestConfirm
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_TransInputChannelNoJidu
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_TransInputChannelNo
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_ChannelTransJidu
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_ChannelTrans
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_GoodsJidu
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_Goods
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_PaymentsJidu
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_Payments
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_Transactions
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_Business
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_DriverInputNum
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_KeyTest
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_Driver
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_AddInputChannelNo
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_AddGoods
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_InputNum
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_Channel
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_InputLayerNum
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_Root
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_SysLanguage
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_Language
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_Password
</UL>

<P><STRONG><a name="[30c]"></a>DispMenu_Password</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, dispmenu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1488<LI>Call Chain = DispMenu_Password &rArr; DispTextLine &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line_Reverse
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispTextLine
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeHLight
</UL>

<P><STRONG><a name="[30d]"></a>DispMenu_Language</STRONG> (Thumb, 184 bytes, Stack size 8 bytes, dispmenu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1488<LI>Call Chain = DispMenu_Language &rArr; DispTextLine &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line_Reverse
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispTextLine
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeHLight
</UL>

<P><STRONG><a name="[30e]"></a>DispMenu_SysLanguage</STRONG> (Thumb, 184 bytes, Stack size 8 bytes, dispmenu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1488<LI>Call Chain = DispMenu_SysLanguage &rArr; DispTextLine &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line_Reverse
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispTextLine
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeHLight
</UL>

<P><STRONG><a name="[30f]"></a>DispMenu_Root</STRONG> (Thumb, 1638 bytes, Stack size 72 bytes, dispmenu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1552<LI>Call Chain = DispMenu_Root &rArr; DispTextLine &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line_Reverse
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispTextLine
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeHLight
</UL>

<P><STRONG><a name="[310]"></a>DispMenu_InputLayerNum</STRONG> (Thumb, 184 bytes, Stack size 8 bytes, dispmenu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1488<LI>Call Chain = DispMenu_InputLayerNum &rArr; DispTextLine &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispTextLine
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeHLight
</UL>

<P><STRONG><a name="[311]"></a>DispMenu_Channel</STRONG> (Thumb, 622 bytes, Stack size 112 bytes, dispmenu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1592<LI>Call Chain = DispMenu_Channel &rArr; DispTextLine &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line_Reverse
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispTextLine
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeHLight
</UL>

<P><STRONG><a name="[312]"></a>DispMenu_InputNum</STRONG> (Thumb, 220 bytes, Stack size 8 bytes, dispmenu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1488<LI>Call Chain = DispMenu_InputNum &rArr; DispTextLine &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispTextLine
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeHLight
</UL>

<P><STRONG><a name="[313]"></a>DispMenu_AddGoods</STRONG> (Thumb, 302 bytes, Stack size 112 bytes, dispmenu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1592<LI>Call Chain = DispMenu_AddGoods &rArr; DispTextLine &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line_Reverse
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispTextLine
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeHLight
</UL>

<P><STRONG><a name="[314]"></a>DispMenu_AddInputChannelNo</STRONG> (Thumb, 232 bytes, Stack size 8 bytes, dispmenu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1488<LI>Call Chain = DispMenu_AddInputChannelNo &rArr; DispTextLine &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispTextLine
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeHLight
</UL>

<P><STRONG><a name="[315]"></a>DispMenu_Driver</STRONG> (Thumb, 2198 bytes, Stack size 112 bytes, dispmenu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1592<LI>Call Chain = DispMenu_Driver &rArr; DispTextLine &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line_Reverse
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispTextLine
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeHLight
</UL>

<P><STRONG><a name="[316]"></a>DispMenu_KeyTest</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, dispmenu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1488<LI>Call Chain = DispMenu_KeyTest &rArr; DispTextLine &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispTextLine
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeHLight
</UL>

<P><STRONG><a name="[317]"></a>DispMenu_DriverInputNum</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, dispmenu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1488<LI>Call Chain = DispMenu_DriverInputNum &rArr; DispTextLine &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispTextLine
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeHLight
</UL>

<P><STRONG><a name="[318]"></a>DispMenu_Business</STRONG> (Thumb, 2190 bytes, Stack size 112 bytes, dispmenu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1592<LI>Call Chain = DispMenu_Business &rArr; DispTextLine &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line_Reverse
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispTextLine
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeHLight
</UL>

<P><STRONG><a name="[319]"></a>DispMenu_Transactions</STRONG> (Thumb, 1702 bytes, Stack size 72 bytes, dispmenu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1552<LI>Call Chain = DispMenu_Transactions &rArr; DispTextLine &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line_Reverse
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispTextLine
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeHLight
</UL>

<P><STRONG><a name="[31a]"></a>DispMenu_Payments</STRONG> (Thumb, 598 bytes, Stack size 112 bytes, dispmenu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1592<LI>Call Chain = DispMenu_Payments &rArr; DispTextLine &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line_Reverse
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispTextLine
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeHLight
</UL>

<P><STRONG><a name="[31b]"></a>DispMenu_PaymentsJidu</STRONG> (Thumb, 654 bytes, Stack size 112 bytes, dispmenu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1592<LI>Call Chain = DispMenu_PaymentsJidu &rArr; DispTextLine &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line_Reverse
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispTextLine
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeHLight
</UL>

<P><STRONG><a name="[31c]"></a>DispMenu_Goods</STRONG> (Thumb, 666 bytes, Stack size 112 bytes, dispmenu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1592<LI>Call Chain = DispMenu_Goods &rArr; DispTextLine &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line_Reverse
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispTextLine
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeHLight
</UL>

<P><STRONG><a name="[31d]"></a>DispMenu_GoodsJidu</STRONG> (Thumb, 218 bytes, Stack size 112 bytes, dispmenu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1592<LI>Call Chain = DispMenu_GoodsJidu &rArr; DispTextLine &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line_Reverse
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFull_LCD
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispTextLine
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeHLight
</UL>

<P><STRONG><a name="[31e]"></a>DispMenu_ChannelTrans</STRONG> (Thumb, 598 bytes, Stack size 112 bytes, dispmenu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1592<LI>Call Chain = DispMenu_ChannelTrans &rArr; DispTextLine &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line_Reverse
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispTextLine
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeHLight
</UL>

<P><STRONG><a name="[31f]"></a>DispMenu_ChannelTransJidu</STRONG> (Thumb, 688 bytes, Stack size 112 bytes, dispmenu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1592<LI>Call Chain = DispMenu_ChannelTransJidu &rArr; DispTextLine &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line_Reverse
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispTextLine
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeHLight
</UL>

<P><STRONG><a name="[320]"></a>DispMenu_TransInputChannelNo</STRONG> (Thumb, 232 bytes, Stack size 8 bytes, dispmenu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1488<LI>Call Chain = DispMenu_TransInputChannelNo &rArr; DispTextLine &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispTextLine
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeHLight
</UL>

<P><STRONG><a name="[321]"></a>DispMenu_TransInputChannelNoJidu</STRONG> (Thumb, 284 bytes, Stack size 8 bytes, dispmenu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1488<LI>Call Chain = DispMenu_TransInputChannelNoJidu &rArr; DispTextLine &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispTextLine
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeHLight
</UL>

<P><STRONG><a name="[322]"></a>DispMenu_CoinsTestConfirm</STRONG> (Thumb, 268 bytes, Stack size 8 bytes, dispmenu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1488<LI>Call Chain = DispMenu_CoinsTestConfirm &rArr; DispTextLine &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line_Reverse
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispTextLine
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeHLight
</UL>

<P><STRONG><a name="[323]"></a>DispMenu_NoteTestConfirm</STRONG> (Thumb, 268 bytes, Stack size 8 bytes, dispmenu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1488<LI>Call Chain = DispMenu_NoteTestConfirm &rArr; DispTextLine &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line_Reverse
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispTextLine
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeHLight
</UL>

<P><STRONG><a name="[324]"></a>DispMenu_Confirmation</STRONG> (Thumb, 268 bytes, Stack size 8 bytes, dispmenu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1488<LI>Call Chain = DispMenu_Confirmation &rArr; DispTextLine &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line_Reverse
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispTextLine
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeHLight
</UL>

<P><STRONG><a name="[325]"></a>DispMenu_ConfirmationJidu</STRONG> (Thumb, 330 bytes, Stack size 8 bytes, dispmenu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1488<LI>Call Chain = DispMenu_ConfirmationJidu &rArr; DispTextLine &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line_Reverse
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispTextLine
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeHLight
</UL>

<P><STRONG><a name="[326]"></a>DispMenu_System</STRONG> (Thumb, 2090 bytes, Stack size 112 bytes, dispmenu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1592<LI>Call Chain = DispMenu_System &rArr; DispTextLine &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line_Reverse
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispTextLine
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeHLight
</UL>

<P><STRONG><a name="[327]"></a>DispMenu_TimeSet</STRONG> (Thumb, 628 bytes, Stack size 112 bytes, dispmenu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1592<LI>Call Chain = DispMenu_TimeSet &rArr; DispTextLine &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line_Reverse
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCn_GetFullTime
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispTextLine
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeHLight
</UL>

<P><STRONG><a name="[328]"></a>DispMenu_TempSet</STRONG> (Thumb, 672 bytes, Stack size 56 bytes, dispmenu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1536<LI>Call Chain = DispMenu_TempSet &rArr; DispTextLine &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line_Reverse
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispTextLine
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeHLight
</UL>

<P><STRONG><a name="[329]"></a>DispMenu_LEDSet</STRONG> (Thumb, 622 bytes, Stack size 56 bytes, dispmenu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1536<LI>Call Chain = DispMenu_LEDSet &rArr; DispTextLine &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line_Reverse
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispTextLine
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeHLight
</UL>

<P><STRONG><a name="[32a]"></a>DispMenu_SetChannel</STRONG> (Thumb, 696 bytes, Stack size 112 bytes, dispmenu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1592<LI>Call Chain = DispMenu_SetChannel &rArr; DispTextLine &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line_Reverse
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispTextLine
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeHLight
</UL>

<P><STRONG><a name="[32b]"></a>DispMenu_NoteValue</STRONG> (Thumb, 646 bytes, Stack size 112 bytes, dispmenu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1592<LI>Call Chain = DispMenu_NoteValue &rArr; DispTextLine &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line_Reverse
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispTextLine
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeHLight
</UL>

<P><STRONG><a name="[32c]"></a>DispMenu_ChangeValue</STRONG> (Thumb, 622 bytes, Stack size 112 bytes, dispmenu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1592<LI>Call Chain = DispMenu_ChangeValue &rArr; DispTextLine &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line_Reverse
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispTextLine
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeHLight
</UL>

<P><STRONG><a name="[32d]"></a>DispMenu_CoinValue</STRONG> (Thumb, 648 bytes, Stack size 112 bytes, dispmenu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1592<LI>Call Chain = DispMenu_CoinValue &rArr; DispTextLine &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line_Reverse
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispTextLine
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeHLight
</UL>

<P><STRONG><a name="[32e]"></a>DispMenu_SetConfirmation</STRONG> (Thumb, 268 bytes, Stack size 8 bytes, dispmenu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1488<LI>Call Chain = DispMenu_SetConfirmation &rArr; DispTextLine &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line_Reverse
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispTextLine
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeHLight
</UL>

<P><STRONG><a name="[32f]"></a>DispMenu_SetAdmin</STRONG> (Thumb, 268 bytes, Stack size 8 bytes, dispmenu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line_Reverse
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispTextLine
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[330]"></a>DispMenu_SubCHStat</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, dispmenu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1592 + Unknown Stack Size
<LI>Call Chain = DispMenu_SubCHStat &rArr; AllChannelStat &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllChannelStat
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeHLight
</UL>

<P><STRONG><a name="[331]"></a>DispMenu_SubCHResult</STRONG> (Thumb, 1076 bytes, Stack size 72 bytes, dispmenu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1520 + Unknown Stack Size
<LI>Call Chain = DispMenu_SubCHResult &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_LCD
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trace
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeHLight
</UL>

<P><STRONG><a name="[332]"></a>DispMenu_SubNOTE</STRONG> (Thumb, 882 bytes, Stack size 112 bytes, dispmenu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1592<LI>Call Chain = DispMenu_SubNOTE &rArr; DispTextLine &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line_Reverse
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispTextLine
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeHLight
</UL>

<P><STRONG><a name="[333]"></a>DispMenu_SubReader</STRONG> (Thumb, 646 bytes, Stack size 112 bytes, dispmenu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1592<LI>Call Chain = DispMenu_SubReader &rArr; DispTextLine &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line_Reverse
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispTextLine
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeHLight
</UL>

<P><STRONG><a name="[334]"></a>DispMenu_HoldNote</STRONG> (Thumb, 328 bytes, Stack size 112 bytes, dispmenu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line_Reverse
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispTextLine
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>

<P><STRONG><a name="[240]"></a>JudgeHLight</STRONG> (Thumb, 1154 bytes, Stack size 8 bytes, dispmenu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1600 + Unknown Stack Size
<LI>Call Chain = JudgeHLight &rArr; DispMenu_SubReader &rArr; DispTextLine &rArr; Write_LCD &rArr; GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_SubReader
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_SubNOTE
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_SubCHResult
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_SubCHStat
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_SetConfirmation
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_CoinValue
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_ChangeValue
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_NoteValue
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_SetChannel
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_LEDSet
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_TempSet
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_TimeSet
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_System
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_ConfirmationJidu
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_Confirmation
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_NoteTestConfirm
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_CoinsTestConfirm
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_TransInputChannelNoJidu
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_TransInputChannelNo
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_ChannelTransJidu
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_ChannelTrans
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_GoodsJidu
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_Goods
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_PaymentsJidu
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_Payments
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_Transactions
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_Business
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_DriverInputNum
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_KeyTest
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_Driver
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_AddInputChannelNo
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_AddGoods
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_InputNum
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_Channel
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_InputLayerNum
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_Root
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_SysLanguage
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_Language
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_Password
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionPW
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionPWAdmin
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionPW3
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionPW2
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isAdminSet
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu
</UL>

<P><STRONG><a name="[a]"></a>MenuInit0</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, menuinit.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>MenuInitCHIN</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MenuInitCHIN &rArr; Cursor_On &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_On
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>MenuInitLAYIN</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MenuInitLAYIN &rArr; Cursor_On &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_On
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>MenuInitPWIN</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MenuInitPWIN &rArr; Cursor_On &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_On
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>MenuInitCHNO</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = MenuInitCHNO &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>MenuInitCHPR</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = MenuInitCHPR &rArr; DecimalPoint &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecimalPoint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>MenuInitCHST</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = MenuInitCHST &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>MenuInitCHLF</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = MenuInitCHLF &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>MenuInitCHGOODS</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = MenuInitCHGOODS &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>MenuInitAddGoods</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = MenuInitAddGoods &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[84]"></a>MenuInitCHSU</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = MenuInitCHSU &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[85]"></a>MenuInitCHMONEY</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = MenuInitCHMONEY &rArr; DecimalPoint &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecimalPoint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[90]"></a>MenuInitCHSUJIDU</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = MenuInitCHSUJIDU &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[91]"></a>MenuInitCHMONEYJIDU</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = MenuInitCHMONEYJIDU &rArr; DecimalPoint &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecimalPoint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[86]"></a>MenuInitCHDO</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = MenuInitCHDO &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>MenuInitNOST</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = MenuInitNOST &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>MenuInitCOST</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = MenuInitCOST &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[20]"></a>MenuInitHOST1</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = MenuInitHOST1 &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[22]"></a>MenuInitHOST2</STRONG> (Thumb, 178 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = MenuInitHOST2 &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[24]"></a>MenuInitHOST3</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = MenuInitHOST3 &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[335]"></a>MenuInitHOST2_ReaderCost</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, menuinit.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>

<P><STRONG><a name="[336]"></a>MenuInitHOST3_ReaderEnable</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, menuinit.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>

<P><STRONG><a name="[51]"></a>MenuInitIOU</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = MenuInitIOU &rArr; DecimalPoint &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecimalPoint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[fe]"></a>MenuInitCOCH1</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = MenuInitCOCH1 &rArr; DecimalPoint &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecimalPoint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[100]"></a>MenuInitCOCH2</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = MenuInitCOCH2 &rArr; DecimalPoint &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecimalPoint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[102]"></a>MenuInitCOCH3</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = MenuInitCOCH3 &rArr; DecimalPoint &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecimalPoint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[104]"></a>MenuInitCOCH4</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = MenuInitCOCH4 &rArr; DecimalPoint &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecimalPoint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[106]"></a>MenuInitCOCH5</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = MenuInitCOCH5 &rArr; DecimalPoint &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecimalPoint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[108]"></a>MenuInitCOCH6</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = MenuInitCOCH6 &rArr; DecimalPoint &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecimalPoint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[10a]"></a>MenuInitCOCH7</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = MenuInitCOCH7 &rArr; DecimalPoint &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecimalPoint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[10c]"></a>MenuInitCOCH8</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = MenuInitCOCH8 &rArr; DecimalPoint &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecimalPoint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[ee]"></a>MenuInitNOCH1</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = MenuInitNOCH1 &rArr; DecimalPoint &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecimalPoint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[f0]"></a>MenuInitNOCH2</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = MenuInitNOCH2 &rArr; DecimalPoint &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecimalPoint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[f2]"></a>MenuInitNOCH3</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = MenuInitNOCH3 &rArr; DecimalPoint &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecimalPoint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[f4]"></a>MenuInitNOCH4</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = MenuInitNOCH4 &rArr; DecimalPoint &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecimalPoint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[f6]"></a>MenuInitNOCH5</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = MenuInitNOCH5 &rArr; DecimalPoint &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecimalPoint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[f8]"></a>MenuInitNOCH6</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = MenuInitNOCH6 &rArr; DecimalPoint &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecimalPoint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[fa]"></a>MenuInitNOCH7</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = MenuInitNOCH7 &rArr; DecimalPoint &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecimalPoint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[fc]"></a>MenuInitNOCH8</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = MenuInitNOCH8 &rArr; DecimalPoint &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecimalPoint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[10e]"></a>MenuInitCGVA1</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = MenuInitCGVA1 &rArr; DecimalPoint &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecimalPoint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[110]"></a>MenuInitCGVA2</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = MenuInitCGVA2 &rArr; DecimalPoint &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecimalPoint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[112]"></a>MenuInitCGVA3</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = MenuInitCGVA3 &rArr; DecimalPoint &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecimalPoint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[47]"></a>MenuInitCGSV</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = MenuInitCGSV &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[55]"></a>MenuInitPONO</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = MenuInitPONO &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[57]"></a>MenuInitSACON</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = MenuInitSACON &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isGOCErrorSevice
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[59]"></a>MenuInitPOSEN</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = MenuInitPOSEN &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[5b]"></a>MenuInitPCEN</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = MenuInitPCEN &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[5d]"></a>MenuInitLCDSEL</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = MenuInitLCDSEL &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[5f]"></a>MenuInitKeySel</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = MenuInitKeySel &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[61]"></a>MenuInitLogoSel</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = MenuInitLogoSel &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[63]"></a>MenuInitAutoColumn</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = MenuInitAutoColumn &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[65]"></a>MenuInitTenColumn</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = MenuInitTenColumn &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[243]"></a>HoldNoteInit</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, menuinit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitHOLDNOTE
</UL>

<P><STRONG><a name="[241]"></a>KeySystemInit</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = KeySystemInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu
</UL>

<P><STRONG><a name="[67]"></a>MenuInitHOLDNOTE</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = MenuInitHOLDNOTE &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HoldNoteInit
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[69]"></a>MenuInitHOLDNOTE5</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = MenuInitHOLDNOTE5 &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[6b]"></a>MenuInitHOLDNOTE10</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = MenuInitHOLDNOTE10 &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[49]"></a>MenuInitNBUY</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = MenuInitNBUY &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[4b]"></a>MenuInitRCOIN</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = MenuInitRCOIN &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[3b]"></a>MenuInitOCOIN</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = MenuInitOCOIN &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[3d]"></a>MenuInitONOTE</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = MenuInitONOTE &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[41]"></a>MenuInitONREADER</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = MenuInitONREADER &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[45]"></a>MenuInitOREADERCOST</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = MenuInitOREADERCOST &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[3f]"></a>MenuInitOCHANGE</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = MenuInitOCHANGE &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[4d]"></a>MenuInitBMIN</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = MenuInitBMIN &rArr; DecimalPoint &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecimalPoint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[4f]"></a>MenuInitMMAX</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = MenuInitMMAX &rArr; DecimalPoint &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecimalPoint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[a3]"></a>MenuInitGPRS</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = MenuInitGPRS &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[a5]"></a>MenuInitSENO</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MenuInitSENO &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[a7]"></a>MenuInitGSMNO</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MenuInitGSMNO &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[a9]"></a>MenuInitTemerature</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = MenuInitTemerature &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[53]"></a>MenuInitDBMN</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = MenuInitDBMN &rArr; DecimalPoint &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecimalPoint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[6f]"></a>MenuInitINCOME</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = MenuInitINCOME &rArr; DecimalPoint &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecimalPoint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[71]"></a>MenuInitNOIN</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = MenuInitNOIN &rArr; DecimalPoint &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecimalPoint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[73]"></a>MenuInitCOIN</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = MenuInitCOIN &rArr; DecimalPoint &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecimalPoint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[75]"></a>MenuInitTOTR</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = MenuInitTOTR &rArr; DecimalPoint &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecimalPoint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[77]"></a>MenuInitTOCH</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = MenuInitTOCH &rArr; DecimalPoint &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecimalPoint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[79]"></a>MenuInitCOVA1</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = MenuInitCOVA1 &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[7a]"></a>MenuInitCOVA2</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = MenuInitCOVA2 &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[7b]"></a>MenuInitCOVA3</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = MenuInitCOVA3 &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[88]"></a>MenuInitINCOMEJIDU</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = MenuInitINCOMEJIDU &rArr; DecimalPoint &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecimalPoint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[89]"></a>MenuInitNOINJIDU</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = MenuInitNOINJIDU &rArr; DecimalPoint &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecimalPoint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[8a]"></a>MenuInitCOINJIDU</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = MenuInitCOINJIDU &rArr; DecimalPoint &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecimalPoint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[8b]"></a>MenuInitTOTRJIDU</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = MenuInitTOTRJIDU &rArr; DecimalPoint &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecimalPoint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[8c]"></a>MenuInitTOCHJIDU</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = MenuInitTOCHJIDU &rArr; DecimalPoint &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecimalPoint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[8d]"></a>MenuInitCOVA1JIDU</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = MenuInitCOVA1JIDU &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[8e]"></a>MenuInitCOVA2JIDU</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = MenuInitCOVA2JIDU &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[8f]"></a>MenuInitCOVA3JIDU</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = MenuInitCOVA3JIDU &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[7e]"></a>MenuInitSUNUM</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = MenuInitSUNUM &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[80]"></a>MenuInitDBNUM</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = MenuInitDBNUM &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[38]"></a>MenuInitFLASH</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = MenuInitFLASH &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[97]"></a>MenuInitYear</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = MenuInitYear &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[99]"></a>MenuInitMonth</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = MenuInitMonth &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[9b]"></a>MenuInitDate</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = MenuInitDate &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[9d]"></a>MenuInitHour</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = MenuInitHour &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[9f]"></a>MenuInitMinute</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = MenuInitMinute &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[ac]"></a>MenuInitCompressOn</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = MenuInitCompressOn &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[ae]"></a>MenuInitCompressHourOn</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = MenuInitCompressHourOn &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[b0]"></a>MenuInitCompressMinuteOn</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = MenuInitCompressMinuteOn &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[b2]"></a>MenuInitCompressHourOff</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = MenuInitCompressHourOff &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[b4]"></a>MenuInitCompressMinuteOff</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = MenuInitCompressMinuteOff &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[b6]"></a>MenuInitLEDOn</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = MenuInitLEDOn &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[b8]"></a>MenuInitLEDHourOn</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = MenuInitLEDHourOn &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[ba]"></a>MenuInitLEDMinuteOn</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = MenuInitLEDMinuteOn &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[bc]"></a>MenuInitLEDHourOff</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = MenuInitLEDHourOff &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[be]"></a>MenuInitLEDMinuteOff</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = MenuInitLEDMinuteOff &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[c0]"></a>MenuInitLAYNO</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = MenuInitLAYNO &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[c2]"></a>MenuInitLAYENABLE</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = MenuInitLAYENABLE &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[c4]"></a>MenuInitMAXGOODS</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = MenuInitMAXGOODS &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[c6]"></a>MenuInitCH1</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = MenuInitCH1 &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[ca]"></a>MenuInitCH2</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = MenuInitCH2 &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[ce]"></a>MenuInitCH3</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = MenuInitCH3 &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[d2]"></a>MenuInitCH4</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = MenuInitCH4 &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[d6]"></a>MenuInitCH5</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = MenuInitCH5 &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[da]"></a>MenuInitCH6</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = MenuInitCH6 &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[de]"></a>MenuInitCH7</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = MenuInitCH7 &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[e2]"></a>MenuInitCH8</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = MenuInitCH8 &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[e6]"></a>MenuInitCH9</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = MenuInitCH9 &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[ea]"></a>MenuInitCH0</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = MenuInitCH0 &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[337]"></a>MenuInitCHNum</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = MenuInitCHNum &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitCH9Num
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitCH8Num
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitCH7Num
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitCH6Num
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitCH5Num
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitCH4Num
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitCH3Num
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitCH2Num
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitCH1Num
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitCH0Num
</UL>

<P><STRONG><a name="[c8]"></a>MenuInitCH1Num</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = MenuInitCH1Num &rArr; MenuInitCHNum &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitCHNum
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[cc]"></a>MenuInitCH2Num</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = MenuInitCH2Num &rArr; MenuInitCHNum &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitCHNum
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[d0]"></a>MenuInitCH3Num</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = MenuInitCH3Num &rArr; MenuInitCHNum &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitCHNum
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[d4]"></a>MenuInitCH4Num</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = MenuInitCH4Num &rArr; MenuInitCHNum &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitCHNum
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[d8]"></a>MenuInitCH5Num</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = MenuInitCH5Num &rArr; MenuInitCHNum &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitCHNum
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[dc]"></a>MenuInitCH6Num</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = MenuInitCH6Num &rArr; MenuInitCHNum &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitCHNum
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[e0]"></a>MenuInitCH7Num</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = MenuInitCH7Num &rArr; MenuInitCHNum &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitCHNum
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[e4]"></a>MenuInitCH8Num</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = MenuInitCH8Num &rArr; MenuInitCHNum &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitCHNum
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[e8]"></a>MenuInitCH9Num</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = MenuInitCH9Num &rArr; MenuInitCHNum &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitCHNum
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[ec]"></a>MenuInitCH0Num</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, menuinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = MenuInitCH0Num &rArr; MenuInitCHNum &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitCHNum
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispmenu.o(.data)
</UL>
<P><STRONG><a name="[338]"></a>PCF8563T_Init</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, pcf8563t.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = PCF8563T_Init &rArr; I2C0_Init &rArr; zyIsrSet
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_Write
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCn_Init
</UL>

<P><STRONG><a name="[33b]"></a>PCF8563T_Start</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, pcf8563t.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PCF8563T_Start &rArr; I2C0_Write &rArr; I2C0_Engine
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCn_Init
</UL>

<P><STRONG><a name="[33c]"></a>PCF8563T_Stop</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, pcf8563t.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_Write
</UL>

<P><STRONG><a name="[33d]"></a>PCF8563T_SetTime</STRONG> (Thumb, 284 bytes, Stack size 24 bytes, pcf8563t.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = PCF8563T_SetTime &rArr; I2C0_Write &rArr; I2C0_Engine
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_Write
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__DEC2BCD
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563T_SetFullTime
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCn_SetTime
</UL>

<P><STRONG><a name="[33f]"></a>PCF8563T_SetFullTime</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, pcf8563t.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563T_SetTime
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCn_SetFullTime
</UL>

<P><STRONG><a name="[340]"></a>PCF8563T_GetTime</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, pcf8563t.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = PCF8563T_GetTime &rArr; I2C0_Read &rArr; I2C0_Engine
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_Read
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BCD2DEC
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCn_GetTime
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563T_GetFullTime
</UL>

<P><STRONG><a name="[343]"></a>PCF8563T_GetFullTime</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, pcf8563t.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = PCF8563T_GetFullTime &rArr; PCF8563T_GetTime &rArr; I2C0_Read &rArr; I2C0_Engine
</UL>
<BR>[Calls]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563T_GetTime
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCn_GetFullTime
</UL>

<P><STRONG><a name="[12d]"></a>I2C0_IRQHandler</STRONG> (Thumb, 356 bytes, Stack size 8 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C0_IRQHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
</UL>
<BR>[Address Reference Count : 2]<UL><LI> i2c.o(.text)
<LI> vector_table.o(.constdata)
</UL>
<P><STRONG><a name="[345]"></a>I2C0_Start</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_Engine
</UL>

<P><STRONG><a name="[346]"></a>I2C0_Stop</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_Engine
</UL>

<P><STRONG><a name="[339]"></a>I2C0_Init</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C0_Init &rArr; zyIsrSet
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyIsrSet
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyIrqEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563T_Init
</UL>

<P><STRONG><a name="[344]"></a>I2C0_Engine</STRONG> (Thumb, 58 bytes, Stack size 4 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = I2C0_Engine
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_Stop
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_Write
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_Read
</UL>

<P><STRONG><a name="[33a]"></a>I2C0_Write</STRONG> (Thumb, 100 bytes, Stack size 28 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C0_Write &rArr; I2C0_Engine
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_Engine
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563T_SetTime
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563T_Stop
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563T_Start
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563T_Init
</UL>

<P><STRONG><a name="[341]"></a>I2C0_Read</STRONG> (Thumb, 104 bytes, Stack size 28 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C0_Read &rArr; I2C0_Engine
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_Engine
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563T_GetTime
</UL>

<P><STRONG><a name="[19b]"></a>RTCn_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, realtime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RTCn_Init &rArr; PCF8563T_Init &rArr; I2C0_Init &rArr; zyIsrSet
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563T_Start
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563T_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK0
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKC
</UL>

<P><STRONG><a name="[25a]"></a>RTCn_SetTime</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, realtime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RTCn_SetTime &rArr; PCF8563T_SetTime &rArr; I2C0_Write &rArr; I2C0_Engine
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563T_SetTime
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionMinute
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionHour
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionDate
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionMonth
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionYear
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VP_CMD_Control
</UL>

<P><STRONG><a name="[347]"></a>RTCn_SetFullTime</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, realtime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563T_SetFullTime
</UL>

<P><STRONG><a name="[348]"></a>RTCn_GetTime</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, realtime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563T_GetTime
</UL>

<P><STRONG><a name="[1ee]"></a>RTCn_GetFullTime</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, realtime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RTCn_GetFullTime &rArr; PCF8563T_GetFullTime &rArr; PCF8563T_GetTime &rArr; I2C0_Read &rArr; I2C0_Engine
</UL>
<BR>[Calls]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563T_GetFullTime
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispErrText
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispBeginText
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKB
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_TimeSet
</UL>

<P><STRONG><a name="[34b]"></a>ITLUpdateCrc</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, itl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITLBusUnpack
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITLBusTxMsg
</UL>

<P><STRONG><a name="[34a]"></a>ITLResetCrc</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, itl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITLBusUnpack
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITLBusTxMsg
</UL>

<P><STRONG><a name="[351]"></a>ITLChnCtr</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, itl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITLMission_SetInhibit
</UL>

<P><STRONG><a name="[349]"></a>ITLBusTxMsg</STRONG> (Thumb, 294 bytes, Stack size 8 bytes, itl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ITLBusTxMsg &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_SetParity
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_SendByte
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_ClrBuf
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITLResetCrc
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITLUpdateCrc
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_SetEvbMode
</UL>
<BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITLMsgPackSend
</UL>

<P><STRONG><a name="[34c]"></a>ITLMsgPackSend</STRONG> (Thumb, 264 bytes, Stack size 16 bytes, itl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ITLMsgPackSend &rArr; ITLBusTxMsg &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITLBusTxMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITLMission_Dspon
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITLMission_Reset
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITLMission_SetInhibit
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITLMission_Setup
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITLMission_Syn
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITLMission_Reject
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITLMission_Poll
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITLMission_Enable
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITLMission_Disable
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITLMission_Hold
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITLMission_Dspoff
</UL>

<P><STRONG><a name="[34d]"></a>ITLBusUnpack</STRONG> (Thumb, 410 bytes, Stack size 288 bytes, itl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = ITLBusUnpack &rArr; Uart2_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_Read
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITLResetCrc
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITLUpdateCrc
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITLMission_Dspon
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITLMission_Reset
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITLMission_SetInhibit
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITLMission_Setup
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITLMission_Syn
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITLMission_Reject
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITLMission_Poll
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITLMission_Enable
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITLMission_Disable
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITLMission_Hold
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITLMission_Dspoff
</UL>

<P><STRONG><a name="[34e]"></a>ITLMission_Syn</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, itl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITLBusUnpack
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITLMsgPackSend
</UL>

<P><STRONG><a name="[34f]"></a>ITLMission_Setup</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, itl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITLBusUnpack
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITLMsgPackSend
</UL>

<P><STRONG><a name="[350]"></a>ITLMission_SetInhibit</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, itl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = ITLMission_SetInhibit &rArr; ITLBusUnpack &rArr; Uart2_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITLBusUnpack
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITLMsgPackSend
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITLChnCtr
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITLMission_Init
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITLMission_Init_1
</UL>

<P><STRONG><a name="[352]"></a>ITLMission_Reset</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, itl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = ITLMission_Reset &rArr; ITLBusUnpack &rArr; Uart2_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITLBusUnpack
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITLMsgPackSend
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITLMission_Init
</UL>

<P><STRONG><a name="[353]"></a>ITLMission_Dspon</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, itl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = ITLMission_Dspon &rArr; ITLBusUnpack &rArr; Uart2_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITLBusUnpack
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITLMsgPackSend
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITLMission_Init
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITLMission_Init_1
</UL>

<P><STRONG><a name="[354]"></a>ITLMission_Dspoff</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, itl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITLBusUnpack
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITLMsgPackSend
</UL>

<P><STRONG><a name="[355]"></a>ITLMission_Hold</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, itl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITLBusUnpack
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITLMsgPackSend
</UL>

<P><STRONG><a name="[2d5]"></a>ITLMission_Enable</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, itl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = ITLMission_Enable &rArr; ITLBusUnpack &rArr; Uart2_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITLBusUnpack
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITLMsgPackSend
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITLMission_Init
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_Enable
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITLMission_Init_1
</UL>

<P><STRONG><a name="[356]"></a>ITLMission_Disable</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, itl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITLBusUnpack
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITLMsgPackSend
</UL>
<BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITLMission_Init_1
</UL>

<P><STRONG><a name="[2dd]"></a>ITLMission_Reject</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, itl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = ITLMission_Reject &rArr; ITLBusUnpack &rArr; Uart2_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITLBusUnpack
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITLMsgPackSend
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_Return
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITLMission_HB_Reject
</UL>

<P><STRONG><a name="[2ec]"></a>ITLMission_Poll</STRONG> (Thumb, 666 bytes, Stack size 16 bytes, itl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = ITLMission_Poll &rArr; ITLBusUnpack &rArr; Uart2_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITLBusUnpack
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITLMsgPackSend
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITLMission_HB_Stack
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_Poll
</UL>

<P><STRONG><a name="[2e1]"></a>ITLNote_PackAnalysis</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, itl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ITLNote_PackAnalysis
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_ClrInValid
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_UpdateAcpt
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_PackAnalysis
</UL>

<P><STRONG><a name="[357]"></a>ITLMission_Init_1</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, itl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITLMission_Dspon
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITLMission_SetInhibit
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITLMission_Enable
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITLMission_Disable
</UL>

<P><STRONG><a name="[2ea]"></a>ITLMission_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, itl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = ITLMission_Init &rArr; ITLMission_Dspon &rArr; ITLBusUnpack &rArr; Uart2_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITLMission_Dspon
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITLMission_Reset
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITLMission_SetInhibit
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITLMission_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_Init
</UL>

<P><STRONG><a name="[2db]"></a>ITLMission_HB_Stack</STRONG> (Thumb, 266 bytes, Stack size 8 bytes, itl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = ITLMission_HB_Stack &rArr; ITLMission_Poll &rArr; ITLBusUnpack &rArr; Uart2_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITLMission_Poll
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_Stack
</UL>

<P><STRONG><a name="[358]"></a>ITLMission_HB_Reject</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, itl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITLMission_Reject
</UL>

<P><STRONG><a name="[2d3]"></a>ITL_UpDateStackerStat</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, itl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_UpDateStackerStat
</UL>

<P><STRONG><a name="[2d4]"></a>ITL_ErrJudge</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, itl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_ErrJudge
</UL>

<P><STRONG><a name="[191]"></a>Uart0_Init</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, debugtrace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Uart0_Init &rArr; CLKPWR_SetPCLKDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyIrqEnable
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_SetPCLKDiv
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_ConfigPPWR
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKC
</UL>

<P><STRONG><a name="[35a]"></a>Uart0_SendByte</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, debugtrace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trace
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Write
</UL>

<P><STRONG><a name="[359]"></a>Uart0_Write</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, debugtrace.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_SendByte
</UL>

<P><STRONG><a name="[18e]"></a>Trace</STRONG> (Thumb, 62 bytes, Stack size 1056 bytes, debugtrace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176 + Unknown Stack Size
<LI>Call Chain = Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_SendByte
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateChannelPrice
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VP_CMD_Opt
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMission_Poll
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMission_Init
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMission_Admin_RPT
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTouBiStat
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyProcess
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HopperPayoutCmd
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSelectKey
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNoteEnBit
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvOutCommand
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoChuhuoMsg
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Changer_Payout
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKB
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKC
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_SubCHResult
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Changer_UpDateSysPara
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Changer_UpDateLeftAmount
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_ReturnProc
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMission_Payin_RPT
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoin_PayoutProc
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoin_Payout3
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoin_InitProc
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoin_Enable
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbNote_InitProc
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbNote_Enable
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hopper_PayoutProc
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hoppern_Payout
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hopper_Command
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Dispense
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMsgPackSend
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_VP_CMD_ChuhuoMsg
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_Enable
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACDCModuleTest
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectKey_Command_1
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectKey_Command
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPCountCoin
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMission_Startup_RPT
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VP_CMD_Payout
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMission_Status_RPT
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VP_CMD_Reset
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VP_CMD_Vendout
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPBusFrameUnPack
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPBusTxMsg
</UL>

<P><STRONG><a name="[35c]"></a>VPSerialInit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, vmc_pc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[35d]"></a>VPBusTxMsg</STRONG> (Thumb, 368 bytes, Stack size 16 bytes, vmc_pc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192 + Unknown Stack Size
<LI>Call Chain = VPBusTxMsg &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trace
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMsgPackSend
</UL>

<P><STRONG><a name="[35e]"></a>VPBusFrameUnPack</STRONG> (Thumb, 372 bytes, Stack size 288 bytes, vmc_pc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464 + Unknown Stack Size
<LI>Call Chain = VPBusFrameUnPack &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trace
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3_Read
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMission_Poll
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMission_Cost_RPT
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMission_Admin_RPT
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMission_Payout_RPT
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMission_Payin_RPT
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMission_Vendout_RPT
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMission_Vendout_REQ
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMission_Request
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMission_Setup_RPT
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMission_Startup_RPT
</UL>

<P><STRONG><a name="[26c]"></a>VPMsgPackSend</STRONG> (Thumb, 1884 bytes, Stack size 24 bytes, vmc_pc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216 + Unknown Stack Size
<LI>Call Chain = VPMsgPackSend &rArr; VPBusTxMsg &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trace
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPBusTxMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMission_Poll
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMission_Debt_RPT
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMission_Cost_RPT
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMission_Button_RPT
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMission_Admin_RPT
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMission_Payout_RPT
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMission_Payin_RPT
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMission_Vendout_RPT
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMission_Vendout_REQ
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_VP_CMD_ChuhuoMsg
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMission_ColumnSta_RPT
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMission_Card_RPT
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMission_Request
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMission_Setup_RPT
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMission_Startup_RPT
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VP_CMD_GetColumnSta
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VP_CMD_Payout
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VP_CMD_GetStatus
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMission_Status_RPT
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VP_CMD_Control
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VP_CMD_Reset
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VP_CMD_Cost
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VP_CMD_Vendout
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VP_CMD_Init_OK
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VP_CMD_ColumnPar
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VP_CMD_GoodsPar
</UL>

<P><STRONG><a name="[35f]"></a>VP_CMD_GoodsPar</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, vmc_pc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1240 + Unknown Stack Size
<LI>Call Chain = VP_CMD_GoodsPar &rArr; VPMsgPackSend &rArr; VPBusTxMsg &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMsgPackSend
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMission_Poll
</UL>

<P><STRONG><a name="[360]"></a>VP_CMD_ColumnPar</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, vmc_pc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1248 + Unknown Stack Size
<LI>Call Chain = VP_CMD_ColumnPar &rArr; VPMsgPackSend &rArr; VPBusTxMsg &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_ChnChk
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMsgPackSend
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMission_Poll
</UL>

<P><STRONG><a name="[361]"></a>VP_CMD_Init_OK</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, vmc_pc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1232 + Unknown Stack Size
<LI>Call Chain = VP_CMD_Init_OK &rArr; VPMsgPackSend &rArr; VPBusTxMsg &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMsgPackSend
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMission_Poll
</UL>

<P><STRONG><a name="[362]"></a>VP_CMD_Vendout</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, vmc_pc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1248 + Unknown Stack Size
<LI>Call Chain = VP_CMD_Vendout &rArr; VPMsgPackSend &rArr; VPBusTxMsg &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trace
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxAccept
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMsgPackSend
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMission_Poll
</UL>

<P><STRONG><a name="[363]"></a>VP_CMD_Cost</STRONG> (Thumb, 368 bytes, Stack size 16 bytes, vmc_pc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1232 + Unknown Stack Size
<LI>Call Chain = VP_CMD_Cost &rArr; VPMsgPackSend &rArr; VPBusTxMsg &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxAccept
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMsgPackSend
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMission_Poll
</UL>

<P><STRONG><a name="[364]"></a>VP_CMD_Reset</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, vmc_pc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1232 + Unknown Stack Size
<LI>Call Chain = VP_CMD_Reset &rArr; VPMsgPackSend &rArr; VPBusTxMsg &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trace
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxAccept
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMsgPackSend
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMission_Poll
</UL>

<P><STRONG><a name="[367]"></a>GameLedOn</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, vmc_pc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VP_CMD_Control
</UL>

<P><STRONG><a name="[366]"></a>GameLedOff</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, vmc_pc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VP_CMD_Control
</UL>

<P><STRONG><a name="[365]"></a>VP_CMD_Control</STRONG> (Thumb, 322 bytes, Stack size 16 bytes, vmc_pc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1232 + Unknown Stack Size
<LI>Call Chain = VP_CMD_Control &rArr; VPMsgPackSend &rArr; VPBusTxMsg &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMsgPackSend
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCn_SetTime
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GameLedOff
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GameLedOn
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMission_Poll
</UL>

<P><STRONG><a name="[368]"></a>VPMission_Status_RPT</STRONG> (Thumb, 404 bytes, Stack size 16 bytes, vmc_pc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1232 + Unknown Stack Size
<LI>Call Chain = VPMission_Status_RPT &rArr; VPMsgPackSend &rArr; VPBusTxMsg &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trace
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMsgPackSend
</UL>
<BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VP_CMD_GetStatus
</UL>

<P><STRONG><a name="[369]"></a>VP_CMD_GetStatus</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, vmc_pc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1248 + Unknown Stack Size
<LI>Call Chain = VP_CMD_GetStatus &rArr; VPMission_Status_RPT &rArr; VPMsgPackSend &rArr; VPBusTxMsg &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMsgPackSend
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMission_Status_RPT
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMission_Poll
</UL>

<P><STRONG><a name="[36a]"></a>VP_CMD_Payout</STRONG> (Thumb, 252 bytes, Stack size 16 bytes, vmc_pc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1232 + Unknown Stack Size
<LI>Call Chain = VP_CMD_Payout &rArr; VPMsgPackSend &rArr; VPBusTxMsg &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trace
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxAccept
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMsgPackSend
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMission_Poll
</UL>

<P><STRONG><a name="[246]"></a>VPMission_ColumnSta_RPT</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, vmc_pc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1240 + Unknown Stack Size
<LI>Call Chain = VPMission_ColumnSta_RPT &rArr; VPMsgPackSend &rArr; VPBusTxMsg &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMsgPackSend
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionAddGoods
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionCHLF
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionCHST
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionTESTCHIN
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VP_CMD_GetColumnSta
</UL>

<P><STRONG><a name="[36b]"></a>VP_CMD_GetColumnSta</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, vmc_pc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1256 + Unknown Stack Size
<LI>Call Chain = VP_CMD_GetColumnSta &rArr; VPMission_ColumnSta_RPT &rArr; VPMsgPackSend &rArr; VPBusTxMsg &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMsgPackSend
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMission_ColumnSta_RPT
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMission_Poll
</UL>

<P><STRONG><a name="[36d]"></a>UpdateSelectionLed_GoodsSta</STRONG> (Thumb, 444 bytes, Stack size 0 bytes, vmc_pc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateGoodsMatrixStatus
</UL>

<P><STRONG><a name="[4be]"></a>UpdateSelLed_Trade</STRONG> (Thumb, 784 bytes, Stack size 0 bytes, vmc_pc.o(.text), UNUSED)

<P><STRONG><a name="[36c]"></a>UpdateGoodsMatrixStatus</STRONG> (Thumb, 746 bytes, Stack size 28 bytes, vmc_pc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateSelectionLed_GoodsSta
</UL>

<P><STRONG><a name="[36e]"></a>VP_Update_ColumnGoodsPar</STRONG> (Thumb, 528 bytes, Stack size 32 bytes, vmc_pc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = VP_Update_ColumnGoodsPar &rArr; DRV_ChnChk
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_ChnChk
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMission_Poll
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMission_Init
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPSynGoodsCol
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPChangeColPrice
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPAddSingleColGoods
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPAddLayerColGoods
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPAddAllColGoods
</UL>

<P><STRONG><a name="[36f]"></a>VPMission_Startup_RPT</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, vmc_pc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1480 + Unknown Stack Size
<LI>Call Chain = VPMission_Startup_RPT &rArr; VPBusFrameUnPack &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trace
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMsgPackSend
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPBusFrameUnPack
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMission_Init
</UL>

<P><STRONG><a name="[370]"></a>VPMission_Setup_RPT</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, vmc_pc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1480 + Unknown Stack Size
<LI>Call Chain = VPMission_Setup_RPT &rArr; VPBusFrameUnPack &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMsgPackSend
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPBusFrameUnPack
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMission_Init
</UL>

<P><STRONG><a name="[2dc]"></a>VPMission_Payin_RPT</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, vmc_pc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1488 + Unknown Stack Size
<LI>Call Chain = VPMission_Payin_RPT &rArr; VPBusFrameUnPack &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trace
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMsgPackSend
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPBusFrameUnPack
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_Stack
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_Return
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_StackProc
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_EscrowProc
</UL>

<P><STRONG><a name="[30b]"></a>VPMission_Payout_RPT</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, vmc_pc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1496 + Unknown Stack Size
<LI>Call Chain = VPMission_Payout_RPT &rArr; VPBusFrameUnPack &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMsgPackSend
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPBusFrameUnPack
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Changer_Payout
</UL>

<P><STRONG><a name="[1bc]"></a>VPMission_Cost_RPT</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, vmc_pc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1488 + Unknown Stack Size
<LI>Call Chain = VPMission_Cost_RPT &rArr; VPBusFrameUnPack &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMsgPackSend
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPBusFrameUnPack
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKC
</UL>

<P><STRONG><a name="[1bb]"></a>VPMission_Debt_RPT</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, vmc_pc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1248 + Unknown Stack Size
<LI>Call Chain = VPMission_Debt_RPT &rArr; VPMsgPackSend &rArr; VPBusTxMsg &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMsgPackSend
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKC
</UL>

<P><STRONG><a name="[282]"></a>VPMission_Vendout_RPT</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, vmc_pc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1496 + Unknown Stack Size
<LI>Call Chain = VPMission_Vendout_RPT &rArr; VPBusFrameUnPack &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMsgPackSend
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPBusFrameUnPack
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvOutCommand
</UL>

<P><STRONG><a name="[281]"></a>VPMission_Vendout_REQ</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, vmc_pc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1488 + Unknown Stack Size
<LI>Call Chain = VPMission_Vendout_REQ &rArr; VPBusFrameUnPack &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMsgPackSend
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPBusFrameUnPack
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvOutCommand
</UL>

<P><STRONG><a name="[371]"></a>VPMission_Request</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, vmc_pc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1488 + Unknown Stack Size
<LI>Call Chain = VPMission_Request &rArr; VPBusFrameUnPack &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMsgPackSend
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPBusFrameUnPack
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPSynGoodsCol
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPChangeColPrice
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPAddSingleColGoods
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPAddLayerColGoods
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPAddAllColGoods
</UL>

<P><STRONG><a name="[1ba]"></a>VPMission_Admin_RPT</STRONG> (Thumb, 296 bytes, Stack size 32 bytes, vmc_pc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1496 + Unknown Stack Size
<LI>Call Chain = VPMission_Admin_RPT &rArr; VPBusFrameUnPack &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trace
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMsgPackSend
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPBusFrameUnPack
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKC
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPSynGoodsCol
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPChangeColPrice
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPAddSingleColGoods
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPAddLayerColGoods
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPAddChanges
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPAddAllColGoods
</UL>

<P><STRONG><a name="[4bf]"></a>VPMission_Action_RPT</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, vmc_pc.o(.text), UNUSED)

<P><STRONG><a name="[1bd]"></a>VPMission_Button_RPT</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, vmc_pc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1240 + Unknown Stack Size
<LI>Call Chain = VPMission_Button_RPT &rArr; VPMsgPackSend &rArr; VPBusTxMsg &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMsgPackSend
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKC
</UL>

<P><STRONG><a name="[372]"></a>VPMission_Card_RPT</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, vmc_pc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMsgPackSend
</UL>

<P><STRONG><a name="[1ae]"></a>VPMission_Poll</STRONG> (Thumb, 288 bytes, Stack size 16 bytes, vmc_pc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1480 + Unknown Stack Size
<LI>Call Chain = VPMission_Poll &rArr; VPBusFrameUnPack &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trace
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMsgPackSend
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VP_Update_ColumnGoodsPar
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VP_CMD_GetColumnSta
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VP_CMD_Payout
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VP_CMD_GetStatus
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VP_CMD_Control
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VP_CMD_Reset
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VP_CMD_Cost
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VP_CMD_Vendout
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VP_CMD_Init_OK
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VP_CMD_ColumnPar
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VP_CMD_GoodsPar
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPBusFrameUnPack
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMission_Init
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKC
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPSynGoodsCol
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPChangeColPrice
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPAddSingleColGoods
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPAddLayerColGoods
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPAddAllColGoods
</UL>

<P><STRONG><a name="[1a2]"></a>VPMission_Init</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, vmc_pc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1496 + Unknown Stack Size
<LI>Call Chain = VPMission_Init &rArr; VPMission_Poll &rArr; VPBusFrameUnPack &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMission_Poll
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trace
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMission_Setup_RPT
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMission_Startup_RPT
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VP_Update_ColumnGoodsPar
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKC
</UL>

<P><STRONG><a name="[24a]"></a>VPAddSingleColGoods</STRONG> (Thumb, 812 bytes, Stack size 40 bytes, vmc_pc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1536 + Unknown Stack Size
<LI>Call Chain = VPAddSingleColGoods &rArr; VPMission_Admin_RPT &rArr; VPBusFrameUnPack &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFull_LCD
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMission_Poll
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMission_Admin_RPT
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMission_Request
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VP_Update_ColumnGoodsPar
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionCHLF
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionCHST
</UL>

<P><STRONG><a name="[249]"></a>VPChangeColPrice</STRONG> (Thumb, 554 bytes, Stack size 40 bytes, vmc_pc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1536 + Unknown Stack Size
<LI>Call Chain = VPChangeColPrice &rArr; VPMission_Admin_RPT &rArr; VPBusFrameUnPack &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFull_LCD
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMission_Poll
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMission_Admin_RPT
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMission_Request
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VP_Update_ColumnGoodsPar
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionCHPR
</UL>

<P><STRONG><a name="[24b]"></a>VPAddAllColGoods</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, vmc_pc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1520 + Unknown Stack Size
<LI>Call Chain = VPAddAllColGoods &rArr; VPMission_Admin_RPT &rArr; VPBusFrameUnPack &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFull_LCD
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMission_Poll
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMission_Admin_RPT
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMission_Request
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VP_Update_ColumnGoodsPar
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionAddGoods
</UL>

<P><STRONG><a name="[24d]"></a>VPAddLayerColGoods</STRONG> (Thumb, 310 bytes, Stack size 16 bytes, vmc_pc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1512 + Unknown Stack Size
<LI>Call Chain = VPAddLayerColGoods &rArr; VPMission_Admin_RPT &rArr; VPBusFrameUnPack &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFull_LCD
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMission_Poll
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMission_Admin_RPT
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMission_Request
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VP_Update_ColumnGoodsPar
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionAddGoods
</UL>

<P><STRONG><a name="[251]"></a>VPAddChanges</STRONG> (Thumb, 772 bytes, Stack size 72 bytes, vmc_pc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFull_LCD
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMission_Admin_RPT
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionAddBillChanges
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionAddCoinChanges
</UL>

<P><STRONG><a name="[24f]"></a>VPSynGoodsCol</STRONG> (Thumb, 500 bytes, Stack size 32 bytes, vmc_pc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFull_LCD
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMission_Poll
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMission_Admin_RPT
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMission_Request
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VP_Update_ColumnGoodsPar
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionSynGoodsCol
</UL>

<P><STRONG><a name="[373]"></a>VPCountCoin</STRONG> (Thumb, 138 bytes, Stack size 48 bytes, vmc_pc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trace
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>

<P><STRONG><a name="[374]"></a>nDraw_RECT</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, scriptgetaddress.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_send
</UL>

<P><STRONG><a name="[375]"></a>nLCD_WhiteBlock</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, scriptgetaddress.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_send
</UL>

<P><STRONG><a name="[378]"></a>ChangeCharBit</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, scriptgetaddress.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ChangeCharBit
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrZiFu
</UL>

<P><STRONG><a name="[376]"></a>DispStrZiFu</STRONG> (Thumb, 460 bytes, Stack size 912 bytes, scriptgetaddress.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_send_up
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_send
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT20L24F6Y_ReadZiku
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeCharBit
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetScriptUnicode
</UL>

<P><STRONG><a name="[379]"></a>Script_GetAddress</STRONG> (Thumb, 1334 bytes, Stack size 192 bytes, scriptgetaddress.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = Script_GetAddress &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetScriptUnicode
</UL>

<P><STRONG><a name="[210]"></a>GetScriptUnicode</STRONG> (Thumb, 156 bytes, Stack size 424 bytes, scriptgetaddress.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1360<LI>Call Chain = GetScriptUnicode &rArr; DispStrZiFu &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gsmEncodeUcs2
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Script_GetAddress
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrZiFu
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFull_LCD
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_LCD
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispTextLine
</UL>

<P><STRONG><a name="[4c0]"></a>gsmDecodeUcs2</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, ucsgbk.o(.text), UNUSED)

<P><STRONG><a name="[37a]"></a>gsmEncodeUcs2</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, ucsgbk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gsmEncodeUcs2
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetScriptUnicode
</UL>

<P><STRONG><a name="[4c1]"></a>GT20L24F6Y_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, zikudriver.o(.text), UNUSED)

<P><STRONG><a name="[377]"></a>GT20L24F6Y_ReadZiku</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, zikudriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GT20L24F6Y_ReadZiku
</UL>
<BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_sziku
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_send
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrZiFu
</UL>

<P><STRONG><a name="[20c]"></a>GetPituLibStr</STRONG> (Thumb, 562 bytes, Stack size 20 bytes, pitufont.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GetPituLibStr
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pitu_LCDPrintf
</UL>

<P><STRONG><a name="[218]"></a>GetLOGO</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, pitufont.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetLOGO
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pitu_LCDPutLOGOBmp
</UL>

<P><STRONG><a name="[4c2]"></a>GetPic</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, pitufont.o(.text), UNUSED)

<P><STRONG><a name="[380]"></a>SelectKeySet</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, selectkey.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1248 + Unknown Stack Size
<LI>Call Chain = SelectKeySet &rArr; SelectKey_Command &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectKey_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSelectKey
</UL>

<P><STRONG><a name="[1a8]"></a>GetSelectKey</STRONG> (Thumb, 300 bytes, Stack size 32 bytes, selectkey.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280 + Unknown Stack Size
<LI>Call Chain = GetSelectKey &rArr; SelectKeySet &rArr; SelectKey_Command &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trace
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectKeySet
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKC
</UL>

<P><STRONG><a name="[1c9]"></a>UpdateSelectionLed</STRONG> (Thumb, 2972 bytes, Stack size 32 bytes, selectkey.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UpdateSelectionLed &rArr; DRV_ChnChk
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_ChnChk
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKB
</UL>

<P><STRONG><a name="[255]"></a>UpdateSelectionLedTest</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, selectkey.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionDoXuanhuoTest
</UL>

<P><STRONG><a name="[1a3]"></a>SelectKey_InitProc</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, selectkey.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKC
</UL>

<P><STRONG><a name="[381]"></a>Uart1_ClrBuf</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, uart1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Uart1_ClrBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_Init
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_Read
</UL>

<P><STRONG><a name="[12a]"></a>Uart1_IRQHandler</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, uart1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Uart1_IRQHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
</UL>
<BR>[Address Reference Count : 2]<UL><LI> uart1.o(.text)
<LI> vector_table.o(.constdata)
</UL>
<P><STRONG><a name="[192]"></a>Uart1_Init</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, uart1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Uart1_Init &rArr; zyIsrSet
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyIsrSet
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyIrqEnable
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_SetPCLKDiv
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_ConfigPPWR
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_ClrBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKC
</UL>

<P><STRONG><a name="[383]"></a>Uart1GetCh</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, uart1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_Read
</UL>

<P><STRONG><a name="[382]"></a>Uart1IsRxBufNull</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, uart1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Uart1IsRxBufNull &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_Read
</UL>

<P><STRONG><a name="[37f]"></a>Uart1_Read</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, uart1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Uart1_Read &rArr; Uart1IsRxBufNull &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1IsRxBufNull
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1GetCh
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_ClrBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectKey_Command
</UL>

<P><STRONG><a name="[384]"></a>Uart1_SendByte</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uart1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_Write
</UL>

<P><STRONG><a name="[37e]"></a>Uart1_Write</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, uart1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Uart1_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectKey_Command
</UL>

<P><STRONG><a name="[385]"></a>Disp_BeginSession</STRONG> (Thumb, 98 bytes, Stack size 48 bytes, task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFull_LCD
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_GetFundsMultiplyUnit
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>

<P><STRONG><a name="[386]"></a>Disp_VendApproved</STRONG> (Thumb, 98 bytes, Stack size 48 bytes, task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFull_LCD
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_GetValueDivideUnit
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>

<P><STRONG><a name="[388]"></a>Disp_VendDenied</STRONG> (Thumb, 98 bytes, Stack size 48 bytes, task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFull_LCD
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_GetValueDivideUnit
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>

<P><STRONG><a name="[389]"></a>Disp_EndSession</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFull_LCD
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>

<P><STRONG><a name="[38a]"></a>Disp_MalfunctionError</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFull_LCD
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_GetErrorCode
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>

<P><STRONG><a name="[38c]"></a>Disp_CmdOutOfSequence</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFull_LCD
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>

<P><STRONG><a name="[1d0]"></a>Vmc_HandleReaderMsg</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208 + Unknown Stack Size
<LI>Call Chain = Vmc_HandleReaderMsg &rArr; SetTouBiStat &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trace_R
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTouBiStat
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_GetFundsMultiplyUnit
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_EndSessionHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vmc_PendFromReader
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKB
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskBTest
</UL>

<P><STRONG><a name="[1e2]"></a>Vmc_PendFromReader</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1240 + Unknown Stack Size
<LI>Call Chain = Vmc_PendFromReader &rArr; Vmc_HandleReaderMsg &rArr; SetTouBiStat &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vmc_HandleReaderMsg
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPend
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKB
</UL>

<P><STRONG><a name="[38e]"></a>TaskBTest</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vmc_PostToReader
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vmc_HandleReaderMsg
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPend
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_GetKey
</UL>

<P><STRONG><a name="[390]"></a>TaskCTest</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_MainProc
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_InitPara
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPend
</UL>

<P><STRONG><a name="[22d]"></a>Trace_R</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, reader.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mdb_Session
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mdb_TransmitByte
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vmc_HandleReaderMsg
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_InitPara
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReaderTest
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_PrintStat
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_Proc
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_UpdatePollMsg
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_MalfunctionError
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_VendApproved
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_BeginSession
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_UpdateConfigData
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_ReaderCancel
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_ReaderEnable
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_ReaderDisable
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_SessionComplete
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_VendFailure
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_VendSuccess
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_VendCancel
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_VendRequest
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_Poll
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_SetupMaxMinPrice
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_SetupConfigData
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_Reset
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_GetValueDivideUnit
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_GetKey
</UL>

<P><STRONG><a name="[3a4]"></a>Reader_SetComErr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, reader.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_Proc
</UL>

<P><STRONG><a name="[3a5]"></a>Reader_ClrComErr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, reader.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_Proc
</UL>

<P><STRONG><a name="[1a7]"></a>Reader_IsComErr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, reader.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKC
</UL>

<P><STRONG><a name="[1df]"></a>Vmc_PostToReader</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, reader.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Vmc_PostToReader &rArr; OSMboxPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoChuhuoMsg
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKB
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskBTest
</UL>

<P><STRONG><a name="[391]"></a>Reader_PostToVmc</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, reader.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Reader_PostToVmc &rArr; OSMboxPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
</UL>
<BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_UpdatePollMsg
</UL>

<P><STRONG><a name="[1d6]"></a>Reader_GetFundsMultiplyUnit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, reader.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vmc_HandleReaderMsg
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyProcess
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoChuhuoMsg
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKB
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_BeginSession
</UL>

<P><STRONG><a name="[387]"></a>Reader_GetValueDivideUnit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, reader.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Reader_GetValueDivideUnit
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trace_R
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_MainProc
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_VendDenied
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_VendApproved
</UL>

<P><STRONG><a name="[1e1]"></a>Reader_SetItemValue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, reader.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKB
</UL>

<P><STRONG><a name="[38b]"></a>Reader_GetErrorCode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, reader.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_MalfunctionError
</UL>

<P><STRONG><a name="[392]"></a>Reader_Reset</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, reader.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Reader_Reset &rArr; Mdb_Session &rArr; Uart2_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trace_R
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mdb_Session
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_MainProc
</UL>

<P><STRONG><a name="[393]"></a>Reader_SetupConfigData</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, reader.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Reader_SetupConfigData &rArr; Mdb_Session &rArr; Uart2_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trace_R
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mdb_Session
</UL>
<BR>[Address Reference Count : 1]<UL><LI> reader.o(.text)
</UL>
<P><STRONG><a name="[394]"></a>Reader_SetupMaxMinPrice</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, reader.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Reader_SetupMaxMinPrice &rArr; Mdb_Session &rArr; Uart2_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trace_R
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mdb_Session
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_MainProc
</UL>

<P><STRONG><a name="[395]"></a>Reader_Poll</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, reader.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Reader_Poll &rArr; Mdb_Session &rArr; Uart2_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trace_R
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mdb_Session
</UL>
<BR>[Address Reference Count : 1]<UL><LI> reader.o(.text)
</UL>
<P><STRONG><a name="[396]"></a>Reader_VendRequest</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, reader.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Reader_VendRequest &rArr; Mdb_Session &rArr; Uart2_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trace_R
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mdb_Session
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_MainProc
</UL>

<P><STRONG><a name="[397]"></a>Reader_VendCancel</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, reader.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trace_R
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mdb_Session
</UL>

<P><STRONG><a name="[398]"></a>Reader_VendSuccess</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, reader.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Reader_VendSuccess &rArr; Mdb_Session &rArr; Uart2_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trace_R
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mdb_Session
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_MainProc
</UL>

<P><STRONG><a name="[399]"></a>Reader_VendFailure</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, reader.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Reader_VendFailure &rArr; Mdb_Session &rArr; Uart2_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trace_R
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mdb_Session
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_MainProc
</UL>

<P><STRONG><a name="[39a]"></a>Reader_SessionComplete</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, reader.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Reader_SessionComplete &rArr; Mdb_Session &rArr; Uart2_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trace_R
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mdb_Session
</UL>
<BR>[Address Reference Count : 1]<UL><LI> reader.o(.text)
</UL>
<P><STRONG><a name="[39b]"></a>Reader_ReaderDisable</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, reader.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Reader_ReaderDisable &rArr; Mdb_Session &rArr; Uart2_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trace_R
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mdb_Session
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_MainProc
</UL>

<P><STRONG><a name="[39c]"></a>Reader_ReaderEnable</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, reader.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Reader_ReaderEnable &rArr; Mdb_Session &rArr; Uart2_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trace_R
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mdb_Session
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_MainProc
</UL>

<P><STRONG><a name="[39d]"></a>Reader_ReaderCancel</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, reader.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Reader_ReaderCancel &rArr; Mdb_Session &rArr; Uart2_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trace_R
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mdb_Session
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_MainProc
</UL>

<P><STRONG><a name="[39e]"></a>Reader_UpdateConfigData</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, reader.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Reader_UpdateConfigData
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trace_R
</UL>
<BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_UpdatePollMsg
</UL>

<P><STRONG><a name="[39f]"></a>Reader_BeginSession</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, reader.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Reader_BeginSession
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trace_R
</UL>
<BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_UpdatePollMsg
</UL>

<P><STRONG><a name="[3a0]"></a>Reader_VendApproved</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, reader.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Reader_VendApproved
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trace_R
</UL>
<BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_UpdatePollMsg
</UL>

<P><STRONG><a name="[3a1]"></a>Reader_MalfunctionError</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, reader.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Reader_MalfunctionError
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trace_R
</UL>
<BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_UpdatePollMsg
</UL>

<P><STRONG><a name="[3a2]"></a>Reader_UpdatePollMsg</STRONG> (Thumb, 978 bytes, Stack size 16 bytes, reader.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Reader_UpdatePollMsg &rArr; Reader_PostToVmc &rArr; OSMboxPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trace_R
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_MalfunctionError
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_VendApproved
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_BeginSession
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_UpdateConfigData
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_PostToVmc
</UL>
<BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_Proc
</UL>

<P><STRONG><a name="[3a3]"></a>Reader_Proc</STRONG> (Thumb, 132 bytes, Stack size 56 bytes, reader.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = Reader_Proc &rArr; Reader_UpdatePollMsg &rArr; Reader_PostToVmc &rArr; OSMboxPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trace_R
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mdb_ErrJudge
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mdb_ReadBuf
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_UpdatePollMsg
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_ClrComErr
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_SetComErr
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_MainProc
</UL>

<P><STRONG><a name="[3a6]"></a>Reader_PrintStat</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, reader.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Reader_PrintStat
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trace_R
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_MainProc
</UL>

<P><STRONG><a name="[38f]"></a>Reader_GetKey</STRONG> (Thumb, 124 bytes, Stack size 48 bytes, reader.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trace_R
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReaderTest
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskBTest
</UL>

<P><STRONG><a name="[1a6]"></a>Reader_MainProc</STRONG> (Thumb, 1216 bytes, Stack size 16 bytes, reader.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = Reader_MainProc &rArr; Reader_Proc &rArr; Reader_UpdatePollMsg &rArr; Reader_PostToVmc &rArr; OSMboxPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_PrintStat
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_Proc
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_ReaderCancel
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_ReaderEnable
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_ReaderDisable
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_VendFailure
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_VendSuccess
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_VendRequest
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_SetupMaxMinPrice
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_Reset
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_GetValueDivideUnit
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKC
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReaderTest
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskCTest
</UL>

<P><STRONG><a name="[1a4]"></a>Reader_InitPara</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, reader.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Reader_InitPara
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trace_R
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKC
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReaderTest
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskCTest
</UL>

<P><STRONG><a name="[38d]"></a>Reader_EndSessionHandle</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, reader.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vmc_HandleReaderMsg
</UL>

<P><STRONG><a name="[3a7]"></a>ReaderTest</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, reader.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trace_R
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_MainProc
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_InitPara
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_GetKey
</UL>

<P><STRONG><a name="[1b2]"></a>ACDCModuleQuery</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, acdc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1240 + Unknown Stack Size
<LI>Call Chain = ACDCModuleQuery &rArr; SelectKey_Command_1 &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectKey_Command_1
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKC
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACDCModuleTest
</UL>

<P><STRONG><a name="[3a9]"></a>ACDCModuleTest</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, acdc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trace
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACDCModuleQuery
</UL>

<P><STRONG><a name="[1f8]"></a>pinInit</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, lpc1700pincfg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4c3]"></a>pconpInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lpc1700pincfg.o(.text), UNUSED)

<P><STRONG><a name="[123]"></a>defaultVectorHandle</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, target.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vector_table.o(.constdata)
</UL>
<P><STRONG><a name="[1f7]"></a>targetInit</STRONG> (Thumb, 354 bytes, Stack size 8 bytes, target.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = targetInit &rArr; zyIsrSet
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyIsrSet
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyIrqEnable
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyIrqDisable
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyIfInit
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3ab]"></a>zyIfInit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, zy_if.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;targetInit
</UL>

<P><STRONG><a name="[4c4]"></a>zyReset</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, zy_if.o(.text), UNUSED)

<P><STRONG><a name="[3aa]"></a>zyIrqDisable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, zy_if.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyIsrSet
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;targetInit
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Feed
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyThreadDel
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyHeapFree
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyHeapMalloc
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyIsrEnable
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__s_zyIsrDisable
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__s_zyIsrClr
</UL>

<P><STRONG><a name="[223]"></a>zyIrqEnable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, zy_if.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyIsrSet
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EINT2_Init
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;targetInit
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_timer
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Feed
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3_Init
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_Init
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_Init
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Init
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_Init
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyThreadDel
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyHeapFree
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyHeapMalloc
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyIsrEnable
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__s_zyIsrDisable
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__s_zyIsrClr
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDev_Init
</UL>

<P><STRONG><a name="[222]"></a>zyIsrSet</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, zy_if.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = zyIsrSet
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyIrqEnable
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeToUSRMode
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyIrqDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EINT2_Init
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;targetInit
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_timer
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3_Init
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_Init
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_Init
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_Init
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStartHighRdy
</UL>

<P><STRONG><a name="[3ad]"></a>__s_zyIsrClr</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, zy_if.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyIrqEnable
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeToUSRMode
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyIrqDisable
</UL>

<P><STRONG><a name="[3ae]"></a>__s_zyIsrDisable</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, zy_if.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyIrqEnable
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeToUSRMode
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyIrqDisable
</UL>

<P><STRONG><a name="[3af]"></a>zyIsrEnable</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, zy_if.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyIrqEnable
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeToUSRMode
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyIrqDisable
</UL>

<P><STRONG><a name="[3b0]"></a>zyHeapMalloc</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, zy_if.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyIrqEnable
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyIrqDisable
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyMsgCreate
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyThreadCreate
</UL>

<P><STRONG><a name="[3b2]"></a>zyHeapFree</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, zy_if.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyIrqEnable
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyIrqDisable
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyMsgDel
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyMsgCreate
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyThreadDel
</UL>

<P><STRONG><a name="[3b4]"></a>zyThreadCreate</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, zy_if.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyHeapMalloc
</UL>

<P><STRONG><a name="[3b8]"></a>zyThreadGetCurId</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, zy_if.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyThreadDel
</UL>

<P><STRONG><a name="[3b7]"></a>zyThreadDel</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, zy_if.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyIrqEnable
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyThreadGetCurId
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyHeapFree
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyIrqDisable
</UL>

<P><STRONG><a name="[3b9]"></a>zyThreadSuspendSelf</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, zy_if.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
</UL>

<P><STRONG><a name="[3bb]"></a>zyThreadResume</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, zy_if.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
</UL>

<P><STRONG><a name="[4c5]"></a>zyThreadSuspendCheck</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, zy_if.o(.text), UNUSED)

<P><STRONG><a name="[3bd]"></a>zyThreadDelay</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, zy_if.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>

<P><STRONG><a name="[3be]"></a>zySemCreate</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, zy_if.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
</UL>

<P><STRONG><a name="[3bf]"></a>zySemDel</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, zy_if.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
</UL>

<P><STRONG><a name="[3c1]"></a>zySemAccept</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, zy_if.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemAccept
</UL>

<P><STRONG><a name="[3c3]"></a>zySemPend</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, zy_if.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>

<P><STRONG><a name="[3c4]"></a>zySemPost</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, zy_if.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>

<P><STRONG><a name="[3c5]"></a>zyMsgCreate</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, zy_if.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQDel
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemCreate
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyHeapFree
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyHeapMalloc
</UL>

<P><STRONG><a name="[3c8]"></a>zyMsgDel</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, zy_if.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQDel
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyHeapFree
</UL>

<P><STRONG><a name="[3c9]"></a>zyMsgAccept</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, zy_if.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQAccept
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemPut
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[3cb]"></a>zyMsgPend</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, zy_if.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemPut
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[3cc]"></a>zyMsgPost</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, zy_if.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostOpt
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemPut
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemGet
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[172]"></a>_sys_exit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_sys_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[480]"></a>_ttywrch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rt_sys_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[4c6]"></a>_sys_open</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_sys_c.o(.text), UNUSED)

<P><STRONG><a name="[4c7]"></a>_sys_close</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_sys_c.o(.text), UNUSED)

<P><STRONG><a name="[4c8]"></a>_sys_read</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rt_sys_c.o(.text), UNUSED)

<P><STRONG><a name="[4c9]"></a>_sys_write</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rt_sys_c.o(.text), UNUSED)

<P><STRONG><a name="[4ca]"></a>_sys_ensure</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rt_sys_c.o(.text), UNUSED)

<P><STRONG><a name="[4cb]"></a>_sys_flen</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_sys_c.o(.text), UNUSED)

<P><STRONG><a name="[4cc]"></a>_sys_seek</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_sys_c.o(.text), UNUSED)

<P><STRONG><a name="[4cd]"></a>_sys_istty</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_sys_c.o(.text), UNUSED)

<P><STRONG><a name="[4ce]"></a>_sys_tmpnam</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rt_sys_c.o(.text), UNUSED)

<P><STRONG><a name="[4cf]"></a>_sys_command_string</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rt_sys_c.o(.text), UNUSED)

<P><STRONG><a name="[4d0]"></a>clock</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_sys_c.o(.text), UNUSED)

<P><STRONG><a name="[3cf]"></a>time</STRONG> (Thumb, 24 bytes, Stack size 56 bytes, rt_sys_c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
</UL>

<P><STRONG><a name="[4d1]"></a>remove</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_sys_c.o(.text), UNUSED)

<P><STRONG><a name="[4d2]"></a>rename</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_sys_c.o(.text), UNUSED)

<P><STRONG><a name="[4d3]"></a>system</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rt_sys_c.o(.text), UNUSED)

<P><STRONG><a name="[1cb]"></a>OSMboxAccept</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, os_mbox.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OSMboxAccept
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionDoLEDTest
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionDoTempsTest
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HopperTest
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HopperTest_Old
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionDemo8
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionDemo7
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChannelTest
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VP_CMD_Opt
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTouBiStat
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoPayOutMsg
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoNoteStackMsg
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoNoteReturnMsg
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoDingshiMsg
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoChuhuoMsg
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKB
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_VP_CMD_ChuhuoMsg
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_VP_CMD_PayoutMsg
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoHopperOutMsg
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoCoinOutMsg
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VP_CMD_Payout
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VP_CMD_Reset
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VP_CMD_Cost
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VP_CMD_Vendout
</UL>

<P><STRONG><a name="[177]"></a>OSMboxCreate</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, os_mbox.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OSMboxCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventWaitListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateMbox
</UL>

<P><STRONG><a name="[3d2]"></a>OSMboxDel</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, os_mbox.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
</UL>

<P><STRONG><a name="[1a5]"></a>OSMboxPend</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, os_mbox.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OSMboxPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskWait
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTO
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionIRTest
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HopperTest
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HopperTest_Old
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionDemo8
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionDemo7
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChannelTest
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vmc_PendFromReader
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VP_CMD_Opt
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTouBiStat
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoPayOutMsg
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoNoteStackMsg
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoNoteReturnMsg
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoDingshiMsg
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoChuhuoMsg
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKB
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKC
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_VP_CMD_ChuhuoMsg
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_VP_CMD_PayoutMsg
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoHopperOutMsg
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoCoinOutMsg
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskCTest
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskBTest
</UL>

<P><STRONG><a name="[189]"></a>OSMboxPost</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, os_mbox.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = OSMboxPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionDoLEDTest
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionDoTempsTest
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionIRTest
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HopperTest
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HopperTest_Old
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChannelTest
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vmc_PostToReader
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VP_CMD_Opt
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTouBiStat
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HopperPayoutCmd
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvOutCommand
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvCheckCommand
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoPayOutMsg
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoNoteStackMsg
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoNoteReturnMsg
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoDingshiMsg
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoChuhuoMsg
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKB
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKC
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_CoinPlus
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Changer_UpDateSysPara
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_EscrowProc
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_StackProc
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_ReturnProc
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_VP_CMD_ChuhuoMsg
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_VP_CMD_PayoutMsg
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoHopperOutMsg
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoCoinOutMsg
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_PostToVmc
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VP_CMD_Payout
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VP_CMD_Reset
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VP_CMD_Cost
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VP_CMD_Vendout
</UL>

<P><STRONG><a name="[3d7]"></a>OSMboxPostOpt</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, os_mbox.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
</UL>

<P><STRONG><a name="[4d4]"></a>OSMboxQuery</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, os_mbox.o(.text), UNUSED)

<P><STRONG><a name="[3c6]"></a>OSMemCreate</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, os_mem.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyMsgCreate
</UL>

<P><STRONG><a name="[3cd]"></a>OSMemGet</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, os_mem.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyMsgPost
</UL>

<P><STRONG><a name="[3ca]"></a>OSMemPut</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, os_mem.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyMsgPost
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyMsgPend
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyMsgAccept
</UL>

<P><STRONG><a name="[4d5]"></a>OSMemQuery</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, os_mem.o(.text), UNUSED)

<P><STRONG><a name="[3ee]"></a>OS_MemInit</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, os_mem.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[1ca]"></a>OSQAccept</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, os_q.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OSQAccept
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionTESTCHIN
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKB
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyMsgAccept
</UL>

<P><STRONG><a name="[178]"></a>OSQCreate</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, os_q.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OSQCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventWaitListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateMbox
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyMsgCreate
</UL>

<P><STRONG><a name="[3c7]"></a>OSQDel</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
</UL>
<BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyMsgDel
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyMsgCreate
</UL>

<P><STRONG><a name="[1da]"></a>OSQFlush</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, os_q.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OSQFlush
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKB
</UL>

<P><STRONG><a name="[187]"></a>OSQPend</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, os_q.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OSQPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskWait
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTO
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionDoLEDTest
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionDoTempsTest
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionDoXuanhuoTest
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionDemo8
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionDemo7
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionTESTCHIN
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKB
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_CoinPlus
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPSynGoodsCol
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPChangeColPrice
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPAddSingleColGoods
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPAddChanges
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyMsgPend
</UL>

<P><STRONG><a name="[1a9]"></a>OSQPost</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, os_q.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = OSQPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coin_Accept
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadKey
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKC
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_ReturnProc
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_StackProc
</UL>

<P><STRONG><a name="[3d8]"></a>OSQPostFront</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
</UL>

<P><STRONG><a name="[3ce]"></a>OSQPostOpt</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
</UL>
<BR>[Called By]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyMsgPost
</UL>

<P><STRONG><a name="[4d6]"></a>OSQQuery</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, os_q.o(.text), UNUSED)

<P><STRONG><a name="[3ef]"></a>OS_QInit</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, os_q.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_QInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[3c2]"></a>OSSemAccept</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, os_sem.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zySemAccept
</UL>

<P><STRONG><a name="[176]"></a>OSSemCreate</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, os_sem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OSSemCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventWaitListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateMbox
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zySemCreate
</UL>

<P><STRONG><a name="[3c0]"></a>OSSemDel</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, os_sem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
</UL>
<BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zySemDel
</UL>

<P><STRONG><a name="[1c8]"></a>OSSemPend</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, os_sem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskWait
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTO
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VP_CMD_Opt
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKB
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zySemPend
</UL>

<P><STRONG><a name="[1a1]"></a>OSSemPost</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, os_sem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKC
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zySemPost
</UL>

<P><STRONG><a name="[4d7]"></a>OSSemQuery</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, os_sem.o(.text), UNUSED)

<P><STRONG><a name="[3d9]"></a>OSTaskChangePrio</STRONG> (Thumb, 312 bytes, Stack size 40 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[1fb]"></a>OSTaskCreate</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = OSTaskCreate &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkInit
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyThreadCreate
</UL>

<P><STRONG><a name="[18b]"></a>OSTaskCreateExt</STRONG> (Thumb, 178 bytes, Stack size 72 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkInit
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK0
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCoinplusTask
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskIdle
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskStat
</UL>

<P><STRONG><a name="[174]"></a>OSTaskDel</STRONG> (Thumb, 296 bytes, Stack size 24 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = OSTaskDel &rArr; OS_FlagUnlink
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagUnlink
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Dummy
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDelHook
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK0
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyThreadDel
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskEntry
</UL>

<P><STRONG><a name="[4d8]"></a>OSTaskDelReq</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, os_task.o(.text), UNUSED)

<P><STRONG><a name="[3bc]"></a>OSTaskResume</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyThreadResume
</UL>

<P><STRONG><a name="[4d9]"></a>OSTaskStkChk</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, os_task.o(.text), UNUSED)

<P><STRONG><a name="[3ba]"></a>OSTaskSuspend</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyThreadSuspendSelf
</UL>

<P><STRONG><a name="[3df]"></a>OSTaskQuery</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[188]"></a>OSTimeDly</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, os_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionDoLEDTest
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionDoTempsTest
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionDoXuanhuoTest
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionDoTempeTest
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionDOLCDTest
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionLCDTest
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionIRTest
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionAllCHResult
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HopperTest
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionAddGoods
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionCHLF
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionTESTCHIN
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionPW
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionPWAdmin
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionPW3
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionPW2
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mdb_Session
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pitu_LCDInit
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VP_CMD_Opt
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HopperPayoutCmd
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvCheckCommand
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoChuhuoMsg
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispVersionText
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispLessText
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispInputText
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispIOUText
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispErrText
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispEndText
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispChaxunText
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispChangeText
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispBeginText
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_PollProc
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckDriverStat
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Changer_Payout
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Changer_Init
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK0
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKB
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKC
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_DEXServer
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_CoinPlus
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITLMsgPackSend
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITLBusTxMsg
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Changer_UpDateLeftAmount
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_PackAnalysis
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_ReturnProc
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_StackProc
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinAcceptor_UpDateTubeStat
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITLMission_Init
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_PackAnalysis
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_EscrowProc
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_StackProc
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoin_PayoutProc
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoin_Payout2
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoin_Payout3
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoin_InitProc
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gbahr1_Command
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbNote_InitProc
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hopper_PayoutProc
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hoppern_Payout
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hopper_InitProc
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hopper_Command
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Dispense
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Command
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3IsRxBufNull
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_VP_CMD_ChuhuoMsg
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPSynGoodsCol
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPChangeColPrice
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPAddSingleColGoods
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPAddLayerColGoods
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPAddChanges
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPAddAllColGoods
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyThreadDelay
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACDCModuleTest
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectKey_Command_1
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReaderTest
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskCTest
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_CmdOutOfSequence
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_MalfunctionError
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_EndSession
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_VendDenied
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_VendApproved
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_BeginSession
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1IsRxBufNull
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectKey_Command
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPCountCoin
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITLMission_Init_1
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
</UL>

<P><STRONG><a name="[3e0]"></a>OSTimeDlyHMSM</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, os_time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>

<P><STRONG><a name="[3e1]"></a>OSTimeDlyResume</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, os_time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[4da]"></a>OSTimeGet</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, os_time.o(.text), UNUSED)

<P><STRONG><a name="[4db]"></a>OSTimeSet</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, os_time.o(.text), UNUSED)

<P><STRONG><a name="[3e2]"></a>OS_TaskStat</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_TaskStat &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStatHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_core.o(.text)
</UL>
<P><STRONG><a name="[3e5]"></a>OS_TaskIdle</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskIdleHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_core.o(.text)
</UL>
<P><STRONG><a name="[1fa]"></a>OSInit</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = OSInit &rArr; OS_InitTaskIdle &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagInit
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHookEnd
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHookBegin
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitMisc
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitRdyList
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTCBList
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitEventList
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskIdle
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskStat
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QInit
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemInit
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[21f]"></a>OSIntEnter</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_IRQHandler
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EINT2_IRQHandler
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_IRQHandler
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3_IRQHandler
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_IRQHandler
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sysTickIsr
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_IRQHandler
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GenIntHandler
</UL>

<P><STRONG><a name="[220]"></a>OSIntExit</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntCtxSw
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_IRQHandler
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EINT2_IRQHandler
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_IRQHandler
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3_IRQHandler
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_IRQHandler
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sysTickIsr
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_IRQHandler
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GenIntHandler
</UL>

<P><STRONG><a name="[3b5]"></a>OSSchedLock</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyThreadDel
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyThreadCreate
</UL>

<P><STRONG><a name="[3d4]"></a>OS_Sched</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPend
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostOpt
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQDel
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagDel
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyResume
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskChangePrio
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostFront
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPostOpt
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxDel
</UL>

<P><STRONG><a name="[3b6]"></a>OSSchedUnlock</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyThreadDel
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyThreadCreate
</UL>

<P><STRONG><a name="[1fc]"></a>OSStart</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OSStart &rArr; OSStartHighRdy &rArr; zyIsrSet
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStartHighRdy
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3f3]"></a>OSStatInit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>

<P><STRONG><a name="[3f4]"></a>OSTimeTick</STRONG> (Thumb, 240 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTimeTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTickHook
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sysTickIsr
</UL>

<P><STRONG><a name="[4dc]"></a>OSVersion</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, os_core.o(.text), UNUSED)

<P><STRONG><a name="[3dd]"></a>OS_Dummy</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[3d3]"></a>OS_EventTaskRdy</STRONG> (Thumb, 180 bytes, Stack size 28 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = OS_EventTaskRdy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostOpt
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQDel
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostFront
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPostOpt
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxDel
</UL>

<P><STRONG><a name="[3d5]"></a>OS_EventTaskWait</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPend
</UL>

<P><STRONG><a name="[3d6]"></a>OS_EventTO</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPend
</UL>

<P><STRONG><a name="[3d1]"></a>OS_EventWaitListInit</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxCreate
</UL>

<P><STRONG><a name="[3db]"></a>OS_TCBInit</STRONG> (Thumb, 222 bytes, Stack size 40 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateHook
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTCBInitHook
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>

<P><STRONG><a name="[4dd]"></a>OSFlagAccept</STRONG> (Thumb, 260 bytes, Stack size 32 bytes, os_flag.o(.text), UNUSED)

<P><STRONG><a name="[4de]"></a>OSFlagCreate</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, os_flag.o(.text), UNUSED)

<P><STRONG><a name="[3dc]"></a>OS_FlagUnlink</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, os_flag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OS_FlagUnlink
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagTaskRdy
</UL>

<P><STRONG><a name="[3f9]"></a>OSFlagDel</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagTaskRdy
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[3fa]"></a>OSFlagPend</STRONG> (Thumb, 522 bytes, Stack size 64 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagBlock
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagUnlink
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[3fc]"></a>OSFlagPost</STRONG> (Thumb, 270 bytes, Stack size 40 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagTaskRdy
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[4df]"></a>OSFlagQuery</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, os_flag.o(.text), UNUSED)

<P><STRONG><a name="[3ed]"></a>OS_FlagInit</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, os_flag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_FlagInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[126]"></a>__sysTickIsr</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, os_cpu_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __sysTickIsr &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
</UL>
<BR>[Address Reference Count : 2]<UL><LI> vector_table.o(.constdata)
<LI> os_cpu_c.o(.text)
</UL>
<P><STRONG><a name="[3f2]"></a>OSStartHighRdy</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, os_cpu_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OSStartHighRdy &rArr; zyIsrSet
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyIsrSet
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__OSStartHighRdy
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
</UL>

<P><STRONG><a name="[3f1]"></a>OSIntCtxSw</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>

<P><STRONG><a name="[3da]"></a>OSTaskStkInit</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, os_cpu_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OSTaskStkInit
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>

<P><STRONG><a name="[401]"></a>getUartNum</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, lpc17xx_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetupCbs
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GenIntHandler
</UL>

<P><STRONG><a name="[3fe]"></a>uart_set_divisors</STRONG> (Thumb, 370 bytes, Stack size 64 bytes, lpc17xx_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = uart_set_divisors &rArr; CLKPWR_GetPCLK
</UL>
<BR>[Calls]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_GetPCLK
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[400]"></a>UART_GenIntHandler</STRONG> (Thumb, 278 bytes, Stack size 32 bytes, lpc17xx_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_GenIntHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getUartNum
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_StdIntHandler
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_StdIntHandler
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_StdIntHandler
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_StdIntHandler
</UL>

<P><STRONG><a name="[402]"></a>UART_TxCmd</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, lpc17xx_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_TxCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDev_Init
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DeInit
</UL>

<P><STRONG><a name="[404]"></a>UART_DeInit</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, lpc17xx_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_DeInit &rArr; UART_TxCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_ConfigPPWR
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDev_UnInit
</UL>

<P><STRONG><a name="[405]"></a>UART_Init</STRONG> (Thumb, 548 bytes, Stack size 16 bytes, lpc17xx_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = UART_Init &rArr; uart_set_divisors &rArr; CLKPWR_GetPCLK
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_ConfigPPWR
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_divisors
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureUart
</UL>

<P><STRONG><a name="[4e0]"></a>UART_ConfigStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lpc17xx_uart.o(.text), UNUSED)

<P><STRONG><a name="[406]"></a>UART_SendData</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lpc17xx_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send
</UL>

<P><STRONG><a name="[407]"></a>UART_ReceiveData</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, lpc17xx_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_ReceiveData
</UL>
<BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive
</UL>

<P><STRONG><a name="[408]"></a>UART_ForceBreak</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, lpc17xx_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[409]"></a>UART_IrDAInvtInputCmd</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, lpc17xx_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[40a]"></a>UART_IrDACmd</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, lpc17xx_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[40b]"></a>UART_IrDAPulseDivConfig</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, lpc17xx_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[40c]"></a>UART_IntConfig</STRONG> (Thumb, 276 bytes, Stack size 24 bytes, lpc17xx_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_IntConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxCallBack
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDev_BufTx
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDev_Init
</UL>

<P><STRONG><a name="[40d]"></a>UART_GetLineStatus</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, lpc17xx_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_GetLineStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDev_BufTx
</UL>

<P><STRONG><a name="[4e1]"></a>UART_CheckBusy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lpc17xx_uart.o(.text), UNUSED)

<P><STRONG><a name="[40e]"></a>UART_FIFOConfig</STRONG> (Thumb, 254 bytes, Stack size 16 bytes, lpc17xx_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[4e2]"></a>UART_FIFOConfigStructInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lpc17xx_uart.o(.text), UNUSED)

<P><STRONG><a name="[40f]"></a>UART_ABCmd</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, lpc17xx_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[410]"></a>UART_FullModemForcePinState</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, lpc17xx_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[411]"></a>UART_FullModemConfigMode</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, lpc17xx_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[412]"></a>UART_FullModemGetStatus</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lpc17xx_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[413]"></a>UART_RS485Config</STRONG> (Thumb, 316 bytes, Stack size 16 bytes, lpc17xx_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[4e3]"></a>UART_RS485ReceiverCmd</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, lpc17xx_uart.o(.text), UNUSED)

<P><STRONG><a name="[414]"></a>UART_Send</STRONG> (Thumb, 150 bytes, Stack size 56 bytes, lpc17xx_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = UART_Send &rArr; UART_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxCallBack
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDev_BufTx
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RS485Send
</UL>

<P><STRONG><a name="[415]"></a>UART_RS485Send</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, lpc17xx_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RS485SendData
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RS485SendSlvAddr
</UL>

<P><STRONG><a name="[416]"></a>UART_RS485SendSlvAddr</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lpc17xx_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RS485Send
</UL>

<P><STRONG><a name="[417]"></a>UART_RS485SendData</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lpc17xx_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RS485Send
</UL>

<P><STRONG><a name="[418]"></a>UART_Receive</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, lpc17xx_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART_Receive &rArr; UART_ReceiveData
</UL>
<BR>[Calls]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReceiveData
</UL>
<BR>[Called By]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartRxCallBack
</UL>

<P><STRONG><a name="[419]"></a>UART_SetupCbs</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, lpc17xx_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UART_SetupCbs
</UL>
<BR>[Calls]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getUartNum
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDev_Init
</UL>

<P><STRONG><a name="[129]"></a>UART0_StdIntHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lpc17xx_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART0_StdIntHandler &rArr; UART_GenIntHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GenIntHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vector_table.o(.constdata)
</UL>
<P><STRONG><a name="[41a]"></a>UART1_StdIntHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lpc17xx_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GenIntHandler
</UL>

<P><STRONG><a name="[41b]"></a>UART2_StdIntHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lpc17xx_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GenIntHandler
</UL>

<P><STRONG><a name="[41c]"></a>UART3_StdIntHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lpc17xx_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GenIntHandler
</UL>

<P><STRONG><a name="[41e]"></a>atomic_incr</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, uartdev_lpc17xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartRxCallBack
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxCallBack
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDev_BufRx
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDev_BufTx
</UL>

<P><STRONG><a name="[41d]"></a>UartTxCallBack</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, uartdev_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UartTxCallBack &rArr; UART_Send &rArr; UART_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_incr
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IntConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uartdev_lpc17xx.o(.text)
</UL>
<P><STRONG><a name="[41f]"></a>UartRxCallBack</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, uartdev_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UartRxCallBack &rArr; UART_Receive &rArr; UART_ReceiveData
</UL>
<BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_incr
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uartdev_lpc17xx.o(.text)
</UL>
<P><STRONG><a name="[423]"></a>UART0_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, uartdev_lpc17xx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_StdIntHandler
</UL>

<P><STRONG><a name="[26e]"></a>CLKPWR_SetPCLKDiv</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, lpc17xx_clkpwr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLKPWR_SetPCLKDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Init
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3_Init
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_Init
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_Init
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Init
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_SetTimeOut
</UL>

<P><STRONG><a name="[424]"></a>CLKPWR_GetPCLKSEL</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, lpc17xx_clkpwr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_GetPCLK
</UL>

<P><STRONG><a name="[3ff]"></a>CLKPWR_GetPCLK</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lpc17xx_clkpwr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLKPWR_GetPCLK
</UL>
<BR>[Calls]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_GetPCLKSEL
</UL>
<BR>[Called By]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_divisors
</UL>

<P><STRONG><a name="[26d]"></a>CLKPWR_ConfigPPWR</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, lpc17xx_clkpwr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3_Init
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_Init
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_Init
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Init
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DeInit
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_DeInit
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[4e4]"></a>CLKPWR_Sleep</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lpc17xx_clkpwr.o(.text), UNUSED)

<P><STRONG><a name="[4e5]"></a>CLKPWR_DeepSleep</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lpc17xx_clkpwr.o(.text), UNUSED)

<P><STRONG><a name="[4e6]"></a>CLKPWR_PowerDown</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lpc17xx_clkpwr.o(.text), UNUSED)

<P><STRONG><a name="[4e7]"></a>CLKPWR_DeepPowerDown</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lpc17xx_clkpwr.o(.text), UNUSED)

<P><STRONG><a name="[403]"></a>check_failed</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lpc17xx_libcfg_default.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Init
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteGPREG
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ReadGPREG
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RS485Config
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_FullModemGetStatus
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_FullModemConfigMode
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_FullModemForcePinState
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ABCmd
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_FIFOConfig
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetLineStatus
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IntConfig
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IrDAPulseDivConfig
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IrDACmd
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IrDAInvtInputCmd
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ForceBreak
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReceiveData
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendData
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DeInit
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxCmd
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CalibConfig
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CalibCounterCmd
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClearIntPending
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetIntPending
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetFullAlarmTime
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetFullAlarmTime
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarmTime
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetFullTime
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetFullTime
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_AlarmIntConfig
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CntIncrIntConfig
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Cmd
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ResetClockTickCounter
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_DeInit
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[425]"></a>PINSEL_SetPinFunc</STRONG> (Thumb, 60 bytes, Stack size 20 bytes, lpc17xx_pinsel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PINSEL_SetPinFunc
</UL>
<BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_ConfigPin
</UL>

<P><STRONG><a name="[4e8]"></a>PINSEL_ConfigTraceFunc</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, lpc17xx_pinsel.o(.text), UNUSED)

<P><STRONG><a name="[426]"></a>PINSEL_SetResistorMode</STRONG> (Thumb, 62 bytes, Stack size 20 bytes, lpc17xx_pinsel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PINSEL_SetResistorMode
</UL>
<BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_ConfigPin
</UL>

<P><STRONG><a name="[427]"></a>PINSEL_SetOpenDrainMode</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, lpc17xx_pinsel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PINSEL_SetOpenDrainMode
</UL>
<BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_ConfigPin
</UL>

<P><STRONG><a name="[4e9]"></a>PINSEL_SetI2C0Pins</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lpc17xx_pinsel.o(.text), UNUSED)

<P><STRONG><a name="[421]"></a>PINSEL_ConfigPin</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lpc17xx_pinsel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = PINSEL_ConfigPin &rArr; PINSEL_SetResistorMode
</UL>
<BR>[Calls]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_SetOpenDrainMode
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_SetResistorMode
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_SetPinFunc
</UL>
<BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigurePins
</UL>

<P><STRONG><a name="[18c]"></a>GPIO_SetDir</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, lpc17xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadKey
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyValue
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitKey
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSelectKey
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKC
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_SetDir
</UL>

<P><STRONG><a name="[18d]"></a>GPIO_SetValue</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lpc17xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_SetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadKey
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSelectKey
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKC
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_SetValue
</UL>

<P><STRONG><a name="[1f9]"></a>GPIO_ClearValue</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lpc17xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_ClearValue
</UL>
<BR>[Calls]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadKey
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyValue
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitKey
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSelectKey
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_ClearValue
</UL>

<P><STRONG><a name="[21c]"></a>GPIO_ReadValue</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lpc17xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_ReadValue
</UL>
<BR>[Calls]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyValue
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_ReadValue
</UL>

<P><STRONG><a name="[429]"></a>FIO_SetDir</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
</UL>

<P><STRONG><a name="[42a]"></a>FIO_SetValue</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
</UL>

<P><STRONG><a name="[42b]"></a>FIO_ClearValue</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
</UL>

<P><STRONG><a name="[42c]"></a>FIO_ReadValue</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadValue
</UL>

<P><STRONG><a name="[42d]"></a>FIO_SetMask</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPointer
</UL>

<P><STRONG><a name="[42e]"></a>FIO_HalfWordSetDir</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_HalfWordGetPointer
</UL>

<P><STRONG><a name="[430]"></a>FIO_HalfWordSetMask</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_HalfWordGetPointer
</UL>

<P><STRONG><a name="[431]"></a>FIO_HalfWordSetValue</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_HalfWordGetPointer
</UL>

<P><STRONG><a name="[432]"></a>FIO_HalfWordClearValue</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_HalfWordGetPointer
</UL>

<P><STRONG><a name="[433]"></a>FIO_HalfWordReadValue</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_HalfWordGetPointer
</UL>

<P><STRONG><a name="[434]"></a>FIO_ByteSetDir</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_ByteGetPointer
</UL>

<P><STRONG><a name="[436]"></a>FIO_ByteSetMask</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_ByteGetPointer
</UL>

<P><STRONG><a name="[437]"></a>FIO_ByteSetValue</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_ByteGetPointer
</UL>

<P><STRONG><a name="[438]"></a>FIO_ByteClearValue</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_ByteGetPointer
</UL>

<P><STRONG><a name="[439]"></a>FIO_ByteReadValue</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_ByteGetPointer
</UL>

<P><STRONG><a name="[43a]"></a>RTC_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lpc17xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_ConfigPPWR
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[43b]"></a>RTC_DeInit</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lpc17xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_ConfigPPWR
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[43c]"></a>RTC_ResetClockTickCounter</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lpc17xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[43d]"></a>RTC_Cmd</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lpc17xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[43e]"></a>RTC_CntIncrIntConfig</STRONG> (Thumb, 282 bytes, Stack size 16 bytes, lpc17xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[43f]"></a>RTC_AlarmIntConfig</STRONG> (Thumb, 282 bytes, Stack size 16 bytes, lpc17xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[440]"></a>RTC_SetTime</STRONG> (Thumb, 336 bytes, Stack size 16 bytes, lpc17xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[441]"></a>RTC_GetTime</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, lpc17xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[442]"></a>RTC_SetFullTime</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, lpc17xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[443]"></a>RTC_GetFullTime</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, lpc17xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[444]"></a>RTC_SetAlarmTime</STRONG> (Thumb, 290 bytes, Stack size 16 bytes, lpc17xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[4ea]"></a>RTC_GetAlarmTime</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, lpc17xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[445]"></a>RTC_SetFullAlarmTime</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, lpc17xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[446]"></a>RTC_GetFullAlarmTime</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, lpc17xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[447]"></a>RTC_GetIntPending</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, lpc17xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[448]"></a>RTC_ClearIntPending</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lpc17xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[449]"></a>RTC_CalibCounterCmd</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, lpc17xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[44a]"></a>RTC_CalibConfig</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, lpc17xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[17f]"></a>RTC_WriteGPREG</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, lpc17xx_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RTC_WriteGPREG
</UL>
<BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKB
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systeminit
</UL>

<P><STRONG><a name="[1c0]"></a>RTC_ReadGPREG</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, lpc17xx_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RTC_ReadGPREG
</UL>
<BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASKB
</UL>

<P><STRONG><a name="[44b]"></a>WDT_SetTimeOut</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, lpc17xx_wdt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WDT_SetTimeOut &rArr; CLKPWR_SetPCLKDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_SetPCLKDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Start
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_UpdateTimeOut
</UL>

<P><STRONG><a name="[1f1]"></a>WDT_Init</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, lpc17xx_wdt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WDT_Init &rArr; CLKPWR_SetPCLKDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_SetPCLKDiv
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK0
</UL>

<P><STRONG><a name="[1f6]"></a>WDT_Feed</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lpc17xx_wdt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WDT_Feed
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyIrqEnable
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyIrqDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Start
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK0
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_UpdateTimeOut
</UL>

<P><STRONG><a name="[1f2]"></a>WDT_Start</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lpc17xx_wdt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WDT_Start &rArr; WDT_SetTimeOut &rArr; CLKPWR_SetPCLKDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Feed
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_SetTimeOut
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK0
</UL>

<P><STRONG><a name="[4eb]"></a>WDT_ReadTimeOutFlag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lpc17xx_wdt.o(.text), UNUSED)

<P><STRONG><a name="[4ec]"></a>WDT_ClrTimeOutFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lpc17xx_wdt.o(.text), UNUSED)

<P><STRONG><a name="[44c]"></a>WDT_UpdateTimeOut</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lpc17xx_wdt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Feed
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_SetTimeOut
</UL>

<P><STRONG><a name="[4ed]"></a>WDT_GetCurrentCount</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lpc17xx_wdt.o(.text), UNUSED)

<P><STRONG><a name="[1f3]"></a>AT45DB_Init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, at45db.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AT45DB_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_hi_speed
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK0
</UL>

<P><STRONG><a name="[44f]"></a>AT45DB_ReadStatus</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, at45db.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AT45DB_ReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_send
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_ss
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT45DB_WaitOK
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT45DB_GetFlashPara
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT45DB_Compare
</UL>

<P><STRONG><a name="[1f5]"></a>AT45DB_GetFlashPara</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, at45db.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AT45DB_GetFlashPara &rArr; AT45DB_ReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT45DB_ReadStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK0
</UL>

<P><STRONG><a name="[1f4]"></a>AT45DB_WaitOK</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, at45db.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AT45DB_WaitOK &rArr; AT45DB_ReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT45DB_ReadStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT45DB_ReadByte
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK0
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT45DB_Compare
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT45DB_WriteByte
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT45DB_WriteBuffer
</UL>

<P><STRONG><a name="[225]"></a>AT45DB_ReadByte</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, at45db.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = AT45DB_ReadByte &rArr; AT45DB_WaitOK &rArr; AT45DB_ReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT45DB_WaitOK
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_send
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_ss
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XTransaction
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSystemPara2
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSystemPara1
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSystemPara
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XKeySystemVisible
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XColSystemPara
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XChannels
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT45DB_ReadPage
</UL>

<P><STRONG><a name="[451]"></a>AT45DB_WriteBuffer</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, at45db.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = AT45DB_WriteBuffer &rArr; AT45DB_WaitOK &rArr; AT45DB_ReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT45DB_WaitOK
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_send
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_ss
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT45DB_WritePage
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT45DB_WriteByte
</UL>

<P><STRONG><a name="[452]"></a>AT45DB_WriteByte</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, at45db.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AT45DB_WriteByte &rArr; AT45DB_WriteBuffer &rArr; AT45DB_WaitOK &rArr; AT45DB_ReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT45DB_WaitOK
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_send
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_ss
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT45DB_WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT45DB_WritePage
</UL>

<P><STRONG><a name="[453]"></a>AT45DB_Compare</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, at45db.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AT45DB_Compare &rArr; AT45DB_WaitOK &rArr; AT45DB_ReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT45DB_WaitOK
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_send
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_ss
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT45DB_ReadStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT45DB_WritePage
</UL>

<P><STRONG><a name="[454]"></a>AT45DB_ReadPage</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, at45db.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT45DB_ReadByte
</UL>

<P><STRONG><a name="[224]"></a>AT45DB_WritePage</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, at45db.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = AT45DB_WritePage &rArr; AT45DB_WriteByte &rArr; AT45DB_WriteBuffer &rArr; AT45DB_WaitOK &rArr; AT45DB_ReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT45DB_Compare
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT45DB_WriteByte
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT45DB_WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XTransaction
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSystemPara2
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSystemPara1
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSystemPara
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XKeySystemVisible
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XColSystemPara
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XChannels
</UL>

<P><STRONG><a name="[4ee]"></a>AT45DB_Test</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, at45db.o(.text), UNUSED)

<P><STRONG><a name="[44d]"></a>spi_init</STRONG> (Thumb, 150 bytes, Stack size 0 bytes, spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT45DB_Init
</UL>

<P><STRONG><a name="[44e]"></a>spi_hi_speed</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT45DB_Init
</UL>

<P><STRONG><a name="[450]"></a>spi_ss</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT45DB_ReadByte
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT45DB_Compare
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT45DB_WriteByte
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT45DB_WriteBuffer
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT45DB_ReadStatus
</UL>

<P><STRONG><a name="[37c]"></a>spi_send</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT45DB_ReadByte
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT20L24F6Y_ReadZiku
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT45DB_Compare
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT45DB_WriteByte
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT45DB_WriteBuffer
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT45DB_ReadStatus
</UL>

<P><STRONG><a name="[37b]"></a>spi_sziku</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT20L24F6Y_ReadZiku
</UL>

<P><STRONG><a name="[3e8]"></a>OSInitHookBegin</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, osinithookbegin.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[3f0]"></a>OSInitHookEnd</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, osinithookend.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[3f7]"></a>OSTaskCreateHook</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ostaskcreatehook.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
</UL>

<P><STRONG><a name="[3de]"></a>OSTaskDelHook</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ostaskdelhook.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[3e6]"></a>OSTaskIdleHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ostaskidlehook.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
</UL>

<P><STRONG><a name="[3e3]"></a>OSTaskStatHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ostaskstathook.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[173]"></a>OSTaskSwHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ostaskswhook.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__s_OSCtxSw
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__s_OSStartHighRdy
</UL>

<P><STRONG><a name="[3f6]"></a>OSTCBInitHook</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ostcbinithook.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
</UL>

<P><STRONG><a name="[3f5]"></a>OSTimeTickHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ostimetickhook.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
</UL>

<P><STRONG><a name="[4ef]"></a>__semihosting$guard</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[4f0]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[3b1]"></a>malloc</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, h1_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyHeapMalloc
</UL>

<P><STRONG><a name="[3b3]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyHeapFree
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[35b]"></a>__c89vsprintf</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, c89vsprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trace
</UL>

<P><STRONG><a name="[237]"></a>__2sprintf</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, __2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionDoXuanhuoTest
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionDoTempeTest
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionLCDTest
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionAllCHResult
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChannelTest
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecimalPoint
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllChannelResult
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllChannelStat
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyget
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keydisplay
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispVersionText
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispSaleText
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispInputText
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispErrText
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispChaxunText
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispBeginText
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitCHNum
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitYear
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitTenColumn
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitTemerature
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitSUNUM
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitSACON
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitRCOIN
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitPOSEN
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitPONO
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitPCEN
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitOREADERCOST
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitONREADER
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitONOTE
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitOCOIN
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitOCHANGE
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitNOST
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitNBUY
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitMonth
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitMinute
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitMAXGOODS
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitLogoSel
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitLEDOn
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitLEDMinuteOn
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitLEDMinuteOff
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitLEDHourOn
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitLEDHourOff
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitLCDSEL
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitLAYNO
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitLAYENABLE
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitKeySel
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitHour
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitHOST3
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitHOST2
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitHOST1
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitHOLDNOTE5
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitHOLDNOTE10
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitHOLDNOTE
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitGPRS
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitFLASH
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitDate
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitDBNUM
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitCompressOn
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitCompressMinuteOn
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitCompressMinuteOff
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitCompressHourOn
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitCompressHourOff
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitCOVA3JIDU
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitCOVA3
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitCOVA2JIDU
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitCOVA2
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitCOVA1JIDU
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitCOVA1
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitCOST
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitCHSUJIDU
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitCHSU
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitCHST
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitCHNO
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitCHLF
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitCHGOODS
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitCHDO
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitCH9
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitCH8
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitCH7
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitCH6
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitCH5
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitCH4
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitCH3
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitCH2
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitCH1
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitCH0
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitCGSV
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitAutoColumn
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitAddGoods
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_SubCHResult
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SprintDec
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPAddChanges
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_MalfunctionError
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_VendDenied
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_VendApproved
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_BeginSession
</UL>

<P><STRONG><a name="[459]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[45a]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[45b]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[45c]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[458]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[149]"></a>_printf_int_dec</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[45f]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[461]"></a>_printf_longlong_oct</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[14d]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[155]"></a>_printf_ll_oct</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[462]"></a>_printf_longlong_hex</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[14f]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[157]"></a>_printf_ll_hex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[143]"></a>_printf_hex_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[463]"></a>__printf</STRONG> (Thumb, 406 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
</UL>
<BR>[Called By]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[20b]"></a>strcpy</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionDemo8
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionDemo7
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyget
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pitu_LCDPrintf
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispSaleText
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPayoutText
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispLessText
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispInputText
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispIOUText
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispErrText
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispChaxunText
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAddMoneyText
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitHOST3_ReaderEnable
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitHOST2_ReaderCost
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitSENO
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuInitGSMNO
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_HoldNote
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_SubReader
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_SubNOTE
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_CoinValue
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_ChangeValue
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_NoteValue
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_SetChannel
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_LEDSet
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_TempSet
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_TimeSet
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_System
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_ChannelTransJidu
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_ChannelTrans
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_GoodsJidu
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_Goods
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_PaymentsJidu
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_Payments
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_Transactions
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_Business
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_Driver
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_AddGoods
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_Channel
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_Root
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_VP_CMD_Payout_IOUText
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_VP_CMD_PayoutText
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_CmdOutOfSequence
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_MalfunctionError
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_EndSession
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_VendDenied
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_VendApproved
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_BeginSession
</UL>

<P><STRONG><a name="[20e]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionDoLEDTest
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionLEDTest
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionDoTempsTest
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionTempTest
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionLCDTest
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionIRTest
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionAllCHResult
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HopperTest
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionDemo8
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionDemo7
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionCHLF
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChannelTest
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionPW
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionPWAdmin
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionPW3
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionPW2
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllChannelResult
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllChannelStat
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyget
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keydisplay
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetScriptUnicode
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFull_LCD
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_LCD
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoChuhuoMsg
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispWuhuoText
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispSaleText
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPayoutText
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispOverText
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispLessText
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispInputText
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispInputErrText
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispInitText
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispIOUText
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispErrText
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispEndText
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispChuhuoText
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispChaxunText
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispChaoshiText
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispChangeText
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispBeginText
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAddMoneyText
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_HoldNote
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_SubReader
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_SubNOTE
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_SubCHResult
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_SetAdmin
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_SetConfirmation
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_CoinValue
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_ChangeValue
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_NoteValue
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_SetChannel
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_LEDSet
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_TempSet
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_TimeSet
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_System
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_ConfirmationJidu
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_Confirmation
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_NoteTestConfirm
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_CoinsTestConfirm
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_TransInputChannelNoJidu
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_TransInputChannelNo
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_ChannelTransJidu
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_ChannelTrans
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_Goods
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_PaymentsJidu
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_Payments
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_Business
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_Driver
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_AddInputChannelNo
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_AddGoods
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_InputNum
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_Channel
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_InputLayerNum
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_Password
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_VP_CMD_ChuhuoMsg
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_VP_CMD_Payout_IOUText
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_VP_CMD_PayoutText
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispRetransText
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPSynGoodsCol
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPChangeColPrice
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPAddSingleColGoods
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPAddLayerColGoods
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPAddChanges
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPAddAllColGoods
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispTextLine
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_CmdOutOfSequence
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_MalfunctionError
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_EndSession
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_VendDenied
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_VendApproved
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_BeginSession
</UL>

<P><STRONG><a name="[23a]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionDemo8
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunctionDemo7
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllChannelResult
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllChannelStat
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispSaleText
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPayoutText
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispLessText
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispInputText
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispIOUText
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispErrText
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispChaxunText
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAddMoneyText
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_HoldNote
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_SubReader
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_SubNOTE
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_CoinValue
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_ChangeValue
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_NoteValue
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_SetChannel
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_LEDSet
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_TempSet
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_TimeSet
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_System
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_ChannelTransJidu
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_ChannelTrans
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_GoodsJidu
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_Goods
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_PaymentsJidu
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_Payments
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_Transactions
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_Business
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_Driver
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_AddGoods
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_Channel
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_Root
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_VP_CMD_Payout_IOUText
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_VP_CMD_PayoutText
</UL>

<P><STRONG><a name="[20f]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFull_LCD
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_LCD
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillAcceptor_SetBillPara
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyMsgPost
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyMsgPend
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyMsgAccept
</UL>

<P><STRONG><a name="[465]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[4f1]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[226]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RstSystemPara
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQuery
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[4f2]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[4f3]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[4f4]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[271]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITLBusUnpack
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3_ClrBuf
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPMission_ColumnSta_RPT
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_ClrBuf
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPSerialInit
</UL>

<P><STRONG><a name="[466]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[4f5]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[209]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetScriptUnicode
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pitu_LCDPutLOGOBmp
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFull_LCD
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_LCD
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pitu_LCDPrintf
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pitu_LCDClearLine
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITLBusUnpack
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_CmdOutOfSequence
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_MalfunctionError
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_EndSession
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_VendDenied
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_VendApproved
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_BeginSession
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Script_GetAddress
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrZiFu
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPBusFrameUnPack
</UL>

<P><STRONG><a name="[4f6]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[4f7]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[467]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[3d0]"></a>mktime</STRONG> (Thumb, 354 bytes, Stack size 56 bytes, mktime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tm_carry
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
</UL>

<P><STRONG><a name="[455]"></a>__rt_heap_descriptor</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[4f8]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[4f9]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[5]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[2]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[456]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_expand
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[46b]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[163]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_expand
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_escrow
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[46e]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[1]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[45e]"></a>_printf_int_common</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>

<P><STRONG><a name="[141]"></a>_printf_charcount</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[457]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
</UL>

<P><STRONG><a name="[138]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> __2sprintf.o(.text)
<LI> c89vsprintf.o(.text)
</UL>
<P><STRONG><a name="[46f]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[159]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[15b]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[470]"></a>_printf_lcs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[15d]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[15f]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[151]"></a>_printf_longlong_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[460]"></a>_wcrtomb</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, _wcrtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[45d]"></a>__rt_udiv10</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtudiv10.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[4fa]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[47d]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[4fb]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[472]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>

<P><STRONG><a name="[46a]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[471]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[4fc]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[478]"></a>_printf_fp_dec_real</STRONG> (Thumb, 616 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[46c]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[46d]"></a>__rt_heap_escrow</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, heapauxa.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[469]"></a>__rt_heap_expand</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, heapauxa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __rt_heap_expand
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[16a]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[165]"></a>__rt_locale</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
</UL>

<P><STRONG><a name="[47a]"></a>_printf_fp_infnan</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[474]"></a>_btod_etento</STRONG> (Thumb, 230 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[16e]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[47c]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[47b]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[47f]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>

<P><STRONG><a name="[486]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[487]"></a>__rt_fp_status_addr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rt_fp_status_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[475]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[482]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[481]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[483]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[484]"></a>_e2e</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[476]"></a>_btod_ediv</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[477]"></a>_btod_emul</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[485]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[479]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[13a]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[168]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[13c]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_sys_s.o(rt_sys))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[161]"></a>_fp_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _fp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_fp_status_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[4fd]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[145]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[4fe]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, usenofp.o(x$fpl$usenofp), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[277]"></a>DRV_Command</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DRV_Command &rArr; Uart2_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_SetParity
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_Read
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_ClrBuf
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_Write
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_SetEvbMode
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Test
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_ClearSN
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Inquire
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Dispense
</UL>

<P><STRONG><a name="[283]"></a>Hopper_Command</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, hopper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216 + Unknown Stack Size
<LI>Call Chain = Hopper_Command &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_SetParity
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_Read
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_ClrBuf
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trace
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_Write
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_SetEvbMode
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HopperInquire
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HopperPayout
</UL>

<P><STRONG><a name="[2a8]"></a>Gbahr1_Command</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, gbahr1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Gbahr1_Command &rArr; Uart3_Read &rArr; Uart3IsRxBufNull &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3_Write
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3_Read
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3_ClrBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gbahr1_Return
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gbahr1_Stack
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gbahr1_Poll
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gbahr1_Enable
</UL>

<P><STRONG><a name="[33e]"></a>__DEC2BCD</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, pcf8563t.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563T_SetTime
</UL>

<P><STRONG><a name="[342]"></a>__BCD2DEC</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, pcf8563t.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563T_GetTime
</UL>

<P><STRONG><a name="[37d]"></a>SelectKey_Command</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, selectkey.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216 + Unknown Stack Size
<LI>Call Chain = SelectKey_Command &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trace
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_Write
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectKeySet
</UL>

<P><STRONG><a name="[3a8]"></a>SelectKey_Command_1</STRONG> (Thumb, 242 bytes, Stack size 40 bytes, acdc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216 + Unknown Stack Size
<LI>Call Chain = SelectKey_Command_1 &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_SetParity
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_Read
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trace
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_Write
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_SetEvbMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACDCModuleQuery
</UL>

<P><STRONG><a name="[3e4]"></a>OS_InitTaskStat</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = OS_InitTaskStat &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[3e7]"></a>OS_InitTaskIdle</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = OS_InitTaskIdle &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[3ec]"></a>OS_InitEventList</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_InitEventList
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[3eb]"></a>OS_InitTCBList</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_InitTCBList
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[3ea]"></a>OS_InitRdyList</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[3e9]"></a>OS_InitMisc</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[3f8]"></a>OS_FlagTaskRdy</STRONG> (Thumb, 90 bytes, Stack size 20 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagUnlink
</UL>
<BR>[Called By]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagDel
</UL>

<P><STRONG><a name="[3fb]"></a>OS_FlagBlock</STRONG> (Thumb, 124 bytes, Stack size 20 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
</UL>

<P><STRONG><a name="[420]"></a>ConfigurePins</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, uartdev_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ConfigurePins &rArr; PINSEL_ConfigPin &rArr; PINSEL_SetResistorMode
</UL>
<BR>[Calls]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_ConfigPin
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDev_Init
</UL>

<P><STRONG><a name="[422]"></a>ConfigureUart</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, uartdev_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ConfigureUart &rArr; UART_Init &rArr; uart_set_divisors &rArr; CLKPWR_GetPCLK
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDev_Init
</UL>

<P><STRONG><a name="[11d]"></a>UartDev_Init</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, uartdev_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = UartDev_Init &rArr; ConfigureUart &rArr; UART_Init &rArr; uart_set_divisors &rArr; CLKPWR_GetPCLK
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyIrqEnable
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureUart
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigurePins
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetupCbs
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IntConfig
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uartdev_lpc17xx.o(.data)
</UL>
<P><STRONG><a name="[11e]"></a>UartDev_UnInit</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, uartdev_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UartDev_UnInit &rArr; UART_DeInit &rArr; UART_TxCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uartdev_lpc17xx.o(.data)
</UL>
<P><STRONG><a name="[11f]"></a>UartDev_BufTx</STRONG> (Thumb, 326 bytes, Stack size 32 bytes, uartdev_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = UartDev_BufTx &rArr; UART_Send &rArr; UART_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_incr
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetLineStatus
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IntConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uartdev_lpc17xx.o(.data)
</UL>
<P><STRONG><a name="[120]"></a>UartDev_BufRx</STRONG> (Thumb, 164 bytes, Stack size 28 bytes, uartdev_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = UartDev_BufRx
</UL>
<BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_incr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uartdev_lpc17xx.o(.data)
</UL>
<P><STRONG><a name="[121]"></a>UartDev_BufFlush</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, uartdev_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> uartdev_lpc17xx.o(.data)
</UL>
<P><STRONG><a name="[428]"></a>GPIO_GetPointer</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, lpc17xx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadValue
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_SetMask
</UL>

<P><STRONG><a name="[42f]"></a>FIO_HalfWordGetPointer</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_HalfWordReadValue
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_HalfWordClearValue
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_HalfWordSetValue
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_HalfWordSetMask
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_HalfWordSetDir
</UL>

<P><STRONG><a name="[435]"></a>FIO_ByteGetPointer</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_ByteReadValue
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_ByteClearValue
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_ByteSetValue
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_ByteSetMask
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_ByteSetDir
</UL>

<P><STRONG><a name="[468]"></a>_tm_carry</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, mktime.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
</UL>

<P><STRONG><a name="[139]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[473]"></a>_fp_digits</STRONG> (Thumb, 420 bytes, Stack size 88 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
